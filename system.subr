#!/bin/sh
# if is_mounted /tmp; then ...mounted..
# - check for dir is mountpoint
is_mounted()
{
    [ ! -d "${1}" ] && return 1
    tst=`df ${1} | tail +2 | awk '{ print $6 }'`
    [ "${tst}" = "${1}" ]
    return $?
}

# if on_mounted /usr/src/base; then ...mounted..
# - check if dir mounted to other place
on_mounted()
{
    [ ! -d "${1}" ] && return 1
    mount |grep " on " | while read _device on _mountpt; do
    [ "$_device" != "$1" ] || exit 2
    done

[ $? -eq 2 ] && return 0
return 1
}


mountbase()
{
#test for zfs mounted & mount if not
case $zfsfeat in
    1) . $zfstool
	[ $baserw -eq 1 ] && path=$data
	zfsmnt ${path}
        [ $? -eq 2 ] && zfs mount "${ZPOOL}"
        ;;
esac

if [ "${baserw}" = "0" ]; then
    if [ -z "${arch}" ]; then
        echo
        echo "!WARNING: Jail conf for ${jname} doesnt have ARCH - please set this: WARNING!"
        echo
        arch=`uname -m`
    fi
    if [ -z "${basename}" ]; then
            basesrc="${basejaildir}/${basejailpref}_${arch}_${ver}"
        else
            basesrc="${basejaildir}/${basejailpref}_${basename}_${arch}_${ver}"
        fi
else
    basesrc="${data}"
fi

if is_mounted ${path}; then
#    echo "Already mounted ${path}"
    return 0
fi

# check for basesrc existance
[ -d ${basesrc} ] || {
    getyesno "No base in ${basesrc}. Try to fetch from remote repository?"
    [ $? -eq 1 -o $? -eq 3 ] && err 1 "No data at ${basesrc}"
    cbsd repo action=get sources=base arch=${arch} ver=${ver}
}

[ -d ${path} ] || mkdir -p ${path}

if [ ${baserw} -eq 0 ]; then
#check for fast base location (postfix -md)
    if [ -f "${basesrc}-md/COPYRIGHT" ]; then
        echo "Mount fast disc location for base..."
        [ ! -d "${basesrc}-md/var/cache/pkg" ] && mkdir -p "${basesrc}-md/var/cache/pkg"
        mount -t nullfs -oro "${basesrc}-md" ${path}
        MNTCODE=$?
    else
        [ ! -d "${basesrc}/var/cache/pkg" ] && mkdir -p "${basesrc}/var/cache/pkg"
        mount -t nullfs -oro ${basesrc} ${path}
        MNTCODE=$?
    fi
fi

# Finally mount devfs
#/sbin/mount -t devfs devfs ${path}/dev

#if [ -n "$devfs_ruleset" ]; then
#    . /etc/rc.subr
#    devfs_rulesets_from_file ${etcdir}/devfs.rules
#    devfs -m ${path}/dev rule -s ${devfsrules} applyset
#fi

return $MNTCODE
}


mountfstab()
{
local A=`/usr/local/bin/cbsd mountfstab jroot=${path} fstab=${mount_fstab}`

    if [ $? -ne 0 ]; then
	# force unmount it better then..
	echo "Invalid fstab file: ${A}"   
	A=`cbsd jcleanup jname=${jname}`
	continue
    fi

    if [ -f "${mount_fstab}.local" ]; then
	cbsd mountfstab jroot=${path} fstab=${mount_fstab}.local
    # cleanup for local?
    fi
}

unmountbase()
{
    [ $baserw -eq 0 ] && umount -f ${path}
    cbsd unmountfstab jroot=${path} fstab=${mount_fstab} > /dev/null 2>&1
    cbsd jcleanup jname=${jname} > /dev/null 2>&1
}

