#v10.0.5
#required for . ${dialog} 
TMPFILE="${ftmpdir}/inputbox.$$"

GET_JNAME_MSG="Enter jname. Name must begin with a letter (a-z) \nand not have any special symbols (-,.=% etc.)):"
GET_HOST_HOSTNAME_MSG="Enter jail FQDN (one word):"
GET_IPS_MSG="Enter jail ips (from CBSD pool ${nodeippool})\nUse IP/PREFIX form. Comma-separated for aliases\n\
Use 0 for empty ip (for example useful on vnet features) or DHCP (only for vnet feature)\n"
GET_ONINTERFACE_MSG="Auto create and auto remove IP on selected nics\n(0 for disable, auto - for auto detect):"
GET_BASE_MSG="choose jail base source version:"
GET_PATH_MSG="Enter mount point for jail:"
GET_DATA_MSG="Enter data directory for jail:"
GET_DEVFS_RULESET_MSG="sets devfs_ruleset for jail devfs:"
GET_ARCH_MSG="Enter target arch (i386 or amd64):"
GET_BASERW_MSG="Jail have personal copy of base system with write access\nNo base nullfs mount ?"
GET_SRCMOUNT_MSG="Jail with shared /usr/src (ro)?"
GET_OBJMOUNT_MSG="Jail with shared /usr/obj (ro)?"
GET_PORTSMOUNT_MSG="Jail with shared /usr/ports (ro)?"
GET_APPLYTPL_MSG="Apply cbsd templates for jail settings?"
GET_FLOATRESOLV_MSG="Floating resolv.conf (recommended)?"
GET_ASTART_MSG="Jail auto startup with system?"
GET_VNET_MSG="Enable VIMAGE/VNet Feature?"
GET_EXEC_TIMEOUT_MSG="The maximum amount of time to wait for a command to complete"
GET_EXEC_FIB_MSG="The FIB (routing table) to set when running commands inside the prison"
GET_CONSOLELOG_MSG="Jail consolelog file for stdout/stderr output. Possible values:\n( path_to_file, 0 - for disable log to file, 1 - for automatic $logdir/jname.log )"
GET_STOP_TIMEOUT_MSG="The maximum amount of time to wait for a prison's processes to exit after sending them a SIGTERM signal"
GET_MOUNT_FDESCFS_MSG="Mount a fdescfs(5) filesystem on the chrooted /dev/fd directory."
GET_ALLOW_DYING_MSG="Allow making changes to a dying jail"
GET_DEPEND_MSG="Specify a jail (or jails) that this jail depends on"
GET_ALLOW_PROCFS_MSG="privileged users inside the jail will be able to mount and unmount the procfs file system"
GET_ALLOW_TMPFS_MSG="privileged users inside the jail will be able to mount and unmount the tmpfs file system"
GET_ALLOW_ZFS_MSG="privileged users inside the jail will be able to mount and unmount the ZFS file system"
GET_ALLOW_KMEM_MSG="Allow kmem and io devices for jail. Warning: this is insecure options. \n Use it only for private purposes/X-jails"
GET_CPUSET_MSG="Associate group of CPUs to jail\n( 0 for all cores ($(( ncpu - 1 )) for this nodes)\nValid value: 1 or 0,2 or 0-4 (see cpuset(1))"
GET_NODENAME_MSG="Change nodename. Warning: this operation will recreate the ssh keys in $workdir/.ssh dir"
GET_MDSIZE_MSG="Enter size for the images"
GET_FREESIZE_MSG="reserved (expand to) X size of image free space (100m, 1g)"
GET_CPUS_MSG="Number of CPUs (eg: 1, max: 16)"
GET_RAM_MSG="RAM size (eg: 512M)"
GET_TYPE_MSG="Type of VMs (eg: freebsd, openbsd, linux, netbsd, dflybsd)"
GET_PROFILE_MSG="Profile of VMs (eg: centos-vmlinuz-2.6.32-431.el6.x86_64)"
GET_JAILPROFILE_MSG="Profile for jcreate"
GET_HOSTBRIDGE_MSG="Hostbridge for VMs (eg: hostbridge or amd_hostbridge)"
GET_BOOT_MSG="First boot device (eg: cd or hdd)"
GET_ISOPATH_MSG="Path to ISO image in srcdir/iso (eg: release.iso. 0 - for default img_iso)"
GET_GW4_MSG="Enter default gateway inside VMs or jail"

# show [] * for empty $1 values
# for Option list from -tui
curval()
{
    local T
    [ -z "${1}" ] && return 0

    eval T="\$$1"
    if [ -n "${T}" ]; then
	printf "[${T}]"
    else
	printf "[] *"
    fi
    return 0
}

#find for first jnameX where X is number++
freejname()
{
    local _num _newjname

    if [ -n "${default_jailname}" ]; then
	_newjname="${default_jailname}"
    else
	_newjname="jail"
    fi

    for _num in $( jot 100 ); do
	freejname="${_newjname}${_num}"
	jstatus jname=${freejname} > /dev/null 2>/dev/null
	[ $? -eq 0 ] && return 0
    done
}

# form for $pkglist
get_pkglist()
{
    pkglist="${ftmpdir}/tui.$$"
    pkgbrowser out="${pkglist}"

    [ ! -f "${pkglist}" ] && pkglist="NO"
}

# form for $jname
# if $1 = "nosearch" than skip for searching/testing of available jname
get_jname()
{
    local _ok _message _input _retval

    if [ "$1" = "nosearch" ]; then
	freejname=${jname}
    else
	freejname
    fi
    _ok=0

    while [ ${_ok} -ne 1 ]; do
	f_dialog_input _input "${GET_JNAME_MSG}" "${freejname}" "${_message}"
	_retval=$?
	case ${_retval} in
	    0)
		validate_jname $_input
		case $? in
		    1)
			jstatus jname=${_input} >/dev/null 2>&1
			if [ $? -ne 0 ]; then
			    _message="ERROR: Jail ${_input} already exist"
			else
			    _ok=1
			fi
			;;
		    *)
			_message="ERROR: Bad name. Choose other one"
			;;
		esac
		;;
	    *) _ok=1
	esac
    done

    [ -n "${_input}" ] && jname="${_input}"
    # reload some dynamic variables depended from jname
    [ -z "${jname}" ] && return 0
    merge_apply_profiles ${etcdir}/defaults/${zero_profile} ${global_profile_file}
}



# form for $host_hostname
get_jail_host_hostname()
{
    local _input _retval _defdomain

    if [ -n "${default_domain}" ]; then
	_defdomain="${default_domain}"
    else
	_defdomain="my.domain"
    fi

    if [ -z ${jname} ]; then
	f_dialog_input _input "${GET_HOST_HOSTNAME_MSG}" "jail1.${_defdomain}"
    else
	f_dialog_input _input "${GET_HOST_HOSTNAME_MSG}" "${jname}.${_defdomain}"
    fi

    _retval=$?

    case ${_retval} in
	0)
	    [ -n "${_input}" ] && host_hostname="${_input}"
	    ;;
    esac
}

get_jail_ips()
{
    local _ok=0 _input _retval _i _j _existing_ipjail _existing_ip _myip
    local msg_yes msg_no IFS _jname _ips

    while [ ${_ok} -ne 1 ]; do
	[ -z "${ip4_addr}" ] && ip4_addr=$( dhcpd 2>/dev/null )
	f_dialog_input _input "${GET_IPS_MSG}" "${ip4_addr}" "IP4 or IP6 Address"
	_retval=$?

	[ ${_retval} -ne 0 ] && return 0

	#check ip in two phases:
	# 1) via sqlite database for other's jails ips
	# 2) for ip in LAN

	if [ -z "${_input}" -a "${_input}" = "0" ]; then
	    ip4_addr="${_input}"
	    return 0
	fi

	msg_yes="ok"
	msg_no="not ok"

	_existing_ipjail=""
	_existing_ip=""
	_myip=""

	IFS=","
	for _i in ${_input}; do
	    ipwmask ${_i}
	    [ -z "${IWM}" -o "${_i}" = "0" ] && continue
	    iptype ${IWM}
	    [ $? -eq 1 ] && _myip="${_myip} ${IWM}"
	done

	# check for other jail
	IFS="|"
	_i=0
	eval $( cbsdsql local SELECT jname,ip4_addr FROM jails WHERE ip4_addr!="0" 2>/dev/null |while read _jname _ips; do
	    echo jname${_i}=\"$_jname\"
	    echo ips${_i}=\"${_ips}\"
	    _i=$(( _i + 1 ))
	done )
	unset IFS

	for _i in $(seq 0 255); do
	    eval _jname="\$jname$_i"
	    [ -z "${_jname}" ] && break
	    eval _existing_ipjail="\$ips$_i"
	    [ -z "${_existing_ipjail}" ] && break

	    _existing_ipjail=$( echo ${_existing_ipjail}|tr "," " " )

	    for _i in ${_existing_ipjail}; do
		    ipwmask ${_i}
		    [ -z "${IWM}" ] && continue
		    iptype ${IWM}
		    [ $? -eq 1 ] && _existing_ip="${_existing_ip} ${IWM}"
	    done

	    _ok=1

	    for _i in ${_existing_ip}; do
		for _j in ${_myip}; do
		    [ "${_i}" = "${_j}" ] && _ok=0 && break
		done
		[ ${_ok} -eq 0 ] && break
	    done

	    if [ ${_ok} -eq 0 ]; then
		f_dialog_noyes "${_i} already assigned to jail: ${_jname}.\nIf you believe that it's ok, choose 'ok' to continue or 'not ok' for another IP address" "WARNING"
		if [ $? -eq 1 ]; then
		    _ok=0
		    break
		fi
		_ok=2
		break
	    fi
	done # check for local jail end

	[ ${_ok} -eq 0 ] && continue # if not ok from previous stage - repeat
	[ ${_ok} -eq 2 ] && _ok=1 && continue

	_ok=1

	# check for ip existance in LAN
	for _i in ${_myip}; do
	    IFS=" "
	    f_dialog_info "Probing for ${_i} availability. Please wait..."
	    unset IFS
	    checkip ip=${_i} check=1 2>/dev/null
	    if [ $? -eq 2 ]; then
		_ok=0
	    fi
	done


	if [ ${_ok} -eq 0 ]; then
	    f_dialog_noyes "It seems like ${_i} address already used on several devices on the LAN\nYou can found MAC address by \"arp -an\" command.\n If you believe that it's ok, choose 'ok' to continue or 'not ok' for another IP address" "WARNING"
	    [ $? -eq 0 ] && _ok=1
	fi
    done

    ip4_addr="${_input}"
    return 0
}

# form for $interface
get_jail_oninterface()
{
    local _input _retval

    if [ -z "${interface}" -o "${interface}" = "auto" ]; then
	if [ -n "${ip4_addr}" ]; then
	    interface=$( getnics-by-ip ip=${ip4_addr} )
	else
	    interface=$( getnics-by-ip ip=0.0.0.0 )
	fi
    fi

    f_dialog_input _input "${GET_ONINTERFACE_MSG}" "${interface}"
    _retval=$?

    case ${_retval} in
    0)
	interface=$_input
	;;
    esac
}

# form for $base
get_jail_base()
{
    local _input _retval

    f_dialog_input _input "${GET_BASE_MSG}" "${ver}"

    _retval=$?

    case ${_retval} in
	0)
	    ver=${_input}
	    ;;
    esac
}

# form for $path
get_jail_path()
{
    local _input _retval

    f_dialog_input _input "${GET_PATH_MSG}" "${path}"

    _retval=$?

    case ${_retval} in
	0)
	    path=${_input}
	    ;;
    esac
}

# form for $data
get_jail_data()
{
    local _input _retval

    f_dialog_input _input "${GET_DATA_MSG}" "${data}"

    _retval=$?

    case ${_retval} in
	0)
	    data=${_input}
	    ;;
    esac
}


# form for $devfs_ruleset
get_devfs_ruleset()
{
    local _input _retval

    f_dialog_input _input "${GET_DEVFS_RULESET_MSG}" "${devfs_ruleset}"

    _retval=$?

    case ${_retval} in
	0)
	    devfs_ruleset=${_input}
	    ;;
    esac
}

# form for $baserw
get_jail_baserw()
{
    local _retval

    msg_yes="no"
    msg_no="yes"

    if [ ${baserw} -eq 0 ]; then
	f_dialog_yesno "${GET_BASERW_MSG}"
    else
	f_dialog_noyes "${GET_BASERW_MSG}"
    fi

    _retval=$?

    case ${_retval} in
	0|1)
	    baserw=${_retval}
	    ;;
    esac
}

# form for $mount_src
get_jail_mount_src()
{

    local _retval

    msg_yes="no"
    msg_no="yes"

    if [ ${mount_src} -eq 0 ]; then
	f_dialog_yesno "${GET_SRCMOUNT_MSG}"
    else
	f_dialog_noyes "${GET_SRCMOUNT_MSG}"
    fi

    _retval=$?

    case ${_retval} in
	0|1)
	    mount_src=${_retval}
	    ;;
    esac
}

# form for $mount_obj
get_jail_mount_obj()
{
    local _retval

     msg_yes="no"
     msg_no="yes"

    if [ ${mount_obj} -eq 0 ]; then
	f_dialog_yesno "${GET_OBJMOUNT_MSG}"
    else
	f_dialog_noyes "${GET_OBJMOUNT_MSG}"
    fi

    _retval=$?

    case ${_retval} in
	0|1)
	    mount_obj=${_retval}
	    ;;
    esac
}

# form for $mount_ports
get_jail_mount_ports()
{

    local _retval

     msg_yes="no"
     msg_no="yes"

    if [ ${mount_ports} -eq 0 ]; then
	f_dialog_yesno "${GET_PORTSMOUNT_MSG}"
    else
	f_dialog_noyes "${GET_PORTSMOUNT_MSG}"
    fi

    _retval=$?

    case ${_retval} in
	0|1)
	    mount_ports=${_retval}
	    ;;
    esac
}


# form for $applytpl
get_jail_applytpl()
{
local _retval

     msg_yes="no"
     msg_no="yes"

    if [ ${applytpl} -eq 0 ]; then
	 f_dialog_yesno "${GET_APPLYTPL_MSG}"
    else
	 f_dialog_noyes "${GET_APPLYTPL_MSG}"
    fi

    _retval=$?

    case ${_retval} in
	0|1)
	    applytpl=${_retval}
	    ;;
    esac
}

# form for $floatresolv
get_jail_floatresolv()
{
local _retval

     msg_yes="no"
     msg_no="yes"

    if [ ${floatresolv} -eq 0 ]; then
	f_dialog_yesno "${GET_FLOATRESOLV_MSG}"
    else
	f_dialog_noyes "${GET_FLOATRESOLV_MSG}"
    fi

    _retval=$?

    case ${_retval} in
	0|1)
	    floatresolv="${_retval}"
	    ;;
    esac
}

# $arch
get_jail_arch()
{
    local _input _retval

    f_dialog_input _input "${GET_ARCH_MSG}" "${arch}"

    _retval=$?

    case ${_retval} in
	0)
	    arch="$_input"
	    ;;
    esac
}

get_jail_mdsize()
{
    local _input _retval

    f_dialog_input _input "${GET_MDSIZE_MSG}" "${mdsize}"
    _retval=$?

    case ${_retval} in
	0)
	    mdsize="${_input}"
	    ;;
    esac
}

get_jail_freesize()
{
    local _input _retval

    f_dialog_input _input "${GET_FREESIZE_MSG}:" "${freesize}"
    _retval=$?

    case ${_retval} in
	0)
	    freesize="${_input}"
	    ;;
    esac
}




# form for $astart
get_jail_astart()
{
    local _retval

    msg_yes="no"
    msg_no="yes"

    if [ ${astart} -eq 0 ]; then
	f_dialog_yesno "${GET_ASTART_MSG}"
    else
	f_dialog_noyes "${GET_ASTART_MSG}"
    fi

    _retval=$?

    case ${_retval} in
	0|1)
	    astart="${_retval}"
	    ;;
    esac
}

# form for $vnet
get_jail_vnet()
{
    local _retval

    msg_yes="no"
    msg_no="yes"
    f_dialog_yesno "${GET_VNET_MSG}"
    _retval=$?

    case ${_retval} in
	0|1)
	    vnet="${_retval}"
	    vimage=${vnet}
	    ;;
    esac
}


# form for $mount_fdescfs
get_jail_mount_fdescfs()
{
    local _retval

    msg_yes="no"
    msg_no="yes"

    if [ ${mount_fdescfs} -eq 0 ]; then
	f_dialog_yesno "${GET_MOUNT_FDESCFS_MSG}"
    else
	f_dialog_noyes "${GET_MOUNT_FDESCFS_MSG}"
    fi

    _retval=$?

    case ${_retval} in
	0|1)
	    mount_fdescfs="${_retval}"
	    ;;
    esac
}

# form for $allow_dying
get_jail_allow_dying()
{
    local _retval

    msg_yes="no"
    msg_no="yes"

    if [ ${allow_dying} -eq 0 ]; then
	f_dialog_yesno "${GET_ALLOW_DYING_MSG}"
    else
	f_dialog_noyes "${GET_ALLOW_DYING_MSG}"
    fi

    _retval=$?

    case ${_retval} in
	0|1)
	    allow_dying="${_retval}"
	    ;;
    esac
}


# form for $allow_procfs
get_jail_allow_procfs()
{
    local _retval

    msg_yes="no"
    msg_no="yes"

    if [ ${allow_procfs} -eq 0 ]; then
	f_dialog_yesno "${GET_ALLOW_PROCFS_MSG}"
    else
	f_dialog_noyes "${GET_ALLOW_PROCFS_MSG}"
    fi

    _retval=$?

    case ${_retval} in
	0|1)
	    allow_procfs="${_retval}"
	    ;;
    esac
}


# form for $allow_tmpfs
get_jail_allow_tmpfs()
{
    local _retval

    msg_yes="no"
    msg_no="yes"
    f_dialog_yesno "${GET_ALLOW_TMPFS_MSG}"
    _retval=$?

    case ${_retval} in
	0|1)
	    allow_tmpfs="${_retval}"
	    ;;
    esac
}


# form for $allow_zfs
get_jail_allow_zfs()
{
    local _retval

    msg_yes="no"
    msg_no="yes"

    if [ ${allow_zfs} -eq 0 ]; then
	f_dialog_yesno "${GET_ALLOW_ZFS_MSG}"
    else
	f_dialog_noyes "${GET_ALLOW_ZFS_MSG}"
    fi

    _retval=$?

    case ${_retval} in
	0|1)
	    allow_zfs="${_retval}"
	    ;;
    esac
}

# form for $allow_kmem
get_jail_allow_kmem()
{
    local _retval _ret

    _ret=`sysctl -qn security.jail.dev_io_access`
    if [ -z "${_ret}" ]; then
	f_dialog_msgbox "Your kernel is not supported for dev/dri access"
	return 0
    fi

    msg_yes="no"
    msg_no="yes"
    f_dialog_yesno "${GET_ALLOW_KMEM_MSG}"
    _retval=$?

    case ${_retval} in
	0|1)
	    allow_kmem="${_retval}"
	    ;;
    esac
}


# form for $exec_timeout
get_jail_exec_timeout()
{
    local _retval _input

    f_dialog_input _input "${GET_EXEC_TIMEOUT_MSG}"
    _retval=$?

    case ${_retval} in
	0)
	    exec_timeout="${_input}"
	    ;;
    esac
}

# form for $exec_fib
get_jail_exec_fib()
{
    local _retval _input

    f_dialog_input _input "${GET_EXEC_FIB_MSG}"
    _retval=$?

    case ${_retval} in
	0)
	    exec_fib="${_input}"
	    ;;
    esac
}

# form for $exec_consolelog
get_jail_consolelog()
{
    local _retval _input

    f_dialog_input _input "${GET_CONSOLELOG_MSG}" "${exec_consolelog}"
    _retval=$?

    case ${_retval} in
	0)
	    exec_consolelog="${_input}"
	    ;;
    esac
}




# form for $stop_timeout
get_jail_stop_timeout()
{
    local _retval _input

    f_dialog_input _input "${GET_STOP_TIMEOUT_MSG}"
    _retval=$?

    case ${_retval} in
	0)
	    stop_timeout="${_input}"
	    ;;
    esac
}

# form for $depend
get_jail_depend()
{
    local _retval _input

    f_dialog_input _input "${GET_DEPEND_MSG}"
    _retval=$?

    case ${_retval} in
	0)
	    depend="${_input}"
	    ;;
    esac
}

# form for $cpuset
get_jail_cpuset()
{
    local _input _retval

    f_dialog_input _input "${GET_CPUSET_MSG}" "${cpuset}"

    _retval=$?

    case ${_retval} in
        0)
            cpuset=${_input}
            ;;
    esac
}

# form for $cpus
get_jail_cpus()
{
    local _input _retval

    f_dialog_input _input "${GET_CPUS_MSG}" "${vm_cpus}"

    _retval=$?

    case ${_retval} in
        0)
            vm_cpus=${_input}
            ;;
    esac
}

# form for $ram
get_jail_ram()
{
    local _input _retval

    f_dialog_input _input "${GET_RAM_MSG}" "${vm_ram}"

    _retval=$?

    case ${_retval} in
        0)
            vm_ram=${_input}
            ;;
    esac
}


# form for $vm_hostbridge
get_jail_hostbridge()
{
    local _input _retval

    f_dialog_input _input "${GET_HOSTBRIDGE_MSG}" "${vm_hostbridge}"

    _retval=$?

    case ${_retval} in
        0)
            vm_hostbridge=${_input}
            ;;
    esac
}


# form for $vm_boot
get_jail_boot()
{
    local _input _retval

    f_dialog_input _input "${GET_BOOT_MSG}" "${vm_boot}"

    _retval=$?

    case ${_retval} in
        0)
            vm_boot=${_input}
            ;;
    esac
}

# form for $vm_iso_path
get_jail_isopath()
{
    local _input _retval

    f_dialog_input _input "${GET_ISOPATH_MSG}" "${vm_iso_path}"

    _retval=$?

    case ${_retval} in
        0)
            vm_iso_path=${_input}
            ;;
    esac
}


# form for $type
get_jail_type()
{
    local _input _retval

    f_dialog_input _input "${GET_TYPE_MSG}" "${vm_os_type}"

    _retval=$?

    case ${_retval} in
        0)
	    [ "${vm_os_type}" != "${_input}" ] && unset vm_os_profile
            vm_os_type=${_input}
            ;;
    esac

}

# form for $vm_os_profile
# if $1 not empty just load profile without dialogizing
get_vm_profile()
{
    local _input _retval _search_profile="bhyve-${vm_os_type}" _res bhyve_profile _myprofiles="" _myfile _all _num

    _res=$( find ${etcdir}/defaults ${etcdir} -type f -depth 1 -maxdepth 1 -name ${_search_profile}\* -exec realpath {} \;| sort -u )

    _all=0

    for i in ${_res}; do
	unset ${bhyve_profile}
	eval $( grep ^bhyve_profile= ${i} )
	[ -z "${bhyve_profile}" ] && continue
	_myprofiles="${_myprofiles} ${bhyve_profile} : on "
	# store filename
	local profile${_all}="${bhyve_profile}"
	local file${_all}="${i}"
	_all=$(( _all + 1 ))
    done

    [ -z "${_myprofiles}" ] && unset vm_os_profile && return 0

    if [ -z "${1}"]; then
	vm_os_profile=$( eval $DIALOG \
	--colors \
	--title \"\$DIALOG_TITLE\"         \
	--backtitle \"\$DIALOG_BACKTITLE\" \
	--hline \"\$__hline\"              \
	--ok-label \"\$msg_ok\"            \
	--cancel-label \"\$msg_cancel\"    \
	--default-item \"\$__defaultitem\" \
	--radiolist \"\$__prompt\"         \
	0 0 0         \
	${_myprofiles}                      \
	2>&1 >&$DIALOG_TERMINAL_PASSTHRU_FD
	) || return $?
	# Return if user either pressed ESC or chose Cancel/No
	f_dialog_data_sanitize vm_os_profile
    else
	vm_os_profile="${1}"
    fi

    _num=0

    _myfile=$( while [ ${_num} -ne ${_all} ]; do
	eval _myfile="\$file${_num}"
	eval _prof="\$profile${_num}"
	[ "${vm_os_profile}" = "${_prof}" ] && echo "${_myfile}" && exit
	_num=$(( _num + 1 ))
    done )

    [ -z "${_myfile}" ] && return 0

    if [ -f "${_myfile}" ]; then
	. ${_myfile}
	global_profile_file="${_myfile}"
    fi
}

# form for $profile
# if $1 not empty, just load $1 profile without dialogizing
get_jail_profile()
{
    local _input _retval _search_profile="jail-freebsd-" jail_profile _res _myprofiles="" _myfile

    # default must be first due to last dir with user settings must overwrite
    _res=$( find ${etcdir}/defaults ${etcdir} -type f -depth 1 -maxdepth 1 -name ${_search_profile}\* -exec realpath {} \;| sort -u )

    for i in ${_res}; do
	unset ${jail_profile}
	eval $( grep ^jail_profile= ${i} )
	[ -z "${jail_profile}" ] && continue
	_myprofiles="${_myprofiles} ${jail_profile} : on "
	#store filename
	local file_${jail_profile}="${i}"
    done

    [ -z "${_myprofiles}" ] && unset jail_profile && return 0

    if [ -z "${1}" ]; then
	profile=$( eval $DIALOG \
	--colors \
	--title \"\$DIALOG_TITLE\"         \
	--backtitle \"\$DIALOG_BACKTITLE\" \
	--hline \"\$__hline\"              \
	--ok-label \"\$msg_ok\"            \
	--cancel-label \"\$msg_cancel\"    \
	--default-item \"\$__defaultitem\" \
	--radiolist \"\$__prompt\"         \
	0 0 0         \
	${_myprofiles}                      \
	2>&1 >&$DIALOG_TERMINAL_PASSTHRU_FD
	) || return $?
	# Return if user either pressed ESC or chose Cancel/No

	f_dialog_data_sanitize profile
    else
	profile="${1}"
    fi

    eval _myfile="\$file_$profile"
    if [ -f "${_myfile}" ]; then
	. ${_myfile}
	global_profile_file="${_myfile}"
	# reload some dynamic variables depended from jname
	merge_apply_profiles ${etcdir}/defaults/${zero_profile} ${global_profile_file}
    fi
}

# form for $gw4
get_jail_gw4()
{
    local _input _retval

    f_dialog_input _input "${GET_GW4_MSG}" "${gw4}"

    _retval=$?

    case ${_retval} in
        0)
            gw4=${_input}
            ;;
    esac
}


# form for $nodename
get_nodename()
{
    local _input _retval

    f_dialog_input _input "${GET_NODENAME_MSG}" "${nodename}"

    _retval=$?

    case ${_retval} in
	0)
	    nodename=${_input}
	    ;;
    esac
}

# generate temp .jconf
gen_jconf()
{
    local TMPFILE="${ftmpdir}/${jname}.$$.jconf"
    local fstab="${jailfstabdir}/${jailfstabpref}${jname}"
    local rcconf="${jailrcconfdir}/rc.conf_${jname}"

    # original jail area
    cat > ${TMPFILE} << EOF
# DO NOT EDIT THIS FILE. PLEASE USE INSTEAD:
# cbsd jconfig jname=${jname}
jname="${jname}";
path="${path}";
host_hostname="${host_hostname}";
ip4_addr="${ip4_addr}";
mount_devfs="${mount_devfs}";
allow_mount="${allow_mount}";
allow_devfs="${allow_devfs}";
allow_nullfs="${allow_nullfs}";
mount_fstab="${fstab}";
arch="${arch}";
mkhostsfile="${mkhostsfile}";
devfs_ruleset="${devfs_ruleset}";
ver="${ver}";
basename="${basename}";
baserw="${baserw}";
mount_src="${mount_src}";
mount_obj="${mount_obj}";
mount_kernel="${mount_kernel}";
mount_ports="${mount_ports}";
astart="${astart}";
data="${data}";
vnet="${vnet}";
applytpl="${applytpl}";
mdsize="${mdsize}";
rcconf="${jailrcconfdir}/rc.conf_${jname}";
floatresolv="${floatresolv}";

exec_start="${exec_start}"
exec_stop="${exec_stop}"

exec_poststart="${exec_poststart}";
exec_poststop="${exec_portstop}";
exec_prestart="${exec_prestart}";
exec_prestop="${exec_prestop}";

exec_master_poststart="${exec_master_poststart}";
exec_master_poststop="${exec_master_poststop}";
exec_master_prestart="${exec_master_prestart}";
exec_master_prestop="${exec_master_prestop}";
EOF

#bhyve area
if [ "${emulator}" = "bhyve" ]; then
	cat >> ${TMPFILE} << EOF
emulator="bhyve";
freesize="${freesize}";
vm_cpus="${vm_cpus}";
vm_ram="${vm_ram}";
vm_os_type="${vm_os_type}";
dist_site="";
iso_site="";
iso_img="";

vm_hostbridge="${vm_hostbridge}";
bhyve_flags="${bhyve_flags}";
virtio_type="${virtio_type}";
gw4="${gw4}";
vm_os_profile="${vm_os_profile}";
EOF
fi
    [ -n "${pkglist}" ] && echo "pkglist=\"${pkglist}\";" >> ${TMPFILE}

    if [ "${emulator}" = "bhyve" ]; then
	getyesno "${MAGENTA}Do you want to create vm immediately?${NORMAL}"
	[ $? -eq 1 -o $? -eq 3 ] && err 0 "${MAGENTA}You can make now: ${GREEN}cbsd bcreate jconf=${TMPFILE}${NORMAL}"
	bcreate jconf=${TMPFILE} delpkglist=${delpkglist} removejconf=${removejconf}
	[ $? -ne 0 ] && err 0 "${MAGENTA}Config file for jconf: ${GREEN}${TMPFILE}${NORMAL}"
    else
	getyesno "${MAGENTA}Do you want to create jail immediately?${NORMAL}"
	[ $? -eq 1 -o $? -eq 3 ] && err 0 "${MAGENTA}You can make now: ${GREEN}cbsd jcreate jconf=${TMPFILE}${NORMAL}"
	jcreate jconf=${TMPFILE} delpkglist=${delpkglist} removejconf=${removejconf}
	[ $? -ne 0 ] && err 0 "${MAGENTA}Config file for jconf: ${GREEN}${TMPFILE}${NORMAL}"
    fi

    return 0
}


merge_apply_profiles()
{

    [ -z "${1}" ] && return 0

    local _orig="$1"; shift
    local _custom="$1"; shift
    local _i

    [ ! -f "${_orig}" ] && return 0
    [ ! -f "${_custom}" -o "${_custom}" = "${_orig}" ] && unset _custom

    grep '\$' ${_orig} |grep -v "^#" |cut -d "=" -f 1 |sort > /tmp/1.sorted.$$
    [ -n "${_custom}" ] && grep '\$' ${_custom} |grep -v "^#" |cut -d "=" -f 1 |sort > /tmp/2.sorted.$$

    cut -d "=" -f 1 /tmp/1.sorted.$$ > /tmp/1.cuted.$$
    [ -n "${_custom}" ] && cut -d "=" -f 1 /tmp/2.sorted.$$ > /tmp/2.cuted.$$

    truncate -s0 /tmp/run.sh.$$
    # dummy file if $2 is empty
    [ -z "${_custom}" ] && touch /tmp/2.cuted.$$

    for i in $( cat /tmp/1.cuted.$$ /tmp/2.cuted.$$|sort -u ); do
        grep "^${i}" ${_custom} ${_orig} |head -n1|cut -d : -f 2 >> /tmp/run.sh.$$
    done

    . /tmp/run.sh.$$
    rm -f /tmp/1.sorted.$$ /tmp/2.sorted.$$ /tmp/1.cuted.$$ /tmp/2.cuted.$$ /tmp/run.sh.$$
}

