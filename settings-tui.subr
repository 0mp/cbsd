#v10.0.5
#required for . ${dialog} 
TMPFILE="${ftmpdir}/inputbox.$$"

GET_JNAME_MSG="Enter jname. Name must begin with a letter (a-z) \nand not have any special symbols (-,.=% etc.)):"
GET_FQDN_MSG="Enter jail FQDN (one word):"
GET_IPS_MSG="Enter jail ips (from CBSD pool ${nodeippool})\nUse IP/PREFIX form. Comma-separated for aliases\n\
Use 0 for empty ip (for example useful on vnet features) or DHCP (only for vnet feature)\n"
GET_ONINTERFACE_MSG="Auto create and auto remove IP on selected nics\n(0 for disable, auto - for auto detect):"
GET_BASE_MSG="choose jail base source version:"
GET_DEVFS_RULESET_MSG="sets devfs_ruleset for jail devfs:"
GET_ARCH_MSG="Enter target arch (i386 or amd64):"
GET_BASERW_MSG="Jail have personal copy of base system with write access\nNo base nullfs mount ?"
GET_SRCMOUNT_MSG="Jail with shared /usr/src (ro)?"
GET_OBJMOUNT_MSG="Jail with shared /usr/obj (ro)?"
GET_PORTSMOUNT_MSG="Jail with shared /usr/ports (ro)?"
GET_APPLYTPL_MSG="Apply cbsd templates for jail settings?"
GET_FLOATRESOLV_MSG="Floating resolv.conf (recommended)?"
GET_ASTART_MSG="Jail auto startup with system?"
GET_VNET_MSG="Enable VIMAGE/VNet Feature?"
GET_EXEC_TIMEOUT_MSG="The maximum amount of time to wait for a command to complete"
GET_EXEC_FIB_MSG="The FIB (routing table) to set when running commands inside the prison"
GET_CONSOLELOG_MSG="Jail consolelog file for stdout/stderr output. Possible values:\n( path_to_file, 0 - for disable log to file, 1 - for automatic $logdir/jname.log )"
GET_STOP_TIMEOUT_MSG="The maximum amount of time to wait for a prison's processes to exit after sending them a SIGTERM signal"
GET_MOUNT_FDESCFS_MSG="Mount a fdescfs(5) filesystem on the chrooted /dev/fd directory."
GET_ALLOW_DYING_MSG="Allow making changes to a dying jail"
GET_DEPEND_MSG="Specify a jail (or jails) that this jail depends on"
GET_ALLOW_PROCFS_MSG="privileged users inside the jail will be able to mount and unmount the procfs file system"
GET_ALLOW_TMPFS_MSG="privileged users inside the jail will be able to mount and unmount the tmpfs file system"
GET_ALLOW_ZFS_MSG="privileged users inside the jail will be able to mount and unmount the ZFS file system"
GET_ALLOW_KMEM_MSG="Allow kmem and io devices for jail. Warning: this is insecure options. \n Use it only for private purposes/X-jails"
GET_CPUSET_MSG="Associate group of CPUs to jail\n( 0 for all cores ($(( ncpu - 1 )) for this nodes)\nValid value: 1 or 0,2 or 0-4 (see cpuset(1))"
GET_NODENAME_MSG="Change nodename. Warning: this operation will recreate the ssh keys in $workdir/.ssh dir"
GET_MDSIZE_MSG="Enter size for the images"
GET_FREESIZE_MSG="reserved (expand to) X size of image free space (100m, 1g)"
GET_CPUS_MSG="Number of CPUs (eg: 1, max: 16)"
GET_RAM_MSG="RAM size (eg: 512M)"
GET_TYPE_MSG="Type of VMs (eg: freebsd, openbsd, linux, netbsd, dflybsd)"
GET_PROFILE_MSG="Profile of VMs (eg: centos-vmlinuz-2.6.32-431.el6.x86_64)"
GET_GW4_MSG="Enter default gateway inside VMs or jail"

# show [] * for empty $1 values
# for Option list from -tui
curval()
{
    local T
    [ -z "${1}" ] && return 0

    eval T="\$$1"
    if [ -n "${T}" ]; then
	printf "[${T}]"
    else
	printf "[] *"
    fi
    return 0
}

#find for first jnameX where X is number++
freejname()
{
    local _num

    for _num in `jot 100`; do
	freejname="jail${_num}"
	cbsd jstatus jname=${freejname} > /dev/null 2>/dev/null
	[ $? -eq 0 ] && return 0
    done
}

validate_jname()
{
    [ -z "$1" ] && return 1
    #echo ${_input} | grep -E "^[0-9]|[^a-zA-Z0-9]" > /dev/null 2>&1
    echo ${_inpu} |grep -E "^[0-9]|[-E%^&\(\)+\/?><:\{\}=\.]" 2>&1
    return $?
}


# form for $pkglist
get_pkglist()
{
    pkglist="${ftmpdir}/tui.$$"
#    cbsd pkgbrowser repo="http://dl.bsdstore.ru/freebsd/amd64/${ver}/xorg" out="${pkglist}"
    cbsd pkgbrowser out="${pkglist}"

    [ ! -f "${pkglist}" ] && pkglist="NO"
}

# form for $jname
# if $1 = "nosearch" than skip for searching/testing of available jname
get_jname()
{
    local _ok _message _input _retval

    if [ "$1" = "nosearch" ]; then
	freejname=${jname}
    else
	freejname
    fi
    _ok=0

    while [ ${_ok} -ne 1 ]; do
	f_dialog_input _input "${GET_JNAME_MSG}" "${freejname}" "${_message}"
	_retval=$?
	case ${_retval} in
	    0)
		validate_jname $_input
		case $? in
		    1)
		    /usr/local/bin/cbsd jstatus jname=${_input}
		    if [ $? -ne 0 ]; then
			_message="ERROR: Jail ${_input} already exist"
		    else
			_ok=1
		    fi
			;;
		    *) _message="ERROR: Bad name. Choose other one"
			;;
		esac
		;;
	    *) _ok=1
	esac
    done

    [ -n "${_input}" ] && jname=$_input
}



# form for $fqdn
get_jail_fqdn()
{
    local _input _retval

    if [ -z ${jname} ]; then
	f_dialog_input _input "${GET_FQDN_MSG}" "jail1.my.domain"
    else
	f_dialog_input _input "${GET_FQDN_MSG}" "${jname}.my.domain"
    fi

    _retval=$?

    case ${_retval} in
	0)
	    [ -n "${_input}" ] && fqdn=${_input} && host_hostname="${_input}"
	    ;;
    esac
}

# form for $ips
get_jail_ips()
{
    local _ok _input _retval

#    [ -z "${ip4_addr}" ] && ip4_addr=$( cbsd dhcpd 2>/dev/null )

    f_dialog_input _input "${GET_IPS_MSG}" "${ip4_addr}" "IP4 or IP6 Address"
    _retval=$?

    case ${_retval} in
	0)
	    [ -n "${_input}" ] && ip4_addr="${_input}"
	    ;;
    esac
}

# form for $interface
get_jail_oninterface()
{
    local _input _retval

    if [ -z "${interface}" -o "${interface}" = "auto" ]; then
	if [ -n "${ip4_addr}" ]; then
	    interface=`cbsd getnics-by-ip ip=${ip4_addr}`
	else
	    interface=`cbsd getnics-by-ip ip=0.0.0.0`
	fi
    fi

    f_dialog_input _input "${GET_ONINTERFACE_MSG}" "${interface}"
    _retval=$?

    case ${_retval} in
    0)
	interface=$_input
	;;
    esac
}

# form for $base
get_jail_base()
{
    local _input _retval

    f_dialog_input _input "${GET_BASE_MSG}" "${ver}"

    _retval=$?

    case ${_retval} in
	0)
	    ver=${_input}
	    ;;
    esac
}

# form for $devfs_ruleset
get_devfs_ruleset()
{
    local _input _retval

    f_dialog_input _input "${GET_DEVFS_RULESET_MSG}" "${devfs_ruleset}"

    _retval=$?

    case ${_retval} in
	0)
	    devfs_ruleset=${_input}
	    ;;
    esac
}

# form for $baserw
get_jail_baserw()
{
    local _retval

    msg_yes="no"
    msg_no="yes"

    if [ ${baserw} -eq 0 ]; then
	f_dialog_yesno "${GET_BASERW_MSG}"
    else
	f_dialog_noyes "${GET_BASERW_MSG}"
    fi

    _retval=$?

    case ${_retval} in
	0|1)
	    baserw=${_retval}
	    ;;
    esac
}

# form for $mount_src
get_jail_mount_src()
{

    local _retval

    msg_yes="no"
    msg_no="yes"

    if [ ${mount_src} -eq 0 ]; then
	f_dialog_yesno "${GET_SRCMOUNT_MSG}"
    else
	f_dialog_noyes "${GET_SRCMOUNT_MSG}"
    fi

    _retval=$?

    case ${_retval} in
	0|1)
	    mount_src=${_retval}
	    ;;
    esac
}

# form for $mount_obj
get_jail_mount_obj()
{
    local _retval

     msg_yes="no"
     msg_no="yes"

    if [ ${mount_obj} -eq 0 ]; then
	f_dialog_yesno "${GET_OBJMOUNT_MSG}"
    else
	f_dialog_noyes "${GET_OBJMOUNT_MSG}"
    fi

    _retval=$?

    case ${_retval} in
	0|1)
	    mount_obj=${_retval}
	    ;;
    esac
}

# form for $mount_ports
get_jail_mount_ports()
{

    local _retval

     msg_yes="no"
     msg_no="yes"

    if [ ${mount_ports} -eq 0 ]; then
	f_dialog_yesno "${GET_PORTSMOUNT_MSG}"
    else
	f_dialog_noyes "${GET_PORTSMOUNT_MSG}"
    fi

    _retval=$?

    case ${_retval} in
	0|1)
	    mount_ports=${_retval}
	    ;;
    esac
}


# form for $applytpl
get_jail_applytpl()
{
local _retval

     msg_yes="no"
     msg_no="yes"

    if [ ${applytpl} -eq 0 ]; then
	 f_dialog_yesno "${GET_APPLYTPL_MSG}"
    else
	 f_dialog_noyes "${GET_APPLYTPL_MSG}"
    fi

    _retval=$?

    case ${_retval} in
	0|1)
	    applytpl=${_retval}
	    ;;
    esac
}

# form for $floatresolv
get_jail_floatresolv()
{
local _retval

     msg_yes="no"
     msg_no="yes"

    if [ ${floatresolv} -eq 0 ]; then
	f_dialog_yesno "${GET_FLOATRESOLV_MSG}"
    else
	f_dialog_noyes "${GET_FLOATRESOLV_MSG}"
    fi

    _retval=$?

    case ${_retval} in
	0|1)
	    floatresolv="${_retval}"
	    ;;
    esac
}

# $arch
get_jail_arch()
{
    local _input _retval

    f_dialog_input _input "${GET_ARCH_MSG}" "${arch}"

    _retval=$?

    case ${_retval} in
	0)
	    arch="$_input"
	    ;;
    esac
}

get_jail_mdsize()
{
    local _input _retval

    f_dialog_input _input "${GET_MDSIZE_MSG}" "${mdsize}"
    _retval=$?

    case ${_retval} in
	0)
	    mdsize="${_input}"
	    ;;
    esac
}

get_jail_freesize()
{
    local _input _retval

    f_dialog_input _input "${GET_FREESIZE_MSG}:" "${freesize}"
    _retval=$?

    case ${_retval} in
	0)
	    freesize="${_input}"
	    ;;
    esac
}




# form for $astart
get_jail_astart()
{
    local _retval

    msg_yes="no"
    msg_no="yes"

    if [ ${astart} -eq 0 ]; then
	f_dialog_yesno "${GET_ASTART_MSG}"
    else
	f_dialog_noyes "${GET_ASTART_MSG}"
    fi

    _retval=$?

    case ${_retval} in
	0|1)
	    astart="${_retval}"
	    ;;
    esac
}

# form for $vnet
get_jail_vnet()
{
    local _retval

    msg_yes="no"
    msg_no="yes"
    f_dialog_yesno "${GET_VNET_MSG}"
    _retval=$?

    case ${_retval} in
	0|1)
	    vnet="${_retval}"
	    vimage=${vnet}
	    ;;
    esac
}


# form for $mount_fdescfs
get_jail_mount_fdescfs()
{
    local _retval

    msg_yes="no"
    msg_no="yes"

    if [ ${mount_fdescfs} -eq 0 ]; then
	f_dialog_yesno "${GET_MOUNT_FDESCFS_MSG}"
    else
	f_dialog_noyes "${GET_MOUNT_FDESCFS_MSG}"
    fi

    _retval=$?

    case ${_retval} in
	0|1)
	    mount_fdescfs="${_retval}"
	    ;;
    esac
}

# form for $allow_dying
get_jail_allow_dying()
{
    local _retval

    msg_yes="no"
    msg_no="yes"

    if [ ${allow_dying} -eq 0 ]; then
	f_dialog_yesno "${GET_ALLOW_DYING_MSG}"
    else
	f_dialog_noyes "${GET_ALLOW_DYING_MSG}"
    fi

    _retval=$?

    case ${_retval} in
	0|1)
	    allow_dying="${_retval}"
	    ;;
    esac
}


# form for $allow_procfs
get_jail_allow_procfs()
{
    local _retval

    msg_yes="no"
    msg_no="yes"

    if [ ${allow_procfs} -eq 0 ]; then
	f_dialog_yesno "${GET_ALLOW_PROCFS_MSG}"
    else
	f_dialog_noyes "${GET_ALLOW_PROCFS_MSG}"
    fi

    _retval=$?

    case ${_retval} in
	0|1)
	    allow_procfs="${_retval}"
	    ;;
    esac
}


# form for $allow_tmpfs
get_jail_allow_tmpfs()
{
    local _retval

    msg_yes="no"
    msg_no="yes"
    f_dialog_yesno "${GET_ALLOW_TMPFS_MSG}"
    _retval=$?

    case ${_retval} in
	0|1)
	    allow_tmpfs="${_retval}"
	    ;;
    esac
}


# form for $allow_zfs
get_jail_allow_zfs()
{
    local _retval

    msg_yes="no"
    msg_no="yes"

    if [ ${allow_zfs} -eq 0 ]; then
	f_dialog_yesno "${GET_ALLOW_ZFS_MSG}"
    else
	f_dialog_noyes "${GET_ALLOW_ZFS_MSG}"
    fi

    _retval=$?

    case ${_retval} in
	0|1)
	    allow_zfs="${_retval}"
	    ;;
    esac
}

# form for $allow_kmem
get_jail_allow_kmem()
{
    local _retval _ret

    _ret=`sysctl -qn security.jail.dev_io_access`
    if [ -z "${_ret}" ]; then
	f_dialog_msgbox "Your kernel is not supported for dev/dri access"
	return 0
    fi

    msg_yes="no"
    msg_no="yes"
    f_dialog_yesno "${GET_ALLOW_KMEM_MSG}"
    _retval=$?

    case ${_retval} in
	0|1)
	    allow_kmem="${_retval}"
	    ;;
    esac
}


# form for $exec_timeout
get_jail_exec_timeout()
{
    local _retval _input

    f_dialog_input _input "${GET_EXEC_TIMEOUT_MSG}"
    _retval=$?

    case ${_retval} in
	0)
	    exec_timeout="${_input}"
	    ;;
    esac
}

# form for $exec_fib
get_jail_exec_fib()
{
    local _retval _input

    f_dialog_input _input "${GET_EXEC_FIB_MSG}"
    _retval=$?

    case ${_retval} in
	0)
	    exec_fib="${_input}"
	    ;;
    esac
}

# form for $exec_consolelog
get_jail_consolelog()
{
    local _retval _input

    f_dialog_input _input "${GET_CONSOLELOG_MSG}" "${exec_consolelog}"
    _retval=$?

    case ${_retval} in
	0)
	    exec_consolelog="${_input}"
	    ;;
    esac
}




# form for $stop_timeout
get_jail_stop_timeout()
{
    local _retval _input

    f_dialog_input _input "${GET_STOP_TIMEOUT_MSG}"
    _retval=$?

    case ${_retval} in
	0)
	    stop_timeout="${_input}"
	    ;;
    esac
}

# form for $depend
get_jail_depend()
{
    local _retval _input

    f_dialog_input _input "${GET_DEPEND_MSG}"
    _retval=$?

    case ${_retval} in
	0)
	    depend="${_input}"
	    ;;
    esac
}

# form for $cpuset
get_jail_cpuset()
{
    local _input _retval

    f_dialog_input _input "${GET_CPUSET_MSG}" "${cpuset}"

    _retval=$?

    case ${_retval} in
        0)
            cpuset=${_input}
            ;;
    esac
}

# form for $cpus
get_jail_cpus()
{
    local _input _retval

    f_dialog_input _input "${GET_CPUS_MSG}" "${vm_cpus}"

    _retval=$?

    case ${_retval} in
        0)
            vm_cpus=${_input}
            ;;
    esac
}

# form for $ram
get_jail_ram()
{
    local _input _retval

    f_dialog_input _input "${GET_RAM_MSG}" "${vm_ram}"

    _retval=$?

    case ${_retval} in
        0)
            vm_ram=${_input}
            ;;
    esac
}

# form for $type
get_jail_type()
{
    local _input _retval

    f_dialog_input _input "${GET_TYPE_MSG}" "${vm_os_type}"

    _retval=$?

    case ${_retval} in
        0)
            vm_os_type=${_input}
            ;;
    esac
}

# form for $vm_os_profile
get_jail_profile()
{
    local _input _retval _search_profile="bhyve-${vm_os_type}" _res bhyve_profile _myprofiles=""

    _res=$( find ${etcdir}/defaults ${etcdir} -type f -depth 1 -maxdepth 1 -name ${_search_profile}\* -exec basename {} \;| sort -u )

    for i in ${_res}; do
	unset ${bhyve_profile}
	readconf ${i}
	[ -n "${bhyve_profile}" ] && _myprofiles="${_myprofiles} ${bhyve_profile} : on "
    done

    [ -z "${_myprofiles}" ] && unset vm_os_profile && return 0

    vm_os_profile=$( eval $DIALOG \
	--colors \
	--title \"\$DIALOG_TITLE\"         \
	--backtitle \"\$DIALOG_BACKTITLE\" \
	--hline \"\$__hline\"              \
	--ok-label \"\$msg_ok\"            \
	--cancel-label \"\$msg_cancel\"    \
	--default-item \"\$__defaultitem\" \
	--radiolist \"\$__prompt\"         \
	0 0 0         \
	${_myprofiles}                      \
	2>&1 >&$DIALOG_TERMINAL_PASSTHRU_FD
	) || return $?
	# Return if user either pressed ESC or chose Cancel/No

    f_dialog_data_sanitize vm_os_profile
}

# form for $gw4
get_jail_gw4()
{
    local _input _retval

    f_dialog_input _input "${GET_GW4_MSG}" "${gw4}"

    _retval=$?

    case ${_retval} in
        0)
            gw4=${_input}
            ;;
    esac
}



# form for $nodename
get_nodename()
{
    local _input _retval

    f_dialog_input _input "${GET_NODENAME_MSG}" "${nodename}"

    _retval=$?

    case ${_retval} in
	0)
	    nodename=${_input}
	    ;;
    esac
}
