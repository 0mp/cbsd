if [ ! "$_CBSD_JFS_SUBR" ]; then
_CBSD_JFS_SUBR=1
###

. ${zfstool}

# movedata $1-from $2-to
mvdata()
{
	local _src _dst
	[ -z "$1" -o -z "$2" ] && err 1 "mvdata: empty arguments"

	_src=$1
	_dst=$2

	[ -d "${_dst}" ] && err 1 "${_dst} directory exist. Please remove them first"

	if [ "${zfsfeat}" = "0" ]; then
		/bin/mv ${_src} ${_dst}
		return 0
	fi

	zfsmnt "${_src}"
	_res=$?

	readconf zfs.conf

	case $_res in
		0)
			echo "Switch to ZFS pool"
			zfsmnt ${workdir}
			/sbin/zfs create ${zfs_create_flags} -o mountpoint=${_dst} "${ZPOOL}${_dst}"
			/sbin/zfs mount "${ZPOOL}${_dst}"
			/bin/mkdir ${_dst}
			cd ${_src} && /bin/pax -p eme -rw . ${_dst} && ${CHFLAGS_CMD} -R noschg ${_src} && /bin/rm -rf ${_src}
		;;
		1)
			/sbin/zfs umount -f ${_src} > /dev/null 2>&1
			/sbin/zfs set mountpoint=${_dst} ${ZPOOL}
			/sbin/zfs mount ${ZPOOL}
			/bin/rmdir ${_src}
		;;
		2)
			/sbin/zfs set mountpoint=${_dst} ${ZPOOL}
			/sbin/zfs mount ${ZPOOL}
			/bin/rmdir ${_src}
		;;
	esac

	return 0
}


# clone data
# mode = cp, rsync, rsyncforce (no warning for existance TO dir)
# #clonedata /usr/jails/jails-data/jail1-data /mn rsync
clonedata()
{
	local _src _dst _mode _go _force _zpool

	[ -z "$1" -o -z "$2" -o -z "$3"  ] && err 1 "clonedata: empty arguments"
	[ -z "${jname}" ] && err 1 "No jname"

	_src=$1
	_dst=$2
	_mode=$3
	_force=0

	readconf zfs.conf

	case "${_mode}" in
		"cp") _go="/bin/cp -Rp " ;;
		"rsync") _go="/usr/local/bin/rsync -avzz --delete " ;;
		"rsyncforce") _go="/usr/local/bin/rsync -avzz --delete "; _force=1 ;;
		*) err 1 "Unsupported mode" ;;
	esac

	[ -d "${_dst}" -a ${_force} -eq 0 ] && err 1 "${_dst} directory exist. Please remove them"

	if [ ! -d "${_dst}" ]; then
		if [ $zfsfeat -eq 1 ]; then
			_zpool=$( /sbin/zfs list ${jaildatadir} |/usr/bin/tail +2 |/usr/bin/awk '{printf $1}' )
			/sbin/zfs create ${zfs_create_flags} -o mountpoint=${_dst} ${_zpool}/${jname}
			/sbin/zfs mount ${_zpool}/${jname}
		else
			/bin/mkdir -p ${_dst}
		fi
	fi

	${_go} ${_src}/* ${_dst}/

	# additional loop to check for symlink and zvol
	if [ $zfsfeat -eq 1 ]; then
		for i in $( /usr/bin/find ${_dst}/ -type l -depth 1 -maxdepth 1 ); do
			if is_getzvol ${i}; then
				imgbytes=$( /sbin/zfs get -Hp -o value volsize ${is_zvol} )
				# create_bhyvedsk ?
				DATA=$( /sbin/zfs get -Ho value name ${jaildatadir} )
				new_zvol=$( echo ${is_zvol} |/usr/bin/sed s:${old}:${new}:g )
				/sbin/zfs create -V ${imgbytes} -o volmode=dev ${new_zvol}
				/bin/dd if=/dev/zvol/${is_zvol} of=/dev/zvol/${new_zvol} bs=1g
				/bin/ln -sf /dev/zvol/${new_zvol} ${i}
			fi
		done
	fi
}

# remove data from disk
# $jname must be set
# if "$2" = "force" then force to remove non-empty dir
removedata()
{
	local _data

	[ -z "$1"  ] && err 1 "removedata: empty arguments"
	[ -z "${jname}"  ] && err 1 "removedata: jname variable must be set"

	_data=$1

	[ ! -d "${_data}" ] && return 0

	if [ "${zfsfeat}" = "1" ]; then

		for i in $( /usr/bin/find ${data}/ -type l -depth 1 -maxdepth 1 ); do
			if is_getzvol ${i}; then
				/sbin/zfs destroy ${is_zvol}
			fi
			/bin/rm -f ${i}
		done

		# extra check for zfs still exist
		ZPOOL=$( /sbin/zfs get -Ho value name ${jaildatadir} 2>/dev/null )
		if [ -n "${ZPOOL}" ]; then
			local _jailfs="${ZPOOL}/bcbsd-${jname}-dsk1.vhd ${ZPOOL}/${jname}"
			local i
			for i in ${_jailfs}; do
				/sbin/zfs list ${i} >/dev/null 2>/dev/null
				[ $? -eq 0 ] && /sbin/zfs destroy ${i}
			done
		fi
		unmountdata ${_data}
		[ -d "${_data}" ] && /bin/rm -rf ${_data}
	elif [ "${hammerfeat}" = "1" ]; then
		destroy_hammer_fs ${jname}
	else
		if [ "$2" = "force" ]; then
			${CHFLAGS_CMD} -R noschg ${_data}
			/bin/rm -rf ${_data}
		else
			/bin/rmdir ${_data}
		fi
	fi

	[ -d "${_data}" ] && err 1 "${MAGENTA}Directory not empty or busy: ${_data}${NORMAL}"
	return 0
}


# unmount if mount
unmountdata()
{
	local _data

	[ -z "$1" ] && err 1 "unmountdata: no arguments"
	_data=$1

	[ ! -d "${_data}" ] && return 1

	zfsmnt ${_data}

	if [ $? -eq 1 ]; then
		/sbin/zfs unmount -f ${_data}
		rmdir ${_data}
	fi
}


create_fs()
{
	local data="${1}"

	[ -z "${data}" ] && return 0

	if [ "${zfsfeat}" = "1" ]; then
		create_zfs_fs ${data}
	elif [ "${hammerfeat}" = "1" ]; then
		create_hammer_fs ${jname}
	else
		[ ! -d ${data} ] && /bin/mkdir -p ${data}
	fi
}


create_zfs_fs()
{
	local data="${1}"

	[ -z "${data}" ] && return 0

	ZPOOL=$( /sbin/zfs get -Ho value name ${jaildatadir} )
	if zfsroot $jname; then
		err 1 "$ZPOOL/$jname already in use"
	fi

	if [ -z "${zfs_snapsrc}" ]; then
		/sbin/zfs create ${zfs_create_flags} -o mountpoint=${data} ${ZPOOL}/${jname}
	else
		/sbin/zfs clone ${zfs_snapsrc} ${ZPOOL}/${jname}
		/sbin/zfs set mountpoint=${data} ${ZPOOL}/${jname}
	fi
}


#  create_hammer_fs jails
create_hammer_fs()
{
	[ -z "${1}" ] && return 1
	local dname="${1}"

	/sbin/hammer pfs-master ${jaildatadir}/${dname}-${jaildatapref}
}

#  destroy_hammer_fs jails
destroy_hammer_fs()
{
	[ -z "${1}" ] && return 1
	local dname="${1}"

	/sbin/hammer -y pfs-destroy ${jaildatadir}/${dname}-${jaildatapref}
}

###
fi
