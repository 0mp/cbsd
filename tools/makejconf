#!/bin/sh
#v10.0.2
globalconf="${workdir}/cbsd.conf";
MYARG="jname out"
MYOPTARG="ip6wa epair fbsd"
MYDESC="Make jailv2 config file"
ADDHELP="ip6wa - ip6 work-around (sleep 3 seconds) enabled\n\
epair - this is mandatory for vnet=1 type jail. Sets for jail vnic\n"

[ -f ${globalconf} ] || err 1 "no such conf file";
. ${globalconf}
. ${subr}
. ${inventory}
. ${tools}
. ${color}

init $*

mkjhosts()
{
    IP=$1
    JHOST=$2

    [ $applytpl -eq 0 -o "$ver" = "empty" ] && return

    #check for dup
    for i in `egrep "[:blank:]*${host_hostname}" ${JHOST} |awk '/^;/{print $1"\n"}'`; do
	if [ "$i" != "${IP}" ]; then
		TMPH="${ftmpdir}/hosts.$$"
		cp ${JHOST} ${TMPH}
		grep -v "[:blank:]*${host_hostname}" ${TMPH} > ${JHOST}
		rm -f ${TMPH}
	fi
    done

    [ `grep -c ^${IP} ${JHOST}` = "0" ] && echo ${IP} ${host_hostname} >> ${JHOST}
}


JAILRCCONF="${ftmpdir}/rc.conf_${jname}"
cbsd jmkrcconf jname=${jname} > ${JAILRCCONF}
. ${JAILRCCONF}
rm -f ${JAILRCCONF}

[ ${vnet} -eq 1 -a -z "${epair}" ] && err 1 "${MAGENTA}Error: Jail is ${GREEN}vnet${NORMAL}-feature enabled, but epair is not set.${NORMAL}"

eval multiips4=\"\$ip4_addr\"

[ $baserw -eq 1 ] && path=$data

freebsdhostversion=`${miscdir}/elf_tables --ver /usr/sbin/jail`
[ -z "${freebsdhostversion}" ] && freebsdhostversion="0"

#rewrite from cbsd zero to null
[ "${exec_start}" = "0" ] && unset exec_start
[ "${exec_stop}" = "0" ] && unset exec_stop
[ "${exec_poststart}" = "0" ] && unset exec_poststart
[ "${exec_poststop}" = "0" ] && unset exec_poststop
[ "${exec_prestart}" = "0" ]  && unset exec_prestart
[ "${exec_prestop}" = "0" ] && unset exec_prestop
[ "${interface}" = "0" ] && unset interface
[ -z "${fbsd}" ] && fbsd=0

if [ "${interface}" = "auto" ]; then
    geniplist ${ip4_addr}
    for pureip in ${IPS}; do
	iface=`cbsd getnics-by-ip ip=${pureip}`
	    ipwmask ${pureip}
	    if [ -n "$iface" ]; then
		${ECHO} "${MAGENTA}NIC automatically selected: ${GREEN}${iface}${NORMAL}"
		interface=${iface}
		break
	    else
		err 1 "${MAGENTA}Can't determine interfaces for: ${GREEN}${pureip}${NORMAL}"
	    fi
    done
fi

# ip6 work around: sleep for 3 seconds in prestart
[ "${ip6wa}" = "1" ] && exec_prestart="sleep 3; ${exec_prestart}"

# rename interface only for FreeBSD jail, not for Linux jail
[ "${vnet}" = "1" -a -n "${epair}" -a ${fbsd} -eq 1 ] && exec_start="/sbin/ifconfig ${epair} name eth0 up; ${exec_start}"

# attach and detach ZFS mount inside jail
if [ "${fbsd}" -eq 1 -a "${allow_zfs}" = "1" ]; then
	for _zfsfstab in "${jailfstabdir}/${jailfstabpref}${jname}" "${jailfstabdir}/${jailfstabpref}${jname}.local"; do
	    [ ! -f "${_zfsfstab}" ] && continue
	    if grep zfs "${_zfsfstab}" > /dev/null 2>&1; then
		exec_poststart="/usr/local/bin/cbsd attachzfs fstab=${_zfsfstab} jname=${jname}; ${exec_portstart}"
		exec_start="/sbin/zfs mount -a; ${exec_start}"
		exec_prestop="/usr/local/bin/cbsd detachzfs fstab=${_zfsfstab} jname=${jname}; ${exec_prestop}"
	    fi
	done
fi

cat > ${out} << EOF
${jname} {
exec.start = "${exec_start}";
exec.stop = "${exec_stop}";
exec.poststart="${exec_poststart}";
exec.poststop="${exec_poststop}";
exec.prestart="${exec_prestart}";
exec.prestop="${exec_prestop}";
exec.clean;
host.hostname = "${host_hostname}";
path = "${path}";
allow.raw_sockets;
allow.socket_af;
allow.chflags;
allow.sysvipc;
EOF

ALIAS4=""
ALIAS6=""
ips=`echo ${multiips4}|tr "," " "`

# autodetect correct interface
if [ -n "${interface}" ]; then
    if [ "${interface}" = "auto" ]; then
	if [ -n "${ip4_addr}" ]; then
	    ip=`echo ${ip4_addr}|awk '{printf $1}'`
	    interface=`cbsd getnics-by-ip ip=${ip}`
	else
	    interface=`cbsd getnics-by-ip ip=0.0.0.0`
	fi
    fi
    echo "interface=\"${interface}\";" >> $out
fi

if [ ${vnet} -eq 0 ]; then
# when vnet we not need ipX.addr
    for a in ${ips}; do
	iptype $a
	_inet=$?
	[ ${_inet} -eq 0 ] && continue

	ipwmask ${a}

	case ${_inet} in
	    1)
		if [ -z "$ALIAS4" ]; then
		    echo "ip4.addr = ${a};" >> ${out}
		    [ "${mkhostsfile}" != "0" ] && mkjhosts ${IWM} ${data}/etc/hosts
		    ALIAS4="1"
		else
		    [ "${mkhostsfile}" != "0" ] && mkjhosts ${IWM} ${data}/etc/hosts
		    echo "ip4.addr += ${a};" >> ${out}
		fi
		;;
	    2)
		if [ -z "$ALIAS6" ]; then
		    echo "ip6.addr = ${a};" >> ${out}
		    ALIAS6="1"
		else
		    echo "ip6.addr += ${a};" >> ${out}
		fi
		;;
	esac
    done
else
# vnet
cat >> ${out} <<EOF
vnet = new;
#vnet = inherit;
vnet.interface = ${epair};
EOF

fi



if [ "$devfs" = "NO" ]; then
    echo "mount.nodevfs;" >> ${out}
else
    echo "mount.devfs;" >> ${out}
fi

[ -n "${devfs_ruleset}" ] && echo "devfs_ruleset=\"${devfs_ruleset}\";" >> $out

if [ "${allow_mount}" = "1" ]; then
    echo "allow.mount = \"true\";" >> ${out}
    echo "enforce_statfs=\"1\";" >>${out}
fi

if [ "${allow_nullfs}" = "1" ]; then
    echo "allow.mount.nullfs = \"true\";" >> ${out}
fi

if [ "${allow_devfs}" = "1" ]; then
    echo "allow.mount.devfs = \"true\";" >> ${out}
fi

if [ -n "${exec_timeout}" ]; then
    echo "exec.timeout = \"${exec_timeout}\";" >> ${out}
fi

if [ -n "${exec_fib}" ]; then
    echo "exec.fib = \"${exec_fib}\";" >> ${out}
fi

if [ -n "${stop_timeout}" ]; then
    echo "stop.timeout = \"${exec_timeout}\";" >> ${out}
fi

# this features only available on FreeBSD 10.0 BETA3+
if [ $freebsdhostversion -gt 1000500 -a -n "${mount_fdescfs}" ]; then
    echo "mount.fdescfs = \"${mount_fdescfs}\";" >> ${out}
fi

if [ -n "${allow_dying}" ]; then
    echo "allow.dying = \"${allow_dying}\";" >> ${out}
fi

if [ -n "${allow_procfs}" ]; then
    echo "allow.mount.procfs= \"${allow_procfs}\";" >> ${out}
fi

# this feature only available on FreeBSD 10.0 BETA3+
if [ ${freebsdhostversion} -gt 1000500 -a -n "${allow_tmpfs}" ]; then
    echo "allow.mount.tmpfs= \"${allow_tmpfs}\";" >> ${out}
fi

if [ -n "${allow_zfs}" ]; then
    echo "allow.mount.zfs= \"${allow_zfs}\";" >> ${out}
fi

echo "}" >> ${out}
