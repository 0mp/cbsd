#!/bin/sh
#v10.0.0
globalconf="${workdir}/cbsd.conf"
CBSDMODULE="cpr"
MYARG="cdir pkglist destdir"
MYOPTARG="ver arch basename stable new repoversion ccache pause makeconf append"
MYDESC="Create pkg repository"
ADDHELP="ver=head for current.\n\
stable=1 for RELENG_X\n\
destdir= path to output packages or 'repo' for update repoversion\n\
cdir= temporary chroot directory\n\
pkglist= path to ascii file with port list for install or 'pkg_cutleaves' for dup master set\n\
new= 1 - new repo (remove cdir (default)) or 0 - continue\n\
repoversion= name of repo version (ports cfg version), default for system set\n\
ccache=1 or 0 - enable ccache (default is 0, disabled)\n\
distcc=0 or 1 - enable distcc (default is 0, disabled)\n\
makeconf= path to alternative cpr_make.conf to /etc/make.conf in chroot\n\
pause=1 - make pause (for example for chroot in env) before create pkg\n\
append=1 - do not check for destdir in not empty\n"
set -e

SRC="${srcdir}/src_${ver}/src"
TRAP=""

[ -f ${globalconf} ] || err 1 "no such conf file";
. ${globalconf}
. ${subr}
. ${inventory}
. ${system}
. ${distccacheconf}
. ${mailconf}
. ${tools}

init $*
. ${buildconf}

umount_temp_dirs()
{
    # when error before cdir, we do not have any mounts by scripts
    [ -z "${cdir}" -o ! -d "${cdir}" ] && return 0

    umount_cdirs ${cdir}

    #destroy md disk when he used
    if [ "${CCACHEFS}" = "mdfs" -a -n "${MDDEV}" ]; then
	echo -e "\033[40;35m Destroy md drive ${MDDEV}\033[0m"
	mdconfig -d -u ${MDDEV}
    fi
}

mount_temp_dirs()
{
    local _tmpfstab="${ftmpdir}/mount_temp_dirs.$$"
    set +e
    kldstat -qm linprocfs || kldload linprocfs
    set -e

    TRAP="${TRAP} rm -f ${_tmpfstab};"
    trap "${TRAP};" HUP INT ABRT BUS TERM EXIT

    cat > ${_tmpfstab} << EOF
devfs /dev devfs rw 0 0
procfs /proc procfs rw 0 0
$SRC/src /usr/src nullfs ro 0 0 
linprocfs /usr/compat/linux/proc linprocfs rw 0 0
EOF

    if [ -z "${repoversion}" -o "${repoversion}" = "default" ]; then
	PORTSCFG_SRC="/var/db/ports"
	MYPKGDIR="${PKGDIRROOT}/default"
    else
	PORTSCFG_SRC="${dbdir}/ports-${repoversion}"
	MYPKGDIR="${PKGDIRROOT}/${repoversion}"
    fi

    [ ! -d "${PORTSCFG_SRC}" ] && mkdir -p ${PORTSCFG_SRC}
    [ ! -d "${MYPKGDIR}" ] && mkdir -p ${MYPKGDIR}


    cat >> ${_tmpfstab} << EOF
${PORTSCFG_SRC} /var/db/ports nullfs rw 0 0
${MYPKGDIR} /tmp/packages nullfs rw 0 0
EOF
    
    if [ "$MOUNT_PORTS" = "1" -a "$MOUNT_DISTFILES" = "1" ]; then
	cat >> ${_tmpfstab} << EOF
/usr/ports /usr/ports nullfs rw 0 0
EOF
    else
	if [ "${MOUNT_PORTS}" = "0" -a "${MOUNT_DISTFILES}" = "1" ]; then
	cat >> ${_tmpfstab} << EOF
/usr/ports/distfiles nullfs /usr/ports/distfiles rw 0 0
EOF
	fi
    fi

    KERNDIR="${basejaildir}/kernel_GENERIC_${arch}_${ver}/boot/kernel"
    if [ -d "${KERNDIR}" ]; then
    cat >> ${_tmpfstab} << EOF
${KERNDIR} /boot/kernel nullfs ro 0 0
EOF
    fi

    cbsd mountfstab jroot=$cdir fstab=${_tmpfstab}
    rm -f ${_tmpfstab}
}


prepare_chroot()
{
    echo -e "\033[40;35m Building packages...  \033[0m"

NEEDEDPORTS="\
/usr/ports/ports-mgmt/portmaster \
/usr/ports/ports-mgmt/dialog4ports
"

    [ "$ccache" = "1" ] && NEEDEDPORTS="${NEEDEDPORTS} /usr/ports/devel/ccache"
    [ "$distcc" = "1" ] && NEEDEDPORTS="/usr/ports/devel/distcc ${NEEDEDPORTS}"
    export NEEDEDPORTS

    [ -f "${makeconf}" ] && cp ${makeconf} ${cdir}/etc/make.conf

    # make sure we have work dir in /tmp for parallel builds
    [ `grep ^WRKDIRPREFIX= ${cdir}/etc/make.conf|wc -l` = 0 ] && echo WRKDIRPREFIX=/tmp >> ${cdir}/etc/make.conf
    cp /etc/resolv.conf ${cdir}/etc

    chroot $cdir /bin/sh << EOF
service ldconfig start
#env ASSUME_ALWAYS_YES=yes pkg > /dev/null 2>&1
make -C /usr/ports/ports-mgmt/pkg clean install
# remove default pkg.conf
[ -f "/usr/local/etc/pkg.conf" ] && rm -f /usr/local/etc/pkg.conf
find /tmp/usr/ports -type d -name work -exec rm -rf {} \; > /dev/null 2>&1
for i in \${NEEDEDPORTS}; do
    if [ -f /tmp/buildcontinue ]; then
	cd /tmp/packages
	PORTNAME=\`make -C \$i -V PKGNAME\`
        pkg info -e \$PORTNAME >/dev/null 2>&1 || {
    	    [ -f \${PORTNAME}.txz ] && env ASSUME_ALWAYS_YES=yes pkg add ./\${PORTNAME}.txz && echo -e "\033[40;35m\${PORTNAME} found and added from cache. \033[0m"
	}
	pkg info -e \$PORTNAME || {
	    make -C \$i clean
	    make -C \$i
	    make -C \$i install
	    }
    else
	echo "Installing \$i "
	make -C \$i install clean
    fi
done
EOF
}


copy_ccachedir_to_chroot()
{
    echo "Moving cache from storage ${ccache_realdir}..."
    set +o errexit
    [ ! -d "${cdir}/root/.ccache" ] && mkdir -p ${cdir}/root/.ccache
    cp -a ${ccache_realdir}/* ${cdir}/root/.ccache/
    set -o errexit
}

copy_ccachedir_from_chroot()
{
    set +o errexit
    [ -d "${ccache_realdir}" ] && rm -rf $ccache_realdir
    echo "Moving cache to storage"
    mv ${cdir}/root/.ccache ${ccache_realdir}
    set -o errexit
}



### MAIN
. ${etcdir}/cpr.conf

if [ -d "${destdir}" ]; then
    [ "${append}" = "1" ] && break
    A=`ls -C1 ${destdir}/`
    [ -n "${A}" ] && err 1 "Warning: ${destdir}/ is not empty. Please clean before cpr initialization: ${A}"
else
    mkdir -p "${destdir}"
fi

SRC="${srcdir}/src_${ver}"
[ -d "${SRC}" ] || err 1 "No such version at ${SRC}"

if [ -z "${basename}" ]; then
    DST="${basejaildir}/${basejailpref}_${arch}_${ver}"
else
    DST="${basejaildir}/${basejailpref}_${basename}_${arch}_${ver}"
fi

if [ `uname -m` = "i386" -a "${arch}" = "amd64" ]; then
    err 1 "Cannot install amd64 base on i386 hosts"
fi

if [ "$new" = "0" ]; then
    new=0
else
    new=1
fi

[ -z "${makeconf}" ] && makeconf="${sharedir}/cpr_make.conf"

[ ! -f "${pkglist}" -a "${pkglist}" != "pkg_cutleaves" ] && err 1 "No pkglist file"

if [ "${pkglist}" = "pkg_cutleaves" ]; then
    _tmppkglist="${ftmpdir}/tmppkglist.txt.$$"
    cbsd pkg_cutleaves out=${_tmppkglist}
    pkglist=${_tmppkglist}
else
    _tmppkglist=""
fi

[ -d "${cdir}" ] && umount_cdirs ${cdir} || true
[ -d "${cdir}" -a $new -eq 1 ] && chflags -R noschg ${cdir} && rm -rf ${cdir}
[ ! -d "${cdir}" -a $new -eq 0 ] && new=1
[ ! -d "${cdir}" ] && mkdir ${cdir}
[ $new -eq 1 ] && baserw=1 && populate_cdir $DST ${cdir} ||true
[ $new -eq 0 ] && touch ${cdir}/tmp/buildcontinue

export cdir=${cdir}

if [ "${pause}" = "1" ]; then
    export pause=1
else
    export pause=0
fi

[ ! -d "${PORTSCFG_SRC}" ] && mkdir -p $PORTSCFG_SRC

#defaults
if [ "${ccache}" = "1" ]; then
    ccache=1
else
    ccache=0
fi

if [ "${distcc}" = "1" ]; then
    distcc=1
else
    distcc=0
fi

TRAP="${TRAP} umount_cdirs ${cdir}; rm -f ${LOCKFILE} ${_tmppkglist};"
trap "${TRAP}" HUP INT ABRT BUS TERM EXIT
mount_temp_dirs

[ "${MOUNT_PORTS}" = "0" -a $new -eq 1 ] && chroot ${cdir} portsnap fetch extract

prepare_chroot

if [ $ccache -eq 1 -o $distcc -eq 1 ]; then
    prepare_make_conf ${makeconf} ${cdir}/etc/make.conf
fi

DT_START=`date +%s`
send_notification -s "[CBSD ${nodename}] cpr ${ver} ${arch} ${repoversion} started" -b "${DT_START}"
cp ${sharedir}/cpr_packages.sh ${cdir}/tmp/cpr_packages.sh

grep -v "^#" ${pkglist} > ${cdir}/tmp/ports_list.txt

if [ $ccache -eq 1 ]; then
    ccache_prefix="cbsd cpr $ver $arch $basename"
    ccache_dir="/var/cache/ccache"

    if ! init_ccache_dir; then
	ccache=0
    else
	copy_ccachedir_to_chroot
    fi
fi

set -o errexit
chroot $cdir sh /tmp/cpr_packages.sh

TRAP="${TRAP} umount_cdirs ${cdir}; rm -f ${LOCKFILE} ${_tmppkglist};"
trap "${TRAP}" HUP INT ABRT BUS TERM  EXIT

DT_END=`date +%s`
DT_DIFF=$((DT_END - DT_START))

[ $ccache -eq 1 ] && copy_ccachedir_from_chroot
# test for port_log from portmater and send broken build log to email
set +o errexit
 A=`ls ${cdir}/tmp/port_log* 2>/dev/null`

 if [ -n "${A}" ]; then
    if [ -n "${CBSDRCPT}" ]; then
	send_notification -s "[CBSD ${nodename}] cpr ${ver} ${arch} ${repoversion} failed. See message below and next message for datail" -f ${cdir}/tmp/build.log
        sleep 5 # delay for correct message order ;)
	send_notification -s "[CBSD ${nodename}] cpr ${ver} ${arch} ${repoversion} broken build log" -f ${A} 
 fi
    cat ${A}
    err 1 "Build packages.sh error"   
 fi
set -o errexit

if [ "${destdir}" = "repo" ]; then
    find ${cdir}/packages/All -type f -name \*.txz -exec mv -f {} ${MYPKGDIR}/ \;
    ROOTPKGDIR="${MYPKGDIR}"
else
    find ${cdir}/packages/All -type f -name \*.txz -exec cp -n {} ${MYPKGDIR}/ \;
    ROOTPKGDIR="${destdir}"
    mkdir -p ${ROOTPKGDIR}
    mv ${cdir}/packages/* ${ROOTPKGDIR}/
fi


    # create pkg in symlinked /Latest location (see pkg-repository(5))
    cd ${ROOTPKGDIR}
    ln -s ./All ./Latest
    cd ${ROOTPKGDIR}/All
    find ./ -type f -name pkg-[0-9]* -exec ln -s {} ./pkg.txz \;

    send_notification -s "[CBSD ${nodename}] cpr ${ver} ${arch} ${repoversion} complete" -b "${DT_END}"
