#!/bin/sh
#v9.2.2
MYDESC="console dialog for jail creation"
globalconf="${workdir}/cbsd.conf";
MYARG=""
MYOPTARG=""

[ -f ${globalconf} ] || err 1 "no such conf file";
. ${globalconf}
. ${subr}
. ${inventory}
. ${settingstui}
. ${color}
init $*

# $jname
get_jname()
{
    freejname
    local DEFAULT _input

    DEFAULT="${freejname}"
    _input=""
    while [ x${_input} = x ]; do
	$ECHO "${BOLD}${GET_JNAME_MSG} e.g: ${GREEN}${DEFAULT}${NORMAL}"
	read _input
	[ -z "${_input}" ] && _input="${DEFAULT}"
	if validate_jname ${_input}; then
	    _input=""
	fi
    done
    export jname=${_input}
}

# $fqdn
get_jail_fqdn()
{
    local DEFAULT _input

    DEFAULT="${jname}.my.domain"

    while [ x${_input} = x ]; do
	${ECHO} "${BOLD}${GET_FQDN_MSG} e.g: ${GREEN}${DEFAULT}${NORMAL}"
	read _input
	[ -z "${_input}" ] && _input="${DEFAULT}"
    done
    export fqdn=${_input}
}



# $ips
get_jail_ips()
{
    local _input

    while [ x${_input} = x ]; do
	${ECHO} "${BOLD}${GET_IPS_MSG}${NORMAL}"
	read _input
    done
    export ip4_addr=$_input
}

# $oninterface
get_jail_oninterface()
{
    local DEFAULT _input

    if [ -z "${interface}" -o "${interface}" = "auto" ]; then
	if [ -n "${ip4_addr}" ]; then
	    DEFAULT=`cbsd getnics-by-ip ip=${ip4_addr}`
	else
	    DEFAULT=`cbsd getnics-by-ip ip=0.0.0.0`
	fi
    fi

    while [ x${_input} = x ]; do
	$ECHO "${BOLD}${GET_ONINTERFACE_MSG} e.g: ${GREEN}${DEFAULT}${NORMAL}"
	read _input
	[ -z "${_input}" ] && _input="${DEFAULT}"
    done

    export interface=${_input}
}

# $base
get_jail_base()
{
    local _input DEFAULT

    DEFAULT="${ver}"

    while [ x${_input} = x ]; do
	${ECHO} "${BOLD}${GET_BASE_MSG} e.g: ${GREEN}${DEFAULT}${NORMAL}"
	read _input
	[ -z "${_input}" ] && _input="${DEFAULT}"
    done

    export ver=${_input}
}

# $base
get_jail_arch()
{
    local DEFAULT _input

    DEFAULT="${arch}"

    while [ x${_input} = x ]; do
	${ECHO} "${BOLD}${GET_ARCH_MSG} e.g: ${GREEN}${arch}${NORMAL}"
	read _input
	[ -z "${_input}" ] && _input="${DEFAULT}"
    done

    export arch=${_input}
}


# $baserw
get_jail_baserw()
{
    local DEFAULT _input

    DEFAULT="0"

    while [ x${_input} = x ]; do
	$ECHO "${BOLD}${GET_BASERW_MSG} ( 0 - nullfs base mount in RO, 1 - no nullfs, RW ) e.g: ${GREEN}${DEFAULT}${NORMAL}"
	read _input
	[ -z "${_input}" ] && _input="${DEFAULT}"
    done

    export baserw=${_input}
}

# $mount_src
get_jail_mount_src()
{
    local DEFAULT _input

    DEFAULT="0"

    while [ x${_input} = x ]; do
	${ECHO} "${BOLD}${GET_SRCMOUNT_MSG} (0 - no, 1 - yes): e.g: ${GREEN}${DEFAULT}${NORMAL}"
	read _input
	[ -z "${_input}" ] && _input="${DEFAULT}"
    done

    export mount_src=${_input}
}

# $mount_obj
get_jail_mount_obj()
{
    local DEFAULT _input

    DEFAULT="0"

    while [ x${_input} = x ]; do
	${ECHO} "${BOLD}${GET_OBJMOUNT_MSG} ( 0 - no, 1 - yes) e.g: ${GREEN}${DEFAULT}${NORMAL}"
	read _input
	[ -z "${_input}" ] && _input="${DEFAULT}"
    done

    export mount_obj=${_input}
}

# $mount_ports
get_jail_mount_ports()
{
    local DEFAULT _input

    DEFAULT="1"

    while [ x${_input} = x ]; do
	${ECHO} "${BOLD}${GET_PORTSMOUNT_MSG} ( 0 - no, 1 - yes) e.g: ${GREEN}${DEFAULT}${NORMAL}"
	read _input
	[ -z "${_input}" ] && _input="${DEFAULT}"
    done

    export mount_ports=${_input}
}


# $applytpl
get_jail_applytpl()
{
    local DEFAULT _input

    DEFAULT="1"

    while [ x${_input} = x ]; do
	${ECHO} "${BOLD}${GET_APPLYTPL_MSG} ( 0 - no, 1 - yes) e.g: ${GREEN}${DEFAULT}${NORMAL}"
	read _input
	[ -z "${_input}" ] && _input="${DEFAULT}"
    done

    export applytpl=${_input}
}

# $applytpl
get_jail_floatresolv()
{
    local DEFAULT _input

    DEFAULT="1"

    while [ x${_input} = x ]; do
	${ECHO} "${BOLD}${GET_FLOATRESOLV_MSG} ( 0 - no, 1 - yes) e.g: ${GREEN}${DEFAULT}${NORMAL}"
	read _input
	[ -z "${_input}" ] && _input="${DEFAULT}"
    done

    export floatresolv=${_input}
}





# $astart
get_jail_astart()
{
    local DEFAULT _input

    DEFAULT="1"

    while [ x${_input} = x ]; do
	${ECHO} "${BOLD}${GET_ASTART_MSG} ( 0 - no, 1 -yes) e.g: ${GREEN}${DEFAULT}${NORMAL} "
	read _input
	[ -z "${_input}" ] && _input="${DEFAULT}"
    done

    export astart=${_input}
}



gen_newjail_conf()
{

    local _i _required _mytest _ret

    pkglist=""
    vnet="0"
    mdsize="0"

    _required="jname fqdn ip4_addr ver arch"

#check for ip if oninterface
    if [ "${interface}" != "0" ]; then
	_ok=0
	while [ ${_ok} -eq 0 ]; do
	    _ret=`cbsd checkip ip=${ip4_addr} check=1`
	    case $? in
		0 | 2)
		    ${ECHO} "${BOLD}It seems like ${ip4_addr} address already used on several devices on the LAN\nYou can found MAC address by \"arp -an\" command.\n If you believe that it's ok, type 'y' to continue or 'n' for another IP address${NORMAL}"
		    _input=""
		    while [ x${_input} = x ]; do
			read _input
			    case "${_input}" in
				"n")
				    get_jail_ips
				    ;;
				"y")
				    _ok=1
				    ;;
			    esac
		    done
		    ;;
		*)
		    _ok=1
		    ;;
	    esac
	done
    fi

    cbsd jconstruct-fromargs basename=$basename mdsize=$mdsize jname=$jname fqdn=$fqdn ip4_addr=$ip4_addr ver=$ver baserw=$baserw mount_src=$mount_src mount_ports=$mount_ports astart=$astart interface=$interface vnet=$vnet applytpl=$applytpl floatresolv=$floatresolv arch=$arch pkglist=$pkglist
    [ $? -eq 0 ] || err 1 "${MAGENTA}Bad conf${NORMAL}"
}

more << EOF_HEADER
---------[${product} v.${myversion}]---------
Welcome to jcreate config constructor script.

For DIALOG-based menu please use jconstruct-tui utility
-----------------------
EOF_HEADER

agreed=
while [ x$agreed = x ]; do
        ${ECHO} "${BOLD}Proceed to construct? ${GREEN}[yes or no]${NORMAL}"
        read reply leftover
        case $reply in
                y* | Y*)
                        agreed=1
                        ;;
                n* | n*)
                        echo
                        exit 1
                        ;;
        esac
done

#defaults
. ${buildconf}

get_jname &&  \
get_jail_fqdn && \
get_jail_ips && \
get_jail_base && \
get_jail_arch && \
get_jail_baserw && \
get_jail_mount_src && \
get_jail_mount_obj && \
get_jail_mount_ports && \
get_jail_astart && \
get_jail_oninterface && \
get_jail_applytpl && \
get_jail_floatresolv && \
gen_newjail_conf
