#!/bin/sh
#v9.2.0
globalconf="${workdir}/cbsd.conf";
MYARG="action sources"
MYOPTARG="arch ver name basename stable"
MYDESC="Working with CBSD Repository for upload"
ADDHELP="action can be: upload, prepare\n
sources can be: src, obj, base, kernel, img\n\
stable=1 for base_arch_X instead of base_arch_X_Y\n"


[ -f ${globalconf} ] || err 1 "no such conf file";
. ${globalconf}
. ${subr}
init $*

do_src()
{
SRCDIR="${srcdir}/src_${ver}"
[  -d ${SRCDIR} ] || err 1 "No such version at ${SRCDIR}"
DSTDIR="${tmpdir}/src_${ver}"
[ -d "${DSTDIR}" ] && rm -rf ${DSTDIR}

mkdir -p ${DSTDIR}
cd ${srcdir}
LOCKFILE=${ftmpdir}/src.txz.lock
makelock ${LOCKFILE}
tar cfJ src.txz src_${ver}
DT=`/bin/date "+%Y%m%d"`
md5 -q src.txz > src.txz.md5
mv src.txz ${DSTDIR}
mv src.txz.md5 ${DSTDIR}
echo ${DT} > ${DSTDIR}/cbsd.index
}

do_obj()
{
if [ -z "${basename}" ]; then
    OBJDIR="obj_${arch}_${ver}"
else
    OBJDIR="obj_${basename}_${arch}_${ver}"
fi

SRCDIR="${srcdir}/${OBJDIR}"
[  -d ${SRCDIR} ] || err 1 "No such version at ${SRCDIR}"
TDIR="${tmpdir}/mkobj.$$"
DSTDIR="${tmpdir}/${OBJDIR}"
[ ! -d "${TDIR}" ] || rm -rf ${TDIR}
[ ! -d "${DSTDIR}" ] || rm -rf ${DSTDIR}
mkdir -p ${TDIR} ${DSTDIR}
trap "rm -rf ${TDIR}" 0 1 2
cd ${srcdir}
tar cfJ ${OBJDIR}.txz ${OBJDIR}
DT=`/bin/date "+%Y%m%d"`
md5 -q ${OBJDIR}.txz > ${OBJDIR}.txz.md5
mv ${OBJDIR}.txz ${DSTDIR}
mv ${OBJDIR}.txz.md5 ${DSTDIR}
echo ${DT} > ${DSTDIR}/cbsd.index
echo ${DSTDIR}
}


do_base()
{
if [ -z "${basename}" ]; then
    BDIR="${basejailpref}_${arch}_${ver}"
else
    BDIR="${basejailpref}_${basename}_${arch}_${ver}"
fi

BASEDIR="${basejaildir}/${BDIR}"
[  -d ${BASEDIR} ] || err 1 "No such version at ${BASEDIR}"
DSTDIR="${tmpdir}/${BDIR}"
[ ! -d "${DSTDIR}" ] || rm -rf ${DSTDIR}
mkdir -p ${DSTDIR}
cd ${basejaildir}
tar cfJ ${BDIR}.txz ${BDIR}
mv ${BDIR}.txz ${DSTDIR}
cd ${DSTDIR}
DT=`/bin/date "+%Y%m%d"`
md5 -q ${BDIR}.txz > ${BDIR}.txz.md5
echo ${DT} > ${DSTDIR}/cbsd.index
echo ${DSTDIR}
}

do_kernel()
{
[ -z "${name}" ] && name="GENERIC"

BDIR="kernel_${name}_${arch}_${ver}"
KDIR="${basejaildir}/${BDIR}"

[  -d ${KDIR} ] || err 1 "No such version at ${KDIR}"

DSTDIR="${tmpdir}/${BDIR}"
[ ! -d "${DSTDIR}" ] || rm -rf ${DSTDIR}
mkdir -p ${DSTDIR}
cd ${basejaildir}
tar cfJ ${BDIR}.txz ${BDIR}
mv ${BDIR}.txz ${DSTDIR}
cd ${DSTDIR}
DT=`/bin/date "+%Y%m%d"`
md5 -q ${BDIR}.txz > ${BDIR}.txz.md5
echo ${DT} > ${DSTDIR}/cbsd.index
echo ${DSTDIR}
}


do_img()
{
BDIR="${exportdir}/${name}.img"
#[ ! -f "${BDIR}" ] || err 0 "Image ready for upload"
echo "Exporting to image"
cbsd jexport jname=${name} name=${name}.img
}


do_upload()
{
### UPLOAD ###
RFLAGS="--delete -avz --partial --progress --password-file=/root/bin/cbsd_rsync.secrets"

#REPO=`cbsd getinfo -q repo`
case ${sources} in
"src")
TFOLDER="src_${ver}"
SFOLDER="${tmpdir}/${TFOLDER}"
;;
"obj")
if [ -z "${basename}" ]; then
    TFOLDER="obj_${arch}_${ver}"
else
    TFOLDER="obj_${basename}_${arch}_${ver}"
fi
SFOLDER="${tmpdir}/${TFOLDER}"
;;
"base")
if [ -z "${basename}" ]; then
    TFOLDER="base_${arch}_${ver}"
else
    TFOLDER="base_${basename}_${arch}_${ver}"
fi
SFOLDER="${tmpdir}/${TFOLDER}"
;;
"kernel")
[ -z "${name}" ] && name="GENERIC"
TFOLDER="kernel_${name}_${arch}_${ver}"
SFOLDER="${tmpdir}/${TFOLDER}"
;;
"img")
TFOLDER="img_${arch}_${ver}_${name}"
SFOLDER="${exportdir}/${name}.img"
;;
esac


if [ -d "${SFOLDER}" ]; then
    /usr/local/bin/rsync ${RFLAGS} ${SFOLDER}/ rsync://cbsd@jb1.olevole.ru/${TFOLDER}/
    return
fi

err 1 "No such source ${SFOLDER} here"
exit
}

### MAIN ###
UPLOAD=0
PREPARE=0
[ "${action}" = "upload" ] && UPLOAD=1
[ "${action}" = "prepare" ] && PREPARE=1
[ -n "${sources}" ] || err 1 "Sources required"
[ $UPLOAD -eq 1 -o $PREPARE -eq 1 ] || err 1 "Set action to upload or prepare"
. ${inventory}
. ${buildconf}

SRCDIR="${srcdir}/src_${ver}"
#CHUNKLIST="xaa xab xac xad xae xaf xag xah xai xaj"

[ $UPLOAD -eq 1 ] && {
do_upload
exit
}


case "${sources}" in
"src")
    do_src
;;
"obj")
    do_obj
;;
"base")
    do_base
;;
"kernel")
    do_kernel
;;

"img")
    [ -z "$name" ] && err 1 "Give me name"
    ST=`cbsd jstatus jname=${name}`
    [ $? -eq 0 ] && err 1 "Jail not exist"
    [ $ST -gt 0 ] && err 1 "Jail must be offline. Please stop them"
    do_img
;;
esac
