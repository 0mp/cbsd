#!/bin/sh
#v10.0.0
globalconf="${workdir}/cbsd.conf";
MYARG="jname destdir media"
MYOPTARG="name label product publisher prunelist"
MYDESC="Convert jail into cd9660 ISO or memstick image"
ADDHELP="destdir= destination dir for storing jname.iso\n\
name - for alternative kernel name (GENERIC is default)\n\
label - label for media\n\
media - iso or memstick\n\
prunelist= path to prunelist, default is ${sharedir}/jail2iso-prunelist\n"

[ -f "${globalconf}" ] || err 1 "no such conf file";
. ${globalconf}
. ${subr}
. ${inventory}
. ${system}
. ${zfstool}
. ${color}
. ${strings}
init $*

. ${buildconf}

. ${jrcconf}
[ $? -eq 1 ] && err 1 "${MAGENTA}No such jail: ${GREEN}${jname}${NORMAL}"

#must be upper registry? :
LABEL="CBSD"
PRODUCT="cbsd jail2iso"
PUBLISHER="The CBSD Project. http://www.bsdstore.ru"

[ -z "${name}" ] && name="GENERIC"
[ -n "${label}" ] && LABEL="${label}"
[ -n "${product}" ] && PRODUCT="${product}"
[ -n "${publisher}" ] && PUBLISHER="${publisher}"

SRCKERNEL="${basejaildir}/kernel_${name}_${arch}_${ver}"
TMPDIR="${tmpdir}/$jname-iso"
DSTDIR="${tmpdir}/tmpmfsroot"

[ -d "${TMPDIR}" ] && chflags -R noschg ${TMPDIR} && rm -rf ${TMPDIR}
[ $baserw -eq 1 ] && path=$data

make_mtree()
{
    [ -f ${BASEROOT}/etc/mtree/BSD.root.dist ] && mtree -deU -f ${BASEROOT}/etc/mtree/BSD.root.dist -p ${DSTDIR} >/dev/null
    [ -f ${BASEROOT}/etc/mtree/BSD.usr.dist ] && mtree -deU -f ${BASEROOT}/etc/mtree/BSD.usr.dist -p ${DSTDIR}/usr >/dev/null
    [ -f ${BASEROOT}/etc/mtree/BSD.var.dist ] && mtree -deU -f ${BASEROOT}/etc/mtree/BSD.var.dist -p ${DSTDIR}/var >/dev/null
    [ -f ${BASEROOT}/etc/mtree/BIND.chroot.dist ] && mtree -deU -f ${BASEROOT}/etc/mtree/BIND.chroot.dist -p ${DSTDIR}/var/named >/dev/null
    [ -f ${BASEROOT}/etc/mtree/BSD.sendmail.dist ] && mtree -deU -f ${BASEROOT}/etc/mtree/BSD.sendmail.dist -p ${DSTDIR} >/dev/null
}

make_libmap()
{
    A=`mktemp /tmp/libtxt.XXX`
    B=`mktemp /tmp/libtxtsort.XXX`
    trap "rm -f ${A} ${B}" 0 1 2 3 4 5

    cat ${FILES} |while read line; do
	[ -z "${line}" -o `echo ${line} |grep -n ^#` ] && continue
	ldd -f "%p\n" ${BASEROOT}${line} >> $A 2>/dev/null
    done

    sort -u ${A} > ${B}
}

copy_binlib()
{
    cat ${FILES}| while read line; do
	[ -z "${line}" -o `echo ${line} |grep -n ^#` ] && continue
	D=`chroot ${BASEROOT} dirname ${line}`
	rsync -av ${BASEROOT}${line} ${DSTDIR}${D}
	A=`readlink ${BASEROOT}${line}`
	if [ -n "${A}" -a -f "${D}/${A}" ]; then
	    echo "SYM: $A"
	    rsync -av -${D}${A} ${DSTDIR}${D}
	fi
    done

    cat ${B}| while read line; do
	[ -z "${line}" ] && continue
	D=`chroot ${BASEROOT} dirname ${line}`
	rsync -avzx ${BASEROOT}${line} ${DSTDIR}${D}
    done
}

prepare_dir()
{
    cp -rP ${path}/etc ${DSTDIR}/

    case "${media}" in
    "iso")
	ROOTFS="/dev/iso9660/${LABEL} /mnt cd9660 ro 0 0"
	;;
    "memstick")
	ROOTFS="/dev/ufs/${LABEL} /mnt ufs ro,noatime 1 1"
	;;
    esac

    cat > ${DSTDIR}/etc/fstab << EOF
tmpfs /tmp tmpfs rw 0 0
$ROOTFS
/mnt/boot/kernel /boot/kernel nullfs ro 0 0
/mnt/usr /usr nullfs ro 0 0
tmpfs /usr/local tmpfs rw 0 0
EOF

    cp ${path}/etc/rc.conf ${DSTDIR}/etc/rc.conf

    if [ -f "$jailsysdir/${jname}/tmpfsdir" ]; then
	cp ${workdir}/misc/tmpfsdir ${DSTDIR}/etc/rc.d/
    fi
}

prunelist()
{

    [ ! -f "${prunelist}" ] && return 0 # no prune
    [ -z "${1}" ] && return 0 # sanity

    echo "Prune file by list ${prunelist}"

    for FILE in `cat ${prunelist}`; do
	if [ -n "${FILE}" ]; then
	    rm -rf ${1}/${FILE} 2>/dev/null
	fi
    done
}


makemfsroot()
{
    dd if=/dev/zero of=/tmp/mfsroot count=40000 bs=1k

    DEV=`mdconfig -a -t vnode -f /tmp/mfsroot`
    bsdlabel -w /dev/${DEV} auto
    newfs -n -i ${BS} -m 0 -o space /dev/${DEV}
    mkdir -p ${DSTDIR}
    mount /dev/${DEV} ${DSTDIR}
    make_mtree
    make_libmap
    copy_binlib
    prepare_dir
    prunelist ${DSTDIR}
    cd /
    umount -f ${DSTDIR}
    chflags -R noschg ${DSTDIR} && rm -rf ${DSTDIR}
    mdconfig -d -u ${DEV}
    gzip /tmp/mfsroot
}


# MAIN
[ -z "${prunelist}" ] && prunelist="${sharedir}/jail2iso-prunelist"

[ ! -d "${SRCKERNEL}" ] && err 1 "No such ${SRCKERNEL}"
[ "$media" = "iso" -o "$media" = "memstick" ] || err 1 "Unknown media type. Must be iso or memstick"
mountbase
[ "${ver}" != "empty" ] && cbsd mountfstab jroot=${path} fstab=${mount_fstab} > /dev/null 2>&1
BASEROOT="${basejaildir}/${basejailpref}_${arch}_${ver}"
[ ! -d "${BASEROOT}" ] && err 1 "No such ${BASEROOT}"
FILES="${sharedir}/defbase9.txt"
BS=8192

makemfsroot

cp -a ${path} ${TMPDIR}
rm -rf ${TMPDIR}/rescue
prunelist ${TMPDIR}

cp -a ${SRCKERNEL}/boot/kernel ${TMPDIR}/boot
rm -f ${TMPDIR}/boot/kernel/*.symbols
cd ${TMPDIR}/boot/kernel && gzip -9 *

cat > ${TMPDIR}/boot/loader.conf << EOF
geom_uzip_load="YES"
i915kms_load="YES"
tmpfs_load="YES"
nullfs_load="YES"
mfs_load="YES"
mfs_type="mfs_root"
mfs_name="/mfsroot"
vfs.root.mountfrom="ufs:/dev/md0"
#zfs_load="YES"
#loader_logo="beastie"
#ipfw_load="YES"
#net.inet.ip.fw.default_to_accept=1
#vfs.zfs.prefetch_disable=1
EOF

case "${media}" in
"iso")
    ROOTFS="/dev/iso9660/${LABEL} /mnt cd9660 ro 0 0"
    ;;
"memstick")
    ROOTFS="/dev/ufs/${LABEL} /mnt ufs ro,noatime 1 1"
    ;;
esac

cat > ${TMPDIR}/etc/fstab << EOF
tmpfs /tmp tmpfs rw 0 0
${ROOTFS}
/mnt/usr /usr nullfs ro 0 0
/mnt/boot/kernel /boot/kernel nullfs ro 0 0
EOF

echo "Welcome to ${PRODUCT}" > ${TMPDIR}/etc/motd

mv /tmp/mfsroot.gz ${TMPDIR}

if [ -f "$jailsysdir/${jname}/tmpfsdir" ]; then
    cp ${jailsysdir}/${jname}/tmpfsdir ${TMPDIR}/etc/
fi

case "${media}" in
"iso")
    /usr/local/cbsd/release/mkisoimages.sh ${LABEL} ${destdir}/${jname}-${ver}_${arch}.iso ${TMPDIR}
    ;;
"memstick")
    makefs -B little -o label=${LABEL} ${destdir}/${jname}-${ver}_${arch}.img ${TMPDIR}

    [ $? -ne 0 ] && err 1 "makefs failed"

    unit=`mdconfig -a -t vnode -f ${destdir}/${jname}-${ver}_${arch}.img`
    [ $? -ne 0 ] && err 1 "mdconfig failed"
    gpart create -s BSD ${unit}
    gpart bootcode -b ${TMPDIR}/boot/boot ${unit}
    gpart add -t freebsd-ufs ${unit}
    mdconfig -d -u ${unit}
    ;;
esac

[ "${ver}" != "empty" ] && cbsd unmountfstab jroot=${path} fstab=${mount_fstab} > /dev/null 2>&1
unmountbase
