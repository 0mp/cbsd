#!/usr/local/bin/cbsd
#v10.0.5
MYARG=""
MYOPTARG="mode"
MYDESC="Ncurses based jail creation wizard"
EXTHELP="wf_jcreate.html"
ADDHELP="mode=full for all atributes\n"

. ${subr}
. ${inventory}
. ${settingstui}
. ${tools}
. ${color}
. ${dialog}

init $*

gen_newjail_conf()
{

    local _i _required _mytest _ret

    _required="jname host_hostname ip4_addr ver arch"

    msg_ok="ok"

    for _i in ${_required}; do
	eval _mytest=\$$_i
	if [ -z "${_mytest}" ]; then
	    f_dialog_msgbox "${_i} must be not non-empty" "Error"
	    return 0
	fi
    done

    vnet=${vimage}
    gen_jconf
    ERR=$?

    [ $ERR -eq 0 ] || err 1 "${MAGENTA}Bad conf${NORMAL}"
    err 0 ${A}
}


#### [ MAIN AREA ] ####
[ ! -f ${localcbsdconf} ] && err 1 "${MAGENTA}no such conf file${NORMAL}"
. ${localcbsdconf}
. ${inventory}

zero_profile="jail-freebsd-default.conf"
#defaults
. ${buildconf}

readconf ${zero_profile}
# re-read profile for init global_profile_file variable
get_jail_profile ${default_profile}
[ -z "${profile}" -a -n "${jail_profile}" ] && profile="${jail_profile}"

msg_ok="Ok"
msg_cancel="Cancel"

boo=0

while [ 1 ]; do
    pkgnum=0
    [ -n "${pkglist}" -a "${pkglist}" != "NO" ] && pkgnum=$( wc -l ${pkglist}|awk '{printf $1}' )

    menu_list="
    'jail_profile' 'Select profile for jcreate $(curval profile)'
    'pkglist' 'mark pkg for install from repo $(curval pkgnum)'
    'jname' 'A short jail name $(curval jname)'
    'host_hostname'  'Full (FQDN) jail hostname $(curval host_hostname)'
    'ip4_addr' 'Assing IP address $(curval ip4_addr)'
    'ver' 'choose code base version $(curval ver)'
    'baserw'  'Jail base is not read-only $(curval baserw)'
    'mount_ports' 'Mount for /usr/ports $(curval mount_ports)'
    'astart'  'Autostart with system $(curval astart)'
    'interface' 'Interface selection and aliasing mode $(curval interface)'
    'applytpl'  'Apply cbsd templates $(curval applytpl)'
    'floatresolv' 'Auto correct for jail resolv.conf $(curval floatresolv)'
    'arch' 'target arch $(curval arch)'"

    #dynamic menu
    [ "${vnet}" = 1 ] && menu_list="${menu_list} 'vnet' 'Enable virtual stack for jail? $(curval vimage)'"

    #'mdsize' 'image for md or bhyve $(curval mdsize)'
    if [ "${mode}" = "full" ]; then
        menu_list="${menu_list} 'path' 'Path to jail mountpoint $(curval path)'"
#        menu_list="${menu_list} 'mount_fstab' 'fstab file for local mount $(curval mount_fstab)'"
        menu_list="${menu_list} 'basename' 'alternative base name $(curval basename)'"
        menu_list="${menu_list} 'data' 'alternative path to data directory $(curval data)'"
    fi

    menu_list="${menu_list} 'GO' 'PROCEED!'"

    f_dialog_menu
    retval=$?

    f_dialog_menutag_fetch mtag
    case $retval in
	0)
	    [ $mtag = "jail_profile" ] && get_jail_profile
	    [ $mtag = "pkglist" ] && get_pkglist
	    [ $mtag = "jname" ] && get_jname
	    [ $mtag = "host_hostname" ] && get_jail_host_hostname
	    [ $mtag = "ip4_addr" ] && get_jail_ips
	    [ $mtag = "ver" ] && get_jail_base
	    [ $mtag = "baserw" ] && get_jail_baserw
	    [ $mtag = "mount_src" ] && get_jail_mount_src
	    [ $mtag = "mount_ports" ] && get_jail_mount_ports
	    [ $mtag = "astart" ] && get_jail_astart
	    [ $mtag = "interface" ] && get_jail_oninterface
	    [ $mtag = "vnet" ] && get_jail_vnet
	    [ $mtag = "applytpl" ] && get_jail_applytpl
	    [ $mtag = "floatresolv" ] && get_jail_floatresolv
	    [ $mtag = "arch" ] && get_jail_arch
	    [ $mtag = "mdsize" ] && get_jail_mdsize
	    [ $mtag = "path" ] && get_jail_path
	    [ $mtag = "data" ] && get_jail_data
	    [ $mtag = "GO" ] && gen_newjail_conf
	    ;;
	*)
	    exit
	    ;;
    esac

boo=$(( boo + 1 ))

done
