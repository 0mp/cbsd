#!/bin/sh
#v9.2.0
globalconf="${workdir}/cbsd.conf";
MYARG=""
MYOPTARG="src dst ccache distcc"
MYDESC="put into copy of original make.conf specidic distcc records"
ADDHELP="src - for example /etc/make.conf, dst=for example /tmp/make_distcc.conf\n"

[ -f ${globalconf} ] || err 1 "no such conf file";
. ${globalconf}
. ${subr}
. ${inventory}
. ${distccacheconf}

init $*


set -o errexit
#set -o xtrace
#=======================================================================================================#
export FORCE_PKG_REGISTER=yes
export RELEASE_DIR=`pwd`
export SVN_BASE="svn://svn.freebsd.org/base/"
export SVN_REV="current"
export SRC_DEST="$RELEASE_DIR"
export BEGIN_DATE=`date "+%Y-%m-%d"`
###export DISTRIBUTIONS="base.txz kernel.txz"
export REP_DEST="/usr/home/web/pkgupdate.nevosoft.ru/freebsd"
# set NOTIFY="" for disable mail notification
export NOTIFY="oleg.ginzburg@nevosoft.ru"
#=======================================================================================================#
export DISTCC_HOSTS="127.0.0.1/10 88.198.136.97/10,lzo 78.46.220.81/10,lzo"
export PATH="/usr/lib/distcc/bin:$PATH"
export CCACHE_PREFIX="/usr/local/bin/distcc"
export CCACHE_PATH="/usr/bin:/usr/local/bin"
export CCACHE_DIR="/root/.ccache"
export PORTSCFG_ROOT="/root/scripts/ports"
export PATH="/usr/local/libexec/ccache:$PATH"
export CCACHEFS="mdfs"  # can be  "" - no ccachefs, mdfs - mdfs, tmpfs - tmpfs
export CCACHEFS_SIZE="4g"  # size for tmpfs or mdfs 
#=======================================================================================================#
# list port for skipping
SKIPPORT="\
auditfile \
local.sqlite \
cbsd- \
gcc47 \
freebsd-base \
freebsd-kernel-symbols \
freebsd-kernel \
freebsd-lib32 \
freebsd-rescue \
freebsd-zoneinfo
"
DIALOGTMP="/tmp/dialog.tmp.$$"
DIALOG=${DIALOG=/usr/bin/dialog}
MYREPO="http://pkgupdate.nevosoft.ru"  # used for generation pkg.conf in chroot for continue action
CONTINUE=0 # default value for mode - 0 for new, 1 for continue
LOCKFILE="/tmp/create_packages_repository.lock"

trap "rm -f ${DIALOGTMP} ${LOCKFILE}; umount_temp_dirs" 0 1 2 3 4 5 6 9

# fatal error for interactive session.
err()
{
    exitval=$1
    shift
    echo "$*" 1>&2
    exit $exitval
}

# fatal error for non-interactive session. Mail when NOTIFY!=NULL
mailerr()
{
    exitval=$1
    shift
    echo "$*" 1>&2
    # send notify when error code == 1 
    [ -n "${NOTIFY}" -a ${exitval} -eq 1 ] && send_notification $*
    exit $exitval
}


choice_arch()
{
 $DIALOG --backtitle "$0" --title "Select the processor architecture."  --clear \
         --default-item "amd64" --menu "Make your choice." 10 50 2 \
         "i386" "Processor arch." \
         "amd64" "Processor arch." 2> ${DIALOGTMP}

 retval2=$?
 choice2=`cat ${DIALOGTMP}`

 case $retval2 in
    0)
	export R_ARCH="${choice2}"
	
        export PORTSCFG_SRC="${PORTSCFG_ROOT}/${R_ARCH}/ports"
        [ -d "${PORTSCFG_SRC}" ] || mkdir -p ${PORTSCFG_SRC}

	if [ $choice2 = "i386" ]; then
	    export UNAME_p="i386"
	    export UNAME_m="i386"
	    export TARGET_ARCH="i386"
	fi
	;;
    255) exit
	;;
 esac
 return $retval2
}
#-------------------------------------------------------------------------------------------------------#
svn_checkout()
{
 $DIALOG --backtitle "$0" --title "SVN checkout for $R_ARCH $OS_BRANCH $OS_VER" "$@" --prgbox "./svn_update.sh" 20 75
}
#-------------------------------------------------------------------------------------------------------#
get_svn_rev()
{
 $DIALOG --backtitle "$0" --title "Select the next step."  --clear \
         --default-item "1" --menu "              Make your choice." 10 50 2 \
         "1" "Use the existing svn revision." \
         "2" "SVN checkout." 2> ${DIALOGTMP}

 retval30=$?
 choice30=`cat ${DIALOGTMP}`

 [ "${choice30}" != "2" ] && return 0

  SVNREV="$SVN_REV"

  $DIALOG --backtitle "$0" --title "SVN revision" --ok-label "Done" \
	--form "Enter the number of SVN revision." \
    	10 50 0 \
    	"SVN revision:"  1 1      "$SVNREV" 1  14 7 7 2> ${DIALOGTMP}
    
    retval300=$?
    choice300=`cat ${DIALOGTMP}`

    case $retval300 in
	0)
	    export SVN_REV=$choice300
	    export SRC_DEST="$RELEASE_DIR/data/$R_ARCH/$OS_BRANCH/$OS_VER/src"
	    svn_checkout
	    ;;
	255) exit
	    ;;
    esac

 return $retval30
}
#-------------------------------------------------------------------------------------------------------#
choice_head_ver()
{
 export OS_VER="head"
 mkdir -p $RELEASE_DIR/data/$R_ARCH/$OS_BRANCH/$OS_VER
}
#-------------------------------------------------------------------------------------------------------#
choice_release_ver()
{
 $DIALOG --backtitle "$0" --title "Select OS releng version."  --clear \
         --default-item "9.1.0" --menu "              Make your choice." 12 50 4 \
         "9.0.0" "RELEASE." \
         "9.1.0" "RELEASE." 2> ${DIALOGTMP}

 retval312=$?
 choice312=`cat ${DIALOGTMP}`

 case $retval312 in
    0)
	export OS_VER="${choice312}"
	mkdir -p $RELEASE_DIR/data/$R_ARCH/$OS_BRANCH/$OS_VER
	;;
    255) exit 
	;;
 esac

return $retval312
}
#-------------------------------------------------------------------------------------------------------#
choice_releng_ver()
{
 $DIALOG --backtitle "$0" --title "Select OS releng version."  --clear \
         --default-item "9.1" --menu "              Make your choice." 12 50 4 \
         "9.0" "RELENG." \
         "9.1" "RELENG." 2> ${DIALOGTMP}

 retval32=$?
 choice32=`cat ${DIALOGTMP}`

 case $retval32 in
    0)
	export OS_VER="${choice32}"
	mkdir -p $RELEASE_DIR/data/$R_ARCH/$OS_BRANCH/$OS_VER
	;;
    1) return 1
	;;
    255) exit
	;;
 esac

return $retval32
}
#-------------------------------------------------------------------------------------------------------#
choice_stable_ver()
{
 $DIALOG --backtitle "$0" --title "Select OS stable version."  --clear \
         --default-item "9" --menu "              Make your choice." 10 50 2 \
         "8" "STABLE." \
         "9" "STABLE." 2> ${DIALOGTMP}

 retval33=$?
 choice33=`cat ${DIALOGTMP}`

 case $retval33 in
    0)
	export OS_VER="${choice33}"
	mkdir -p $RELEASE_DIR/data/$R_ARCH/$OS_BRANCH/$OS_VER
	;;
    1) return 0
	;;
    255) exit
	;;
  esac
return $retval33
}
#-------------------------------------------------------------------------------------------------------#
choice_branch()
{
 $DIALOG --backtitle "$0" --title "Select OS branch."  --clear \
         --default-item "release" --menu "Make your choice." 15 50 4 \
         "head" "Current." \
         "release" "Branch." \
         "releng" "Branch." \
         "stable" "Branch."  2> ${DIALOGTMP}

 retval4=$?
 choice4=`cat ${DIALOGTMP}`

 case $retval4 in
    0)
	export OS_BRANCH="${choice4}"
	mkdir -p $RELEASE_DIR/data/$R_ARCH/$OS_BRANCH
	[ "$choice4" = "head" ] && choice_head_ver
	[ "$choice4" = "release" ] && choice_release_ver
	[ "$choice4" = "releng" ] && choice_releng_ver
	[ "$choice4" = "stable" ] && choice_stable_ver
	;;
    1)  return 0
	;;
   255) exit
	;;
  esac
return $retval4
}
#-------------------------------------------------------------------------------------------------------#
create_archives()
{
 echo -e "\033[40;35m Create archives...  \033[0m"

 tar -C $BSDINSTALL_CHROOT/usr -zcf $RELEASE_DIR/data/$R_ARCH/$OS_BRANCH/$OS_VER/minsys_usr.tgz .  
 chflags -R noschg $BSDINSTALL_CHROOT/usr
 rm -rf $BSDINSTALL_CHROOT/usr
 tar -C $BSDINSTALL_CHROOT/var -zcf $RELEASE_DIR/data/$R_ARCH/$OS_BRANCH/$OS_VER/minsys_var.tgz .
 chflags -R noschg $BSDINSTALL_CHROOT/var
 rm -rf $BSDINSTALL_CHROOT/var
 tar -C $BSDINSTALL_CHROOT/tmp -zcf $RELEASE_DIR/data/$R_ARCH/$OS_BRANCH/$OS_VER/minsys_tmp.tgz .
 chflags -R noschg $BSDINSTALL_CHROOT/tmp
 rm -rf $BSDINSTALL_CHROOT/tmp
 tar -C $BSDINSTALL_CHROOT -zcf $RELEASE_DIR/data/$R_ARCH/$OS_BRANCH/$OS_VER/minsys_root.tgz .

## make freebsd base packages
#REVISION=`grep ^REVISION=\" ${RELEASE_DIR}/data/${R_ARCH}/${OS_BRANCH}/${OS_VER}/src/sys/conf/newvers.sh| cut -d '"' -f 2`
#[ -z "${REVISION}" ] && REVISION=${OS_VER}

#conf="freebsd-base-${REVISION}.conf freebsd-kernel-${REVISION}.conf freebsd-kernel-symbols-${REVISION}.conf freebsd-rescue-${REVISION}.conf freebsd-lib32-${REVISION}.conf freebsd-zoneinfo-${REVISION}.conf"

#for _conf in $conf; do  
#     echo -e "\033[40;35m Create system packages via ${_conf}... \033[0m"
#          $RELEASE_DIR/helper ${RELEASE_DIR}/${_conf} $BSDINSTALL_CHROOT ${RELEASE_DIR}/data/${R_ARCH}/${OS_BRANCH}/${OS_VER}
#done
# end of make freebsd base packages

}

#-------------------------------------------------------------------------------------------------------#
extract_archives()
{
 echo -e "\033[40;35m Extract archives...  \033[0m"
 tar -C $BSDINSTALL_CHROOT -zxf $RELEASE_DIR/data/$R_ARCH/$OS_BRANCH/$OS_VER/minsys_root.tgz
 mkdir -p $BSDINSTALL_CHROOT/usr $BSDINSTALL_CHROOT/var $BSDINSTALL_CHROOT/tmp
 tar -C $BSDINSTALL_CHROOT/usr -zxf $RELEASE_DIR/data/$R_ARCH/$OS_BRANCH/$OS_VER/minsys_usr.tgz
 tar -C $BSDINSTALL_CHROOT/var -zxf $RELEASE_DIR/data/$R_ARCH/$OS_BRANCH/$OS_VER/minsys_var.tgz
 tar -C $BSDINSTALL_CHROOT/tmp -zxf $RELEASE_DIR/data/$R_ARCH/$OS_BRANCH/$OS_VER/minsys_tmp.tgz
}

#-------------------------------------------------------------------------------------------------------#
build_release()
{
 $DIALOG --backtitle "$0" --title "Select the next step."  --clear \
         --default-item "1" --menu "              Make your choice." 10 50 2 \
         "1" "Skip without build world." \
         "2" "Build new world." 2> ${DIALOGTMP}

 retval5=$?
 choice5=`cat ${DIALOGTMP}`

 case $retval5 in
    0)
	if [ $choice5 = "2" ];	then
	     [ -d $ROBJ_DIR ] || rm -R $ROBJ_DIR
	     clear_chroot_dir
	     mkdir -p $ROBJ_DIR
	     export MAKEOBJDIRPREFIX=$ROBJ_DIR
             [ -n "${CCACHEFS}" ] && make_ccachefs
	     make -C $RELEASE_DIR/data/$R_ARCH/$OS_BRANCH/$OS_VER/src __MAKE_CONF="$RELEASE_DIR/make.conf" buildworld || mailerr 1 "Error buildworld target"
	     mkdir -p $BSDINSTALL_CHROOT
	     make -C $RELEASE_DIR/data/$R_ARCH/$OS_BRANCH/$OS_VER/src __MAKE_CONF="$RELEASE_DIR/make.conf" DESTDIR=$BSDINSTALL_CHROOT installworld || mailerr 1 "Error installworld target"
	     make -C $RELEASE_DIR/data/$R_ARCH/$OS_BRANCH/$OS_VER/src __MAKE_CONF="$RELEASE_DIR/make.conf" DESTDIR=$BSDINSTALL_CHROOT distribution || mailerr 1 "Error distribution target"
	     make -C $RELEASE_DIR/data/$R_ARCH/$OS_BRANCH/$OS_VER/src __MAKE_CONF="$RELEASE_DIR/make.conf" buildkernel || mailerr 1 "Error buildkernel target"
	     make -C $RELEASE_DIR/data/$R_ARCH/$OS_BRANCH/$OS_VER/src __MAKE_CONF="$RELEASE_DIR/make.conf" DESTDIR=$BSDINSTALL_CHROOT installkernel || mailerr 1 "Error installkernel target"
	     create_archives
	fi
	;;
    1) return 0
	;;
    255) exit
	;;
  esac
return $retval5
}
#-------------------------------------------------------------------------------------------------------#
umount_temp_dirs()
{
# when error before BSDINSTALL_CHROOT, we do not have any mounts by scripts
[ -z "${BSDINSTALL_CHROOT}" ] && return 0

 MOUNT_LIST=`mount | awk -F" on " '{print $2}' | awk -F"(" '{print $1}'`

 for mount_point in $MOUNT_LIST; do
    case $mount_point in
	$BSDINSTALL_CHROOT/usr/ports/distfiles | \
	$BSDINSTALL_CHROOT/usr/src | \
	$BSDINSTALL_CHROOT${CCACHE_DIR} | \
	$BSDINSTALL_CHROOT/var/db/ports | \
	$BSDINSTALL_CHROOT/compat/linux/proc | \
	$BSDINSTALL_CHROOT/proc | \
	$BSDINSTALL_CHROOT/dev)
	    umount -f $mount_point || mailerr 1 "Cannot unmount $mount_point directory!"
	    ;;
    esac
 done

#destroy md disk when he used
if [ "${CCACHEFS}" = "mdfs" -a -n "${MDDEV}" ]; then
    echo -e "\033[40;35m Destroy md drive ${MDDEV}\033[0m"
    mdconfig -d -u ${MDDEV}
fi

}
#-------------------------------------------------------------------------------------------------------#
clear_chroot_dir()
{
 echo -e "\033[40;35m Prepare chroot dir...  \033[0m"
 [ -d "${BSDINSTALL_CHROOT}" ] && chflags -R noschg ${BSDINSTALL_CHROOT} && rm -rf ${BSDINSTALL_CHROOT}
 mkdir -p ${BSDINSTALL_CHROOT}
}
#-------------------------------------------------------------------------------------------------------#
get_REQUIRED_BY()
{
 echo -e "\033[40;35m Create ports list...  \033[0m"
 truncate -s0 $RELEASE_DIR/ports_list.txt

 # only get list who no require by any ports (pkg_cutleaves)
 for i in `pkg info -oqa`; do
	SKIP=0
	for n in ${SKIPPORT}; do
	    [ `echo $i | grep ${n}|wc -l` != 0 ] && SKIP=1
	done
    A=`pkg query "%ro" $i`
    [ -z "${A}" -a "${SKIP}" = "0" ] &&  printf "/usr/ports/$i\n" >> $RELEASE_DIR/ports_list.txt
 done
 echo -e "\033[40;35m `wc -l ${RELEASE_DIR}/ports_list.txt` packages found.\033[0m"
}
#-------------------------------------------------------------------------------------------------------#
install_distr()
{
 extract_archives || mailerr 1 "install_distr error"
}
#-------------------------------------------------------------------------------------------------------#
ports_tree_update()
{
    echo -e "\033[40;35m Fetching ports tree ...  \033[0m"
    mkdir -p $BSDINSTALL_CHROOT/usr/ports || err 1 "Error mkdir /usr/ports in chroot"
    portsnap -d $BSDINSTALL_CHROOT/var/db/portsnap -p $BSDINSTALL_CHROOT/usr/ports fetch || mailerr 1 "Error portsnap fetch"
    echo -e "\033[40;35m Extracting ports tree ...  \033[0m"
    portsnap -d $BSDINSTALL_CHROOT/var/db/portsnap -p $BSDINSTALL_CHROOT/usr/ports extract >/dev/null 2>&1|| mailerr 1 "Error portsnap extract"
}
#-------------------------------------------------------------------------------------------------------#
prepare_build()
{
    echo -e "\033[40;35m Prepare building packages...  \033[0m"
    cp /etc/resolv.conf $BSDINSTALL_CHROOT/etc/ || mailerr 1 "Error cp for /etc/resolv.conf"
    cp -f $RELEASE_DIR/make.conf_first $BSDINSTALL_CHROOT/etc/make.conf || mailerr 1 "Error cp for make.conf_first"
    cp $RELEASE_DIR/packages.sh $BSDINSTALL_CHROOT/tmp/ || mailerr 1 "Error cp packages.sh for /tmp/"
    cp $RELEASE_DIR/ports_list.txt $BSDINSTALL_CHROOT/tmp/ || mailerr 1 "Error cp ports_list.txt for /tmp/"

    [ -f "${BSDINSTALL_CHROOT}/tmp/buildcontinue" ] && rm -f "${BSDINSTALL_CHROOT}/tmp/buildcontinue"

    # setup pkg repository for continue action
if [ $CONTINUE -eq 1 ]; then
    echo "PACKAGESITE: ${MYREPO}/freebsd/"$R_ARCH"/"$OS_BRANCH"/"$OS_VER > ${BSDINSTALL_CHROOT}/usr/local/etc/pkg.conf
    env ASSUME_ALWAYS_YES=yes pkg update -f 
# repo invalid or network error, so no continue mode
    [ $? -ne 0 ] && return 0 ## all fine for scripts
    touch ${BSDINSTALL_CHROOT}/tmp/buildcontinue
fi
}
#-------------------------------------------------------------------------------------------------------#
mount_temp_dirs()
{
 echo -e "\033[40;35m Building packages...  \033[0m"
 mount -t devfs devfs $BSDINSTALL_CHROOT/dev
 if [ "${R_ARCH}" = "i386" -o "${R_ARCH}" = "amd64" ]; then
    mkdir -p $BSDINSTALL_CHROOT/compat/linux/proc
    mount -t linprocfs linprocfs $BSDINSTALL_CHROOT/compat/linux/proc
 fi
 mkdir -p $BSDINSTALL_CHROOT/proc
 mount -t procfs procfs $BSDINSTALL_CHROOT/proc
 mount -t nullfs ${PORTSCFG_SRC} $BSDINSTALL_CHROOT/var/db/ports
 mkdir -p $BSDINSTALL_CHROOT/usr/src
 mount -t nullfs $RELEASE_DIR/data/$R_ARCH/$OS_BRANCH/$OS_VER/src $BSDINSTALL_CHROOT/usr/src
 mkdir -p $BSDINSTALL_CHROOT/usr/ports/distfiles
 mount -t nullfs /usr/ports/distfiles $BSDINSTALL_CHROOT/usr/ports/distfiles
}
#-------------------------------------------------------------------------------------------------------#
building_packages()
{
echo -e "\033[40;35m Building packages...  \033[0m"

mount_temp_dirs || err 1 "Unable to mount nullfs"
chroot $BSDINSTALL_CHROOT /bin/sh << EOF
service ldconfig onestart
env ASSUME_ALWAYS_YES=yes pkg > /dev/null 2>&1
pkg2ng

#distcc must be first for CCACHE_PREFIX when ccache is used
NEEDEDPORTS="\
devel/distcc \
devel/ccache \
ports-mgmt/portmaster \
"

for i in \${NEEDEDPORTS}; do

if [ -f /tmp/buildcontinue ]; then
   pkg info \$i >/dev/null 2>&1|| env ASSUME_ALWAYS_YES=yes pkg install -y \$i 
   pkg info \$i >/dev/null 2>&1|| make -C /usr/ports/\${i} install clean
else
  make -C /usr/ports/\${i} install clean
fi
done

cd /
EOF

 cp -f $RELEASE_DIR/make.conf_chroot $BSDINSTALL_CHROOT/etc/make.conf

 chroot $BSDINSTALL_CHROOT /tmp/packages.sh
 errval=$?
# test for port_log from portmater and send broken build log to email
 A=`ls ${BSDINSTALL_CHROOT}/tmp/port_log* 2>/dev/null`

 if [ -n "${A}" ]; then
    if [ -n "${NOTIFY}" ]; then
	cat ${BSDINSTALL_CHROOT}/tmp/build.log |mail -s "[PKGUPDATE-$R_ARCH-$OS_BRANCH-$OS_VER] Broken build error. See next message for details" ${NOTIFY}
        sleep 5 # delay for correct message order ;)
	cat ${A} |mail -s "[PKGUPDATE-$R_ARCH-$OS_BRANCH-$OS_VER] Broken build error. Log for broken ports" ${NOTIFY}
    fi
    cat ${A}
    err 1 "Build packages.sh error"
 fi

 if [ "${errval}" != "0" ]; then
    if [ -n "${NOTIFY}" ]; then
	cat ${BSDINSTALL_CHROOT}/tmp/build.log| mail -s "[PKGUPDATE-$R_ARCH-$OS_BRANCH-$OS_VER] Build packages.sh error" ${NOTIFY}
    fi
    cat ${BSDINSTALL_CHROOT}/tmp/build.log
    err 1 "Build packages.sh error"
 fi


 mkdir -p $PACKAGES_DIR
 echo -e "\033[40;35m Sync chroot to packages dir...  \033[0m"
 rsync -aHv $BSDINSTALL_CHROOT/packages/ $PACKAGES_DIR || mailerr 1 "Error rsync for /packages"
}
#-------------------------------------------------------------------------------------------------------#
rsync_cur_pack_to_chroot()
{
 mkdir -p $BSDINSTALL_CHROOT/packages
 echo -e "\033[40;35m Sync current packages to chroot dir...  \033[0m"
 rsync -aHv $REP_DEST/$R_ARCH/$OS_BRANCH/$OS_VER/ $BSDINSTALL_CHROOT/packages/ || mailerr 1 "Error rsync for /packages"
}
#-------------------------------------------------------------------------------------------------------#
create_symlink()
{
# mkdir -p $REP_DEST/$R_ARCH/
 mkdir -p $REP_DEST/$R_ARCH/$OS_BRANCH
 ln -h -f -s $PACKAGES_DIR $REP_DEST/$R_ARCH/$OS_BRANCH/$OS_VER || mailerr 0 "Error create_symlink"
}
#-------------------------------------------------------------------------------------------------------#
send_notification()
{
 mail -s "[PKGUPDATE-$R_ARCH-$OS_BRANCH-$OS_VER] ${1}" ${NOTIFY} << EOF
Host: `hostname`
Date: `date`
EOF
}
#=======================================================================================================#
make_ccachefs()
{

    echo -e "\033[40;35m Create and populate ${CCACHEFS} for ccachefs \033[0m"
    export CCACHE_SRC="${CCACHE_DIR}/${R_ARCH}/${OS_VER}"
    [ -d "${CCACHE_SRC}" ] || mkdir -p ${CCACHE_SRC}

#mount tmpfs or mdfs and fill data from storage
    mkdir -p ${BSDINSTALL_CHROOT}${CCACHE_DIR}
    case "${CCACHEFS}" in
	"tmpfs")
	    mount -t tmpfs -o size=${CCACHEFS_SIZE} tmpfs ${BSDINSTALL_CHROOT}${CCACHE_DIR} || err 1 "Error create tmpfs"
	    ;;
	"mdfs")
#	    mdmfs -s ${CCACHEFS_SIZE} -o async md ${BSDINSTALL_CHROOT}${CCACHE_DIR} || err 1 "Error create mdfs"
	    MDDEV=`mdconfig -a -t malloc -s ${CCACHEFS_SIZE}`
	    if [ $? -eq 0 -a -n "${MDDEV}" ]; then
		newfs -o time /dev/${MDDEV}
		mount -o async /dev/${MDDEV} ${BSDINSTALL_CHROOT}${CCACHE_DIR}
	    else
		echo "error when create mdmfs, skip mfs"
		#no mdmfs
		MDDEV=""
		export CCACHEFS=""
		export CCACHEFS_SIZE=""
	    fi	    
	    ;;
    esac
	export MDDEV="$MDDEV"
    set +o errexit
    cp -a ${CCACHE_SRC}/* ${BSDINSTALL_CHROOT}${CCACHE_DIR}
    [ $? -eq 0 ] && rm -rf ${BSDINSTALL_CHROOT}${CCACHE_DIR}/*
    set -o errexit
}

### MAIN ###
[ `whoami` != "root" ] && err 1 "Need root privileges"
[ `sysctl -n kern.osreldate` -lt 901000 ] && err 1 "Current script used pkg(8) so for Freebsd 9.1+ only"
[ -f "${LOCKFILE}" ] && err 1 "Locked by another instance who has pid `cat ${LOCKFILE}`"
# make lock. TODO: May be make lock for $arch-$ver job, for parallel execution for diffrence target?
echo $$ > ${LOCKFILE}

$DIALOG --backtitle "$0" --title "Create local repository"  --clear \
        --default-item "2" --menu "\n\n Make your choice." 15 51 4 \
        "1" "Create new local repository." \
        "2" "To continue building." \
        "3" "Cleaning chroot directory." 2> ${DIALOGTMP}

retval1=$?

choice1=`cat ${DIALOGTMP}`

case $retval1 in
    0)
	choice_arch
        choice_branch
	get_svn_rev
	export ROBJ_DIR="$RELEASE_DIR/data/$R_ARCH/$OS_BRANCH/$OS_VER/obj"
	export BSDINSTALL_DISTDIR=$RELEASE_DIR/data/$R_ARCH/$OS_BRANCH/$OS_VER
	export PACKAGES_DIR=$BSDINSTALL_DISTDIR/$BEGIN_DATE
	export BSDINSTALL_CHROOT=$BSDINSTALL_DISTDIR/chdir
	build_release || mailerr 1 "Cannot build release"
	umount_temp_dirs || mailerr 1 "Cannot umount_temp_dirs!"
	if [ $choice1 = "1" ]; then
	    send_notification "Initializing a new build environment"
	    get_REQUIRED_BY
	    clear_chroot_dir || mailerr 1 " ERROR! Cannot clear_chroot_dir!"
            [ -n "${CCACHEFS}" ] && make_ccachefs
            install_distr || mailerr 1 " ERROR! Cannot install_distr!"
	    ports_tree_update || mailerr 1 " ERROR! Cannot ports_tree_update!"
            prepare_build || mailerr 1 " ERROR! Cannot prepare_build!"
            building_packages || mailerr 1 " ERROR! Cannot building_packages!"
	    create_symlink || mailerr 1 " ERROR! Cannot create_symlink!"
            send_notification " New build environment complete"
	    /usr/local/bin/cbsd base2pkg target=world repo=/usr/home/web/pkgupdate.nevosoft.ru/freebsd/amd64/release/9.1.0 svnrev=src
	    /usr/local/bin/cbsd base2pkg target=kernel repo=/usr/home/web/pkgupdate.nevosoft.ru/freebsd/amd64/release/9.1.0 svnrev=src
	fi
	if [ $choice1 = "2" ]; then
	    CONTINUE=1 # for using pkg while installing ports
	    send_notification " Initializing a continue build environment"
            [ -n "${CCACHEFS}" ] && make_ccachefs
	    prepare_build || mailerr 1 " ERROR! Cannot prepare_build!"
	    building_packages || mailerr 1 " ERROR! Cannot building_packages!"
	    create_symlink || mailerr 1 " ERROR! Cannot create_symlink!"
	    send_notification " Continue build environment complete"
	fi
	if [ $choice1 = "3" ]; then
	    clear_chroot_dir || mailerr 1 "Cannot clear_chroot_directory!"
	fi

	#pull ccache data from tmpfs to storage
	if [ -d "${BSDINSTALL_CHROOT}/${CCACHE_DIR}" ]; then
	    [ -d "${CCACHE_SRC}" ] && rm -rf ${CCACHE_SRC}
    	    cp -a ${BSDINSTALL_CHROOT}${CCACHE_DIR} ${CCACHE_SRC}
        fi

	err 0 "Success"
	;;
    1)
	err 0 "Cancel pressed."
	;;
    255)
	err 0 "ESC pressed."
	;;
esac
#=======================================================================================================#
