#v10.0.0
#return 0 errcode for undefined type
#return 1 errcode for ipv4
#return 2 errcode for ipv6
iptype() {

	[ -z "${1}" ] && return 0

	# Identify type {inet,inet6}.
	case "${1}" in
		*\.*\.*\.*)
			return 1
		;;
		*:*)
			return 2
		;;
		*)	return 0
		;;
	esac
}


resolvhost()
{
	HST=$( /usr/bin/host -4 -t a $1 | /usr/bin/awk '/has address /{print $4"\n"}' |/usr/bin/head -n1 |/usr/bin/egrep '^([[:digit:]]{1,3}\.){3}[[:digit:]]{1,3}$' )
}

# convert string in Xm (mbytes) or Xg (gbytes) to bytes
# example: 
# if conv2bytes "1g"; then
#    echo $convval
# fi
# return bytes in $convval var
# errcode 1 when error
conv2bytes() {
	local _testsize
	local _value

	[ -z "${1}" ] && return 1

	# expand_number in conv2human does't support for float, eg: 1.1G
	convval=$( ${miscdir}/conv2human ${1} |tr '[:upper:]' '[:lower:]' )
	[ -z "${convval}" ] && return 1
	[ ${convval} -gt 0 ] || return 1
}

# convert bytes to human readable form
# example:
# if conv2human "10000"; then
#   echo $convval
# fi
# errcode 1 when not number
conv2human() {
	[ -z "${1}" ] && return 1
	convval=$( ${miscdir}/conv2human ${1}| tr '[:upper:]' '[:lower:]' )
	return $?
}

# $1 - $4 - ip
# $5 - $8 - mask
# example:
# IFS="."
# ip="192.168.1.55"
# mask="255.255.255.248"
# first_ips_w_mask 192.168.1.55 255.255.255.248
first_ips_w_mask()
{
	printf "%d.%d.%d.%d\n" "$(($1 & $5))" "$(($2 & $6))" "$(($3 & $7))" "$(( ($4 & $8) + 1 ))"
}


# print prefix from mask
# example: cdr=$( mask2cdr 255.255.255.248 )
mask2cdr ()
{
	# Assumes there's no "255." after a non-255 byte in the mask
	local x=${1##*255.}
	set -- 0^^^128^192^224^240^248^252^254^ $(( (${#1} - ${#x})*2 )) ${x%%.*}
	x=${1%%$3*}
	echo $(( $2 + (${#x}/4) ))
}

# print mask from prefix
# example: mask=$( cdr2mask 24 )
cdr2mask ()
{
	# Number of args to shift, 255..255, first non-255 byte, zeroes
	set -- $(( 5 - ($1 / 8) )) 255 255 255 255 $(( (255 << (8 - ($1 % 8))) & 255 )) 0 0 0
	[ $1 -gt 1 ] && shift $1 || shift
	echo ${1-0}.${2-0}.${3-0}.${4-0}
}

