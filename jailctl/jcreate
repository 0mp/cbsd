#!/usr/local/bin/cbsd
#v10.1.2
MYARG="jconf"
MYOPTARG="inter ver arch customskel fstablocal delpkglist removejconf pkglist"
MYDESC="Create jail from config file"
ADDHELP="inter=0 to prevent any questions and to accept answers by default\n\
customskel = additional skel directory applyed above jail structrure\n\
fstablocal = additional fstab file stored as fstab.local\n"
CBSDMODULE="jail"
EXTHELP="wf_jcreate.html"

. ${subr}
. ${system}
. ${inventory}
. ${tools}
. ${mdtools}
. ${jfs}

init $*

mkfstab() {
	if [ $baserw -eq 0 ]; then
		cat > ${mount_fstab} << EOF
# Please do not edit this file for additional fstabs
# Use ${jailfstabdir}/${jailfstabpref}local instead
${data}/etc /etc nullfs rw 0 0
${data}/root /root nullfs rw 0 0
${data}/tmp /tmp nullfs rw 0 0
${data}/usr/home /usr/home nullfs rw 0 0
${data}/usr/local /usr/local nullfs rw 0 0
${data}/usr/compat /usr/compat nullfs rw 0 0
${data}/var /var nullfs rw 0 0
#
EOF
	fi
}

### MAIN
[ -n "${delpkglist}" ] && odelpkglist="${delpkglist}"
readconf buildworld.conf
readconf jail-freebsd-default.conf

. ${workdir}/universe.subr
. ${workdir}/freebsd_world.subr
[ -n "${odelpkglist}" ] && delpkglist="${odelpkglist}"

[ ! -f "$jconf" ] && err 1 "${MAGENTA}no such jconf file${NORMAL}";

jconf=$( /bin/realpath $jconf )

[ -z "${delpkglist}" ] && delpkglist=0

temprcconf="${ftmpdir}/jcreate_jconf.$$"

/bin/cp ${jconf} ${temprcconf}

if [ ${removejconf} = "1" ]; then
	trap "/bin/rm -f ${temprcconf} ${jconf}" HUP INT ABRT BUS TERM  EXIT
else
	trap "/bin/rm -f ${temprcconf}" HUP INT ABRT BUS TERM  EXIT
fi

. ${temprcconf}
over="${ver}"
. ${buildconf}

[ -z "${jname}" ] && err 1 "${MAGENTA}No such jname variable${NORMAL}"

init_jail_path
init_target_arch
init_basedir
init_kerneldir

jstatus jname=${jname} > /dev/null 2>&1
[ $? -eq 0 ] || err 1 "${MAGENTA}Jail with $jname already exist${NORMAL}"

get_base

${ECHO} "${MAGENTA}Please wait: ${GREEN}this will take a while...${NORMAL}"

[ -d "${data}" ] && removedata ${data}

case $zfsfeat in
	"0")
		[ -d ${data} ] || mkdir -p ${data}
		;;
	"1")
		. $zfstool
		ZPOOL=$( /sbin/zfs get -Ho value name ${jaildatadir} )
		if zfsroot $jname; then
			err 1 "$ZPOOL/$jname already in use"
		fi
		/sbin/zfs create -o atime=off -o mountpoint=${data} ${ZPOOL}/$jname
		;;
esac

[ ! -d "${data}" ] && err 1 "Can't create datadir ${data}"
[ ! -d ${path} -a "${baserw}" -eq 0 ] && mkdir -p ${path}

create_dir="${jailfstabdir} \
${jailsysdir}/${jname} \
${jailsysdir}/${jname}/stop.d \
${jailsysdir}/${jname}/start.d \
${jailsysdir}/${jname}/master_prestop.d \
${jailsysdir}/${jname}/master_prestart.d \
${jailsysdir}/${jname}/master_poststop.d \
${jailsysdir}/${jname}/master_poststart.d"

for i in ${create_dir}; do
	[ ! -d "${i}"  ] && /bin/mkdir -m 0775 -p ${i}
	/usr/sbin/chown ${cbsduser}:${cbsduser} ${i}
done

## MD backend place
if [ "${mdsize}" != "0" ]; then
	conv2bytes "${mdsize}" || err 1 "conv2bytes error from ${mdsize}"
	imgbytes=$convval
	blockcount=$(( imgbytes  / 1048576 ))
	mdimage="${jailsysdir}/${jname}/image.dat"
	/usr/bin/touch "${mdimage}"
	/bin/dd if="/dev/zero" of="${mdimage}" bs=1m count=0 seek=${blockcount} 1> /dev/null 2>&1 || err 1 "Error: Couldn't create the image file. ${mdimage}"
	# Attach the .img file as a memory disk.
	mdimagedevice=$( /sbin/mdconfig -a -t vnode -f "${mdimage}" )
	[ $? -eq 0 ] || err 1 "Error: Failed to mdconfig on ${mdimage}"
	/sbin/newfs -j -n -U "/dev/${mdimagedevice}" 1> /dev/null 2>&1 || mdconfig -d -u ${mdimagedevice} || err 1 "Error: Couldn't newfs the memory disk. ${mdimagedevice}"
	/sbin/mdconfig -d -u ${mdimagedevice}
	# mount here
	mountmd jroot=${data} mdfile=${mdimage}
fi
## MD backend

populate_freebsd_world
mkfstab

if [ "${ip4_addr}" = "DHCP" ]; then
	ip4_addr=$( dhcpd )
	/usr/sbin/sysrc -qf ${temprcconf} ip4_addr="${ip4_addr}" > /dev/null
fi

/usr/sbin/sysrc -qf ${temprcconf} arch="${arch}" > /dev/null
/usr/sbin/sysrc -qf ${temprcconf} ver="${ver}" > /dev/null

/bin/cp $temprcconf $rcconf

[ -n "${fstablocal}" -a -f "${fstablocal}" ] && cp ${fstablocal} ${jailfstabdir}/${jailfstabpref}${jname}.local

# Finnaly export to SQLite
jregister jname=${jname} mode=new status=3
res=$?

# pkg bootstrap && user accounting
if [ "${ver}" != "empty" ]; then

	if [ ${applytpl} -eq 1 -a "${pkg_bootstrap}" = "1" ]; then
		pkg mode=bootstrap jname=${jname} ||true
	fi

	if [ -n "${user_pw_root}" ]; then
		passwd jname=${jname} user="root" pw="${user_pw_root}"
	fi

fi

if [ ${res} -eq 0 ]; then
	${ECHO}
	${ECHO} "${MAGENTA}Creating ${jname} complete: ${GREEN}Enjoy!${NORMAL}"
	/bin/rm -f $rcconf

	#[ ${applytpl} -eq 1 ] && ${miscdir}/config_pkgrepo -t ${etcdir}/pkg.conf -v ${ver} -a ${arch} ${data}
	# pkg area
	if [ -n "${pkglist}" -a "${pkglist}" != "NO" -a "${ver}" != "empty" ]; then
		if [ ! -f "${pkglist}" ]; then
			pkg mode=install name="${pkglist}" jname=${jname}
		else
			pkg mode=install pkglist="${pkglist}" jname=${jname}
			[ $delpkglist -eq 1 ] && rm -f ${pkglist}
		fi
	fi
	[ "${mdsize}" != "0" ] && unmountmd jroot=${data}
	# set status to Off
	cbsdsql local UPDATE jails SET status=0 WHERE jname=\"${jname}\"
	exit 0
else
	${ECHO}
	${ECHO} "${MAGENTA}Creating ${jname} failed: ${GREEN}cbsd jregister${NORMAL}"
	${ECHO} "${MAGENTA}Please review bad config file: ${GREEN}/tmp/rc.conf_${jname}${NORMAL}"
	mv $rcconf /tmp
	#cleanup
	[ -f "${mount_fstab}" ] && rm -f ${mount_fstab}
	removedata ${data}
	exit 1
fi
