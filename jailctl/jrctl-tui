#!/usr/local/bin/cbsd
#v10.0.4
CBSDMODULE="jail"
MYARG="jname"
MYOPTARG=""
MYDESC="Dialog based UI for RACCR/RCTL"

. ${subr}
. ${inventory}
. ${dialog}
. ${strings}
. ${tools}
. ${sharedir}/rctl.conf
. ${workdir}/jrctl.subr

init $*

. ${jrcconf}
[ $? -eq 1 ] && err 1 "${MAGENTA}No such jail: ${GREEN}${jname}${NORMAL}"

choice_commit()
{
	local _myval _num _items _res
	_num=0

	#set human=0 fpr rctl_humanize func
	human=1

	# check for old values, if not exist then insert, not update
	_res=$( cbsdsql local SELECT jname FROM rctl WHERE jname=\"${jname}\" )
	[ -z "${_res}" ] && cbsdsql local "INSERT INTO rctl ( jname ) VALUES ( \"${jname}\" )"

	if [ "${racct}" = "1" ]; then
		truncate -s0 ${LIMITS}
		jrctl jname=$jname mode=unset

		for _items in ${RCTL}; do
			eval _myval=\$${_items}
			# convert to bytes if necessary
			if rctl_humanize ${_items}; then
				if conv2bytes ${_myval}; then
					_myval="${convval}"
				fi
			fi

			cbsdsql local UPDATE rctl SET ${_items}=\"${_myval}\" WHERE jname=\"${jname}\"

			if [ "${_myval}" != "0" ]; then
				echo "${_items}:deny=${_myval}" >> ${LIMITS}
				_num=$((_num+1))
			fi
		done
	fi

	for _items in ${RCTL_EXTRA}; do
		eval _myval=\$${_items}
		if [ "$_myval" != "0" ]; then
			# convert to bytes if necessary
			if rctl_humanize ${_items}; then
				if conv2bytes ${_myval}; then
					_myval="${convval}"
				fi
			fi
			cbsdsql local UPDATE rctl SET ${_items}=\"${_myval}\" WHERE jname=\"${jname}\"
			_num=$((_num+1))
		fi
	done

	if [ ${_num} -eq 0 ]; then
		[ -f "${LIMITS}" ] && rm -f "${LIMITS}"
		_res=$( cbsdsql local DELETE from rctl WHERE jname=\"${jname}\" )
		jrctl jname=$jname mode=unset
		err 0 "${MAGENTA}Limits cleaned for: ${GREEN}${jname}${NORMAL}"
	else
		jrctl jname=$jname mode=set
		err 0 "${MAGENTA}New limits commited for: ${GREEN}${jname}${NORMAL}"
	fi
}

load_limits()
{
	local _i _myval
	. ${workdir}/rctl.subr

	#convert values for humanoid
	for _i in ${RCTL}; do
		if rctl_humanize ${_i}; then
			eval _myval=\$${_i}
			if conv2human ${_myval}; then
				eval ${_i}="${convval}"
			fi
		fi
	done
}

#adjust default settings
reset_limits()
{
	local _items

	for _items in ${MYLIMITS}; do
		eval ${_items}="\$${_items}_default"
	done
}

mychoice()
{
	local _mydesc _retval _myval

	eval _mydesc=\$${choice}_desc
	eval _myval=\$${choice}

	f_dialog_input _input "${_mydesc}" "${_myval}"
      _retval=$?

	case ${_retval} in
	0)
		[ -n "${_input}" ] && eval ${choice}="${_input}"
		;;
	esac
}


#main
LIMITS="${jailsysdir}/${jname}/jail.limits"
[ ! -d "${jailsysdir}/${jname}" ] && mkdir -p ${jailsysdir}/${jname}

TMPFILE="${ftmpdir}/inputbox.$$"
_menufile="${ftmpdir}/choicerepo.$$"
trap "rm -f ${TMPFILE} ; rm -f ${_menufile}" EXIT

if [ "${racct}" = "1" ]; then
	MYLIMITS="${RCTL} ${RCTL_EXTRA}"
else
	MYLIMITS="${RCTL_EXTRA}"
fi

reset_limits
load_limits

msg_extra="Reset"

while [ 1 ]; do
	menu_list=""

	for items in ${MYLIMITS}; do
		eval myval=\$${items}
		menu_list="${menu_list} '${items}' '${myval}'"
	done

	menu_list="${menu_list} 'COMMIT' ''"
	f_dialog_menu
	retval=$?
	f_dialog_menutag_fetch mtag
	choice=${mtag}

	case $retval in
		0)
			case "${mtag}" in
				"COMMIT")
					choice_commit
					;;
				*)
					mychoice
					;;
			esac
			;;
		3)
			reset_limits
			;;
		*)
			exit 0
			;;
	esac
done
