#!/bin/sh
#v10.0.0
globalconf="${workdir}/cbsd.conf";

[ -f ${globalconf} ] || err 1 "no such conf file";
. ${globalconf}
. ${subr}
. ${inventory}
. ${settingstui}
. ${color}
. ${dialog}
. ${strings}

[ ! -f "${sharedir}/jail-arg" ] && err 1 "No such jail-arg skel"
. ${sharedir}/jail-arg
MYDESC="Ncurses based setup for jail-arg"
MYARG="jname"
MYOPTARG="${JARG} outfile"

init $*

commit()
{
local _oldjname _newjname

    _oldjname="${jname}"

    for i in ${JARG}; do
	eval VAL=\$$i
	eval OVAL=\$OLDVAL_${i}

	if [ "${i}" = "jname" ]; then
	    _oldjname="${OVAL}"
	    _newjname="${VAL}"
	    continue
	fi
	    [ "${VAL}" = "${OVAL}" ] && continue
	    cbsd jset mode=quiet jname=${_oldjname} $i=\"${VAL}\"
    done

    [ "${_oldjname}" != "${_newjname}" ] && cbsd jrename old=${_oldjname} new=${_newjname}

    exit
}

mainmenu()
{
    COUNT=`echo $JARG|wc -w`
    COUNT=$((COUNT+4))

    #first of all - push old values to OLDVAL for comparing final result in commit() func
    for i in "jname" ${JARG}; do
	eval VAL=\$$i
	if [ -z "${VAL}" ]; then
	    export OLDVAL_${i}=""
	else
	    export OLDVAL_${i}="${VAL}"
	fi
    done

	MSG_ONLINE=
	if [ ${jid} -ne 0 ]; then
	    MSG_ONLINE="Jail in \Zuonline\Zn, show only on-the-fly options.\n"
	else
	    JARG="jname ${JARG}"
	fi

    # main menu loop
    while [ 1 ]; do
	MENU_OPTIONS=
	for i in ${JARG}; do
	    eval VAL=\$$i
	    if [ -z "${VAL}" ]; then
		MENU_OPTIONS="${MENU_OPTIONS} $i \"\""
	    else
		MENU_OPTIONS="${MENU_OPTIONS} $i ${VAL}"
	    fi
	done

	$DIALOG --colors --clear --title "Setup for ${jname}" --menu "${MSG_ONLINE}\nSelect action for ${jname}." -1 70 ${COUNT} \
	    ${MENU_OPTIONS} \
	    "COMMIT" "Save changes and quit" \
	    "EXIT" "EXIT!" 2> ${TMPFILE}
	retval=$?

	choice=`cat ${TMPFILE}`
	rm -f ${TMPFILE}
	case $retval in
	    0)
		[ $choice = "jname" ] && get_jname nosearch
		[ $choice = "host_hostname" ] && get_jail_fqdn
		[ $choice = "ip4_addr" ] && get_jail_ips
		[ $choice = "ver" ] && get_jail_base
		[ $choice = "devfs_ruleset" ] && get_devfs_ruleset
		[ $choice = "baserw" ] && get_jail_baserw
		[ $choice = "mount_src" ] && get_jail_mount_src
		[ $choice = "mount_ports" ] && get_jail_mount_ports
		[ $choice = "astart" ] && get_jail_astart
		[ $choice = "interface" ] && get_jail_oninterface
		[ $choice = "vnet" ] && get_jail_vnet
		[ $choice = "applytpl" ] && get_jail_applytpl
		[ $choice = "floatresolv" ] && get_jail_floatresolv
		[ $choice = "arch" ] && get_jail_arch
		[ $choice = "exec_timeout" ] && get_jail_exec_timeout
		[ $choice = "exec_fib" ] && get_jail_exec_fib
		[ $choice = "stop_timeout" ] && get_jail_stop_timeout
		[ $choice = "depend" ] && get_jail_depend
		[ $choice = "mount_fdescfs" ] && get_jail_mount_fdescfs
		[ $choice = "allow_dying" ] && get_jail_allow_dying
		[ $choice = "allow_procfs" ] && get_jail_allow_procfs
		[ $choice = "allow_tmpfs" ] && get_jail_allow_tmpfs
		[ $choice = "allow_zfs" ] && get_jail_allow_zfs
		[ $choice = "COMMIT" ] && commit
		[ $choice = "EXIT" ] && exit
	    ;;
	    *)
		exit
	    ;;
	esac
    done
}

### MAIN
msg_ok="Ok"
msg_cancel="Cancel"
. ${jrcconf}
[ $? -eq 1 ] && err 1 "${MAGENTA}No such jail: ${GREEN}${jname}${NORMAL}"

shift #skip for jname

if [ ${jid} -ne 0 ]; then
	JARG="ip4_addr"
else
	JARG="$@"
fi

mainmenu
