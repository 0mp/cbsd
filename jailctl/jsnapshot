#!/bin/sh
#v9.2.0
globalconf="${workdir}/cbsd.conf";
MYARG="mode"
MYOPTARG="jname snapname snapfs"
MYDESC="Jail snapshot management"
ADDHELP="mode can: list, create, destroy, destroyall, clone, rollback\n
snapfs can be: rsync\n
snapname can be: gettimeofday\n"

[ -f ${globalconf} ] || err 1 "no such conf file";
. ${globalconf}
. ${subr}
. ${inventory}
init $*


zfssnapshot_list()
{
    if [ -n "${jname}" ]; then
	if zfsroot ${jname}; then
	    /sbin/zfs list -r -t snapshot -o name,creation ${ZPOOL}/${jname}|tail +2 |sed s:${ZPOOL}\/${jname}@::g
	fi
    else
	/sbin/zfs list -r -t snapshot -o name,creation|tail +2
    fi
}


zfssnapshot_destroyall()
{
    if [ -n "${jname}" ]; then
	if zfsroot ${jname}; then
	    /sbin/zfs list -r -t snapshot -o name ${ZPOOL}/${jname}|tail +2 |sed s:${ZPOOL}\/${jname}@::g| while read _snap; do
		[ -n "${_snap}" ] && zfssnapshot_destroy ${_snap}
	    done
	fi
    else
	err 1 "jname is necessary"
    fi
}

rsyncsnapshot_list()
{
    err 1 "Rsync Not implemented"
}


ufssnapshot_list()
{
    err 1 "UFS Not implemented"
    fs_type="ufs"

    for snap in `snapinfo $fs_dir 2>/dev/null`; do
	if [ ! -f $snap ]; then
	    continue
	fi

	#   determine sizes
	fs_size=`df -k $fs_dir | tail -n1 | awk '{ print $2; }'`
	used_size=`df -k $fs_dir | tail -n1 | awk '{ print $3; }'`
	snap_size=`du -k $snap | awk '{ print $1; }'`

	#   determine snapshot creation time
	if [ ".$verbose" = .yes ]; then
	    snap_time=`stat -f "%B" $snap`
	    snap_time=`date -r "$snap_time" "+%Y-%m-%dT%H:%M"`
	fi

	#   calculate percentages
	snap_percent=`echo . | awk '{ printf("%.1f%%", (snap / fs) * 100); }' snap="$snap_size" fs="$fs_size"`
	used_percent=`echo . | awk '{ printf("%.1f%%", (used / fs) * 100); }' used="$used_size" fs="$fs_size"`

	#   canonicalize for output
	fs_size=`canonksize $fs_size`
	snap_size=`canonksize $snap_size`
	used_size=`canonksize $used_size`
	snap_file=`echo "$snap" | sed -e 's;.*/\([^/]*\)$;\1;'`

	#   output snapshot information
	if [ ".$verbose" = .yes ]; then
	    printf "%-15s %4s %8s %7s %8s %7s  %-15s %s\n" "$fs_dir" "$fs_type" "$used_size" "$used_percent" "$snap_size" "$snap_percent" "$snap_file" "$snap_time"
	else
	    printf "%-15s %8s %7s %8s %7s  %-15s\n" "$fs_dir" "$used_size" "$used_percent" "$snap_size" "$snap_percent" "$snap_file"
	fi
    done
}

zfssnapshot_create()
{
    [ -z "${jname}" ] && err 1 "Empty jname"
    [ -z "${snapname}" ] && err 1 "Empty snapname"

    [ "$snapname" = "gettimeofday" ] && snapname=`date "+%Y%m%d%H%M%S"`

    A=`cbsd jstatus jname=${jname}`
    [ $? -eq 0 ] && err 1 "No such jail ${jname}"
    zfs snapshot ${ZPOOL}/${jname}@${snapname}
}

ufssnapshot_create()
{
    err 1 "UFS Not implemented"
}

rsyncsnapshot_create()
{
    err 1 "Rsync Not implemented"
}

zfssnapshot_destroy()
{
    [ -n "${1}" ] && snapname=$1
    [ -z "${jname}" ] && err 1 "Empty jname"
    [ -z "${snapname}" ] && err 1 "Empty snapname"
    A=`cbsd jstatus jname=${jname}`
    [ $? -eq 0 ] && err 1 "No such jail ${jname}"
    zfs destroy ${ZPOOL}/${jname}@${snapname}
}

ufssnapshot_destroy()
{
    err 1 "UFS Not implemented"
}

rsyncsnapshot_destroy()
{
    err 1 "Rsync Not implemented"
}


zfssnapshot_rollback()
{
    [ -z "${jname}" ] && err 1 "Empty jname"
    [ -z "${snapname}" ] && err 1 "Empty snapname"
    A=`cbsd jstatus jname=${jname}`
    [ $? -eq 0 ] && err 1 "No such jail ${jname}"
    zfs rollback -r ${ZPOOL}/${jname}@${snapname}
}

ufssnapshot_rollback()
{
    err 1 "UFS Not implemented"
}

rsyncsnapshot_rollback()
{
    err 1 "Rsync Not implemented"
}

if [ -z "${snapfs}" ]; then
    if [ "$zfsfeat" = "1" ]; then
	snapfs="zfs"
	. $zfstool
	ZPOOL=`/sbin/zfs get -Ho value name ${jaildatadir}`
	[ -z "${ZPOOL}" ] && err 1 "Cant find working ZFS pool"
    else
	snapfs="ufs"
    fi
fi

case "${mode}" in
    "list") ${snapfs}snapshot_list ;;
    "create") ${snapfs}snapshot_create ;;
    "destroy") ${snapfs}snapshot_destroy ;;
    "destroyall") ${snapfs}snapshot_destroyall ;;
    "rollback") ${snapfs}snapshot_rollback ;;
esac

