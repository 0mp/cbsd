#!/bin/sh
#v9.2.0
globalconf="${workdir}/cbsd.conf";
MYARG=""
MYOPTARG="jname inter"
MYDESC="Start jail"
ADDHELP="inter=0 to prevent any questions and to accept answers by default\n"

[ -f ${globalconf} ] || err 1 "no such conf file";
. ${globalconf}
. ${subr}
. ${inventory}
. ${system}
. ${color}

init $*

master_afterstart()
{
    local i=0

    while : ; do
	eval CMD=\${master_afterstart${i}}
	[ -z "${CMD}" ] && break
	${ECHO} "${MAGENTA}${jname} Master exec afterstart: ${GREEN}${CMD}${NORMAL}"
	${CMD}
	i=$((i + 1))
    done
}

after_start()
{
    local i=0

    while : ; do
	eval CMD=\${exec_afterstart${i}}
	[ -z "${CMD}" ] && break
	${ECHO} "${MAGENTA}${jname} exec afterstart: ${GREEN}${CMD}${NORMAL}"
	chroot ${path} ${CMD}
	i=$((i + 1))
    done
}

master_prestart()
{
    local i=0

    while : ; do
	eval CMD=\${master_prestart${i}}
	[ -z "${CMD}" ] && break
	${ECHO} "${MAGENTA}${jname} master exec prestart: ${GREEN}${CMD}${NORMAL}"
	${CMD}
	i=$((i + 1))
    done
}


prestart()
{
    local i=0

    while : ; do
	eval CMD=\${exec_prestart${i}}
	[ -z "${CMD}" ] && break
	${ECHO} "${MAGENTA}${jname} exec prestart: ${GREEN}${CMD}${NORMAL}"
	chroot ${path} ${CMD}
	i=$((i + 1))
    done
}


fwcounter()
{
    ST=`cbsd jstatus jname=${jname}`
    [ $? -eq 1 ] || return 0


    if [ "${ipfw_enable}" = "1" -a -n "`sysctl -qn net.inet.ip.fw.enable`" ]; then
	${ECHO} "${MAGENTA}Setup: ${GREEN}FW counter${NORMAL}"
	TRAFDIR="${jailsysdir}/${jname}/${jname}-traffic"
	[ -d "${TRAFDIR}" ] || mkdir -p ${TRAFDIR}
	FWIN=$((ST * 2 + fwcount_st))
	FWOUT=$((FWIN + 1))
	FREE=0
	ipfw list ${FWIN} > /dev/null 2>&1 || ipfw list ${FWOUT} > /dev/null 2>&1 || FREE=1

	if [ "${FREE}" = "0" ]; then
	    ${ECHO} "${MAGENTA}ipfw counter ${FWIN} and/or ${FWOUT} busy. Skipping${NORMAL}"
	    return 1
	fi

	${ECHO} $FWIN > ${ftmpdir}/${jname}-fwin
	${ECHO} $FWOUT > ${ftmpdir}/${jname}-fwout
	### FWIN
	/sbin/ipfw -q add ${FWIN} count ip from any to me jail ${ST}
	### FWOUT
	/sbin/ipfw -q add ${FWOUT} count ip from me to any jail ${ST}
    fi
}

makeresolv()
{

    if [ -f ${data}/etc/resolv.conf ]; then
	cp ${data}/etc/resolv.conf ${data}/etc/resolv.conf.bak
	grep -v nameserver ${data}/etc/resolv.conf.bak > ${data}/etc/resolv.conf
    fi
    grep nameserver ${jailskeldir}/resolv.conf >> ${data}/etc/resolv.conf

}


# MAIN
if [ $# -gt 1 -a -z "${jname}" -a -z "${inter}" ]; then
# recursive
    JLIST=$*
    for jname in ${JLIST}; do
        if [ -n "${inter}" ]; then
    	    /usr/sbin/daemon -p ${ftmpdir}/jstart.${jname}.$$ /usr/local/bin/cbsd jstart jname=${jname} inter=$inter
    	else
    	    /usr/sbin/daemon -p ${ftmpdir}/jstart.${jname}.$$ /usr/local/bin/cbsd jstart jname=${jname}
    	fi
        cbsd pwait --pid=`cat ${ftmpdir}/jstart.${jname}.$$` --timeout=${parallel}
    done

    wait_for_jstart 

    err 0 "${MAGENTA}Multiple jstart: ${GREEN}done${NORMAL}"
fi


# MAIN
    [ -z "$jname" ] && jname=$1

    JAILRCCONF="${jailrcconfdir}/rc.conf_${jname}"

    [ ! -f  "${JAILRCCONF}" ] && err 1 "${MAGENTA}no conf rc.conf file for ${jname}${NORMAL}"

    . ${JAILRCCONF}

    [ $baserw -eq 1 ] && path=$data

    #Check for md vnode backend
    if [ -n "${mdsize}" -a "${mdsize}" != "0" ]; then
	MDFILE="${jailsysdir}/${jname}/image.dat"
	[ ! -f "${MDFILE}" ] && ${ECHO} "${MAGENTA}No such ${MDFILE} but mdsize flags is not null. Skip${NORMAL}" && continue
    fi

    ##### check for already running
    ST=`cbsd jstatus jname=${jname}`
    [ $? -ne 0 ] || err 1 "${MAGENTA}No such jail${NORMAL}"

    [ "${ST}" != "0" ] && err 1 "${MAGENTA}Jail already running: ${GREEN}jid ${ST}${NORMAL}"

    [ ! -d "${path}" ] && mkdir ${path}

    geniplist ${ip4_addr}

    if [ -n "${interface}" -a "${interface}" != "0" ]; then
	### CHECK FOR IP ####
	for ips in ${IPS}; do
	    A=`cbsd checkip ip=${ips} check=1`
	    IPUSE=$?
	    case ${IPUSE} in
		0)
		    ${ECHO} "${MAGENTA}ip ${ips} not in pool range${NORMAL}"
		    continue
		;;
		1) ;;
		2)
		    ${ECHO} "${MAGENTA}Ip ${ips} already exists in LAN${NORMAL}"
		    continue
		;;
		default)
		    ${ECHO} "${MAGENTA}Unkown error with ${ips}${NORMAL}"
		    continue
		;;
	    esac
	done
    fi

    #geniplist ${ip4_addr}
    if [ -n "${interface}" -a "${interface}" != "0" ]; then
	for pureip in ${IPS}; do
	    iface=`cbsd getnics-by-ip ip=${pureip}`
	    ipwmask ${pureip}
		if [ -n "$iface" ]; then
		    modconf ${JAILRCCONF} interface "${iface}"
		    break
		else
		    err 1 "${MAGENTA}Can't determine interfaces for:${GREEN} ${pureip}${NORMAL}"
		fi
	done
    fi

    #test for zfs mounted & mount if not
    case $zfsfeat in
	1) . $zfstool
	    zfsmnt ${path}
    	    [ $? -eq 2 ] && zfs mount "${ZPOOL}"
    	;;
    esac

    # MD area
    if [ -n "${mdsize}" -a "${mdsize}" != "0" ]; then
	cbsd mountmd mdfile="${MDFILE}" jroot="${data}"
    fi

    if [ "${ver}" != "empty" ]; then
	[  -d "${data}/etc" -o -d "${data}/bin" ] || err 1 "${MAGENTA}No such data structure: ${GREEN}${data}${NORMAL}"
    fi

    # cp local default resolv.conf skel
    if [ ${floatresolv} -eq 1 -a "${ver}" != "empty" ]; then
	makeresolv
    fi

    if [ $applytpl -eq 1 -a "${ver}" != "empty" ]; then
	modconf 0 ${data}/etc/make.conf WITH_PKGNG yes
	modconf 0 ${data}/etc/make.conf WRKDIRPREFIX /tmp
	modconf ${data}/etc/rc.conf hostname "${host_hostname}"
    fi

    MOUNTOPT=""

    if [ "$srcmount" = "1" ]; then
	SRCDIR="${srcdir}/src_${ver}/src"
	MOUNTOPT="${MOUNTOPT} -s ${SRCDIR}"
    fi

    if [ "$objmount" = "1" ]; then
	SRCDIR="${srcdir}/obj_${arch}_${ver}/obj"
	MOUNTOPT="${MOUNTOPT} -o ${SRCDIR}"
    fi

    if [ "$kernelmount" = "1" ]; then
	#/usr/jails/basejail/kernel_GENERIC_amd64_10.0/boot
	SRCDIR="${basejaildir}/kernel_GENERIC_${arch}_${ver}/boot/kernel"
	MOUNTOPT="${MOUNTOPT} -k ${SRCDIR}"
    fi

    if [ "$portsmount" = "1" ]; then
	SRCDIR="/usr/ports"
	MOUNTOPT="${MOUNTOPT} -p ${SRCDIR}"
    fi

    [ "${ver}" != "empty" ] && mountbase ${MOUNTOPT}

    mountfstab

    master_prestart
    prestart

    if [ "$ver" = "empty" ]; then
	path="/"
	exec_start="${jailsysdir}/${jname}/run.sh"
    else
	[ ! -d "${data}/var/cache/pkg" ] && mkdir -p "${data}/var/cache/pkg"
    fi

    cbsd makejconf jname=${jname} out=${ftmpdir}/${jname}.conf

    #rctl area
    cbsd jrctl jname=$jname mode=set

    [ -z "${nice}" ] && nice="0"

    ${ECHO} "${MAGENTA}Starting jail: ${GREEN}${jname}, parallel timeout=${parallel}${NORMAL}"
    /usr/sbin/daemon -p ${ftmpdir}/jstart.${jname}.$$ /usr/bin/nice -n ${nice} /usr/sbin/jail -f ${ftmpdir}/${jname}.conf -c ${jname}
    cbsd pwait --pid=`cat ${ftmpdir}/jstart.${jname}.$$` --timeout=${parallel}

    #if [ -n "$devfs_ruleset" ]; then
    #    . /etc/rc.subr
    #    devfs_rulesets_from_file ${etcdir}/devfs.rules
    #    devfs -m ${path}/dev rule -s ${devfs_ruleset} applyset
    #fi
    #/usr/sbin/jail -c path=$path host.hostname=$host_hostname ip4.addr=${COMMAIPS4} ip6.addr=${COMMAIPS6} allow.socket_af allow.chflags allow.raw_sockets allow.sysvipc command=${exec_start}

    # make id file
    UNDHOSTNAME=`echo ${hostname} |tr  "." "_"`
    FID="/var/run/jail_${UNDHOSTNAME}.id"
    echo ${ST} > ${FID}
    [ -n "${ddns_zone_list}" ] && cbsd ddns mode=add jname=${jname}
    fwcounter
    sync
    master_afterstart
    after_start

