#!/usr/local/bin/cbsd
#v10.0.2
globalconf="${workdir}/cbsd.conf";
MYARG=""
MYOPTARG="jname inter"
MYDESC="Start jail"
ADDHELP="inter=0 to prevent any questions and to accept answers by default\n"
CBSDMODULE="jail"

[ -f ${globalconf} ] || err 1 "no such conf file";
. ${globalconf}
. ${subr}
. ${inventory}
. ${system}
. ${color}
. ${strings}
. ${workdir}/universe.subr
. ${etcdir}/buildworld.conf

init $*

master_afterstart()
{
    local i=0

    while : ; do
	eval CMD=\${master_afterstart${i}}
	[ -z "${CMD}" ] && break
	${ECHO} "${MAGENTA}${jname} Master exec afterstart: ${GREEN}${CMD}${NORMAL}"
	${CMD}
	i=$((i + 1))
    done
}

after_start()
{
    local i=0

    while : ; do
	eval CMD=\${exec_afterstart${i}}
	[ -z "${CMD}" ] && break
	${ECHO} "${MAGENTA}${jname} exec afterstart: ${GREEN}${CMD}${NORMAL}"
	chroot ${path} ${CMD}
	i=$((i + 1))
    done
}

master_prestart()
{
    local i=0

    while : ; do
	eval CMD=\${master_prestart${i}}
	[ -z "${CMD}" ] && break
	${ECHO} "${MAGENTA}${jname} master exec prestart: ${GREEN}${CMD}${NORMAL}"
	${CMD}
	i=$((i + 1))
    done
}


prestart()
{
    local i=0

    while : ; do
	eval CMD=\${exec_prestart${i}}
	[ -z "${CMD}" ] && break
	${ECHO} "${MAGENTA}${jname} exec prestart: ${GREEN}${CMD}${NORMAL}"
	chroot ${path} ${CMD}
	i=$((i + 1))
    done
}

# return in $FWNUM first free ipfw num
# return 0 if not available
get_first_available_fwcount()
{

    for i in `seq ${fwcount_st} ${fwcount_end}`; do
	/sbin/ipfw -q show ${i} > /dev/null 2>&1
	if [ $? -ne 0 ]; then
	    FWNUM=$i
	    return 0
	fi
    done

    [ $i -eq ${fwcount_end} ] && FWNUM=0
}

fwcounter()
{
    [ ${jid} -eq 0 ] && return 0
    [ "${ipfw_enable}" = "0" -a -z "`sysctl -qn net.inet.ip.fw.enable`" ] && return 0
	#FWIN
	get_first_available_fwcount

	if [ $FWNUM -eq 0 ]; then
	    ${ECHO} "${MAGENTA}Warning: FW counter not available in ${fwcount_st}-${fwcount_end} range. Skip${NORMAL}"
	    return 0
	fi

	${ECHO} "${MAGENTA}Setup: ${GREEN}FW counter${NORMAL}"
        /sbin/ipfw -q add ${FWNUM} count ip from any to me jail ${jid} && echo ${FWNUM} > ${ftmpdir}/${jname}-fwin

	#FWOUT
	get_first_available_fwcount

	if [ $FWNUM -eq 0 ]; then
            ${ECHO} "${MAGENTA}Warning: FW counter not available in ${fwcount_st}-${fwcount_end} range. Skip${NORMAL}"
            return 0
        fi

	/sbin/ipfw -q add ${FWNUM} count ip from me to any jail ${jid} && ${ECHO} ${FWNUM} > ${ftmpdir}/${jname}-fwout
}

makeresolv()
{
    local _line

    [ ! -f "${jailskeldir}/etc/resolv.conf" ] && return 0

    if [ -f "${data}/etc/resolv.conf" ]; then
	    cat ${jailskeldir}/etc/resolv.conf |while read _line; do
		[ -z "${_line}" ] && continue
		sed -i '' "/${_line}/d" ${data}/etc/resolv.conf
	    done
    fi

    cat ${jailskeldir}/etc/resolv.conf >> ${data}/etc/resolv.conf

}


# MAIN for multiple jails
if [ $# -gt 1 -a -z "${jname}" -a -z "${inter}" ]; then
# recursive
    JLIST=$*
    for jname in ${JLIST}; do
        if [ -n "${inter}" ]; then
    	    /usr/sbin/daemon -p ${ftmpdir}/jstart.${jname}.$$ /usr/local/bin/cbsd jstart jname=${jname} inter=$inter
    	else
    	    /usr/sbin/daemon -p ${ftmpdir}/jstart.${jname}.$$ /usr/local/bin/cbsd jstart jname=${jname}
    	fi
        cbsd pwait --pid=`cat ${ftmpdir}/jstart.${jname}.$$` --timeout=${parallel}
    done

    wait_for_jstart

    err 0 "${MAGENTA}Multiple jstart: ${GREEN}done${NORMAL}"
fi


# MAIN
    [ -z "$jname" ] && jname=$1

    . ${jrcconf}
    [ $? -eq 1 ] && err 1 "${MAGENTA}No such jail: ${GREEN}${jname}${NORMAL}"
    [ ${status} -eq 2 ] && err 1 "${MAGENTA}Jail in slave mode. Please ${GREEN}cbsd jswmode mode=master${MAGENTA} first${NORMAL}"
    [ $jid -ne 0 ] && err 1 "${MAGENTA}Jail already running, jid: ${GREEN}${jid}${NORMAL}"

    init_target_arch
    init_basedir

    #Check for md vnode backend
    if [ -n "${mdsize}" -a "${mdsize}" != "0" ]; then
	MDFILE="${jailsysdir}/${jname}/image.dat"
	[ ! -f "${MDFILE}" ] && ${ECHO} "${MAGENTA}No such ${MDFILE} but mdsize flags is not null. Skip${NORMAL}" && continue
    fi

    cbsd jcleanup jname=${jname}
    [ ! -d "${path}" ] && mkdir ${path}

    geniplist ${ip4_addr}

	if [ -n "${interface}" -a "${interface}" != "0" -a ${vnet} -eq 0 ]; then
	    ### CHECK FOR IP ####
	    for ips in ${IPS}; do
		cbsd checkip ip=${ips} check=1
		IPUSE=$?
		case ${IPUSE} in
		    0)
			${ECHO} "${MAGENTA}ip ${ips} not in pool range${NORMAL}"
			continue
			;;
		    2)
			${ECHO} "${MAGENTA}Ip ${ips} already exists in LAN${NORMAL}"
			continue
			;;
		esac
	    done
	fi

    if [ $vnet -eq 1 ]; then
	# for vnet we can make another action
	. ${vimageconf}
	# when ip=0 and interface=auto we must use default interface for upstream
	[ "${ip4_addr}" = "0" -a "${interface}" = "auto" ] && interface=`cbsd getnics-by-ip ip=0.0.0.0`

	if ! mybridge=`get_my_device bridge ${interface}`; then
	    err 1 "${MAGENTA}Error: Cant get_my_device: ${mybridge}${NORMAL}"
	fi
	myepair=`get_my_epair ${mybridge}`
	[ $? -eq 1 ] && err 1 "${MAGENTA}Error: Cant get_my_epair by: ${GREEN}${mybridge}${NORMAL}"
	ifconfig ${myepair}a description ${jname} up
#	dhclient ${myepair}b
	trap "ifconfig ${myepair}a destroy" HUP INT ABRT BUS TERM EXIT
    fi	# vnet -eq 1

    #test for zfs mounted & mount if not
    case $zfsfeat in
	1) . $zfstool
	    zfsmnt ${data}
    	    [ $? -eq 2 ] && zfs mount "${ZPOOL}"
    	;;
    esac

    if [ $baserw -eq 1 ]; then
	path=$data
	[ ! -f "${path}/bin/sh" ] && switch_baserw ${path} 1
	[ -f ${mount_fstab} ] && rm -f ${mount_fstab}
    fi

    if [ $baserw -eq 0 -a ! -f "${mount_fstab}" ]; then
	switch_baserw ${path} 2
    fi

    # MD area
    if [ -n "${mdsize}" -a "${mdsize}" != "0" ]; then
	cbsd mountmd mdfile="${MDFILE}" jroot="${data}"
    fi

    if [ "${ver}" != "empty" ]; then
	[  -d "${data}/etc" -o -d "${data}/bin" ] || err 1 "${MAGENTA}No such data structure: ${GREEN}${data}${NORMAL}"
    fi

    # cp local default resolv.conf skel
    if [ ${floatresolv} -eq 1 -a "${ver}" != "empty" ]; then
	makeresolv
    fi

    if [ $applytpl -eq 1 -a "${ver}" != "empty" ]; then
	[ `grep ^WITH_PKGNG= ${data}/etc/make.conf|wc -l` = 0 ] && sysrc -qf ${data}/etc/make.conf WITH_PKGNG=yes >/dev/null
	[ `grep ^WRKDIRPREFIX= ${data}/etc/make.conf|wc -l` = 0 ] && echo WRKDIRPREFIX=/tmp >> ${data}/etc/make.conf
	sysrc -qf ${data}/etc/rc.conf hostname="${host_hostname}" >/dev/null
    fi

    MOUNTOPT=""

    if [ "$mount_src" = "1" ]; then
	SRCDIR="${srcdir}/src_${ver}/src"
	MOUNTOPT="${MOUNTOPT} -s ${SRCDIR}"
    fi

    if [ "$mount_obj" = "1" ]; then
	SRCDIR="${srcdir}/obj_${arch}_${ver}/obj"
	MOUNTOPT="${MOUNTOPT} -o ${SRCDIR}"
    fi

    if [ "$mount_kernel" = "1" ]; then
	SRCDIR="${basejaildir}/kernel_GENERIC_${arch}_${ver}/boot/kernel"
	MOUNTOPT="${MOUNTOPT} -k ${SRCDIR}"
    fi

    if [ "$mount_ports" = "1" ]; then
	SRCDIR="/usr/ports"
	MOUNTOPT="${MOUNTOPT} -p ${SRCDIR}"
    fi

    [ "${ver}" != "empty" ] && mountbase -v ${ver} -a ${arch} ${MOUNTOPT}

    mountfstab

    master_prestart
    prestart

    if [ "$ver" = "empty" ]; then
	path="/"
	exec_start="${jailsysdir}/${jname}/run.sh"
    else
	[ ! -d "${data}/var/cache/pkg" ] && mkdir -p "${data}/var/cache/pkg"
    fi

    #determine that jail is FreeBSD. Useful for vnet operation in makejconf and
    is_freebsd=0

    if [ $baserw -eq 1 ]; then
	elftest=${data}/bin/sh
    else
	elftest="${BASE_DIR}/bin/sh"
    fi
    [ -f "${elftest}" ] && osname=`${miscdir}/elf_tables --osname ${elftest}`

    [ "${osname}" = "freebsd" ] && is_freebsd=1

    # check for freshed version of the base via elf from /bin/sh
    if [ ${is_freebsd} -eq 1 -a ${baserw} -eq 1 ]; then
	
	if [ -n ${BASE_DIR} -a -f "${BASE_DIR}/bin/sh" ]; then
	    baseelf=`${miscdir}/elf_tables --ver ${BASE_DIR}/bin/sh 2>/dev/null`
	    jailelf=`${miscdir}/elf_tables --ver ${elftest} 2>/dev/null`
	    if [ ${baseelf} -gt ${jailelf} ]; then
		${ECHO} "${BOLD}Notice: ${MAGENTA}You have a more recent version of the base in ${BASE_DIR} (${GREEN}${baseelf}${MAGENTA}/${GREEN}${jailelf}${MAGENTA}).${NORMAL}"
		${ECHO} "${BOLD}Notice: ${MAGENTA}Please consider upgrading base via ${GREEN}cbsd jupgrade${NORMAL}"
	    fi
	fi
    fi

    set -e
    cbsd makejconf jname=${jname} out=${ftmpdir}/${jname}.conf ip6wa=${HAVE_IPV6} epair=${myepair}b fbsd=${is_freebsd}
    set +e

    #rctl/limits area
    cbsd jrctl jname=$jname mode=set
    LIMITS_EXTRA="${jailsysdir}/${jname}/jail.limits.extra"
    [ -f "${LIMITS_EXTRA}"  ] && . ${LIMITS_EXTRA}
    [ -z "${nice}" ] && nice="0"
    [ "${nice}" != "0" ] && ${ECHO} "${MAGENTA}jail renice: ${GREEN}${nice}${NORMAL}"
    #

    ${ECHO} "${MAGENTA}Starting jail: ${GREEN}${jname}, parallel timeout=${parallel}${NORMAL}"
    /usr/sbin/daemon -p ${ftmpdir}/jstart.${jname}.$$ /usr/bin/nice -n ${nice} /usr/sbin/jail -f ${ftmpdir}/${jname}.conf -c ${jname}
    trap "" HUP INT ABRT BUS TERM EXIT
    cbsd pwait --pid=`cat ${ftmpdir}/jstart.${jname}.$$` --timeout=${parallel}

    #if [ -n "$devfs_ruleset" ]; then
    #    . /etc/rc.subr
    #    devfs_rulesets_from_file ${etcdir}/devfs.rules
    #    devfs -m ${path}/dev rule -s ${devfs_ruleset} applyset
    #fi
    #/usr/sbin/jail -c path=$path host.hostname=$host_hostname ip4.addr=${COMMAIPS4} ip6.addr=${COMMAIPS6} allow.socket_af allow.chflags allow.raw_sockets allow.sysvipc command=${exec_start}

    # make id file
    UNDHOSTNAME=`echo ${hostname} |tr  "." "_"`
    FID="/var/run/jail_${UNDHOSTNAME}.id"
    echo ${ST} > ${FID}
    [ -n "${ddns_zone_list}" ] && cbsd ddns mode=add jname=${jname}
    sync
    master_afterstart
    after_start

    get_jid
    if [ $myjid -gt 0 ]; then
	status="1"
    else
	status="0"
    fi
    cbsdsql local UPDATE jails SET jid=$myjid,status=$status where jname=\"${jname}\"
    rm -f ${ftmpdir}/${jname}.conf
    fwcounter
    [ ${myjid} -gt 0 -a ${cpuset} != "0" ] && cpuset -c -l ${cpuset} -j ${myjid}

