#!/usr/local/bin/cbsd
#v10.0.6
globalconf="${workdir}/cbsd.conf";
MYARG=""
MYOPTARG="jname remote inter src_session"
MYDESC="Exec login into jail"
CBSDMODULE="jail"
ADDHELP="remote=1 - prevent to searching in remote node base. For the avoid the looping\n"
EXTHELP="wf_jlogin.html"

# Login by jid not supported yet

[ -f "${globalconf}" ] || err 1 "no such conf file";
. ${globalconf}
. ${subr}
. ${strings}
init $*

readconf jlogin.conf

select_jail_by_list()
{
	local _res _id i=0

	local sqldelimer=" "
	eval $( env NOCOLOR=1 jls alljails=1 shownode=1 display=jname,status header=0 |grep On$ |while read nodename jname status; do
		echo "local nodename${i}=\"${nodename}\"
		echo "local jname${i}=\"${jname}\"
		i=$(( i + 1 ))
	done )

	for i in $(seq 0 255); do
		eval _mynode="\$nodename${i}"
		[ -z "${_mynode}" ] && break
		[ "${_mynode}" = "${nodename}" ] && _mynode="${BOLD}local${NORMAL}"
		eval _myjname="\$jname${i}"
		[ -z "${_myjname}" ] && break;
		[ $i -eq 0 ] && ${ECHO} "${MAGENTA}List of online jails:${NORMAL}"
		${ECHO} "${BOLD}${i} .. ${GREEN}${_myjname} ${NORMAL}on ${GREEN}${_mynode}${NORMAL}"
	done

	[ $i -eq 0 ] && err 1 "${MAGENTA}No jails found${NORMAL}"
	echo
	printf "${BOLD}Enter id to login:${NORMAL} "
	set -e
	read _id
	set +e
	if ! is_number ${_id}; then
		eval jname="\$jname${_id}"
	else
		err 1 "${MAGENTA}Not number{NORMAL}"
	fi

	remote=2 # for autoremote
}


try_remote()
{
	[ "${remote}" = "1" ] && err 1 "${MAGENTA}No such jail${NORMAL}"
	RHST=$( jwhereis ${jname}|head -n1 )
	[ -z "${RHST}" ] && err 1 "No such jail for login"

	# we don't need for interactive when come with remote=2 from select_jail_by_list
	if [ "${remote}" != "2" -a "${always_rlogin}" = "0" ]; then
		getyesno "Found jail on remote node: ${RHST}. Try to login?"
		[ $? -eq 1 -o $? -eq 3 ] && err 1 "No such jail for login"
	fi

	rexe node=${RHST} cbsd jlogin src_session=${nodename} jname=$jname remote=1
	err 0 ""
}

init_tmux()
{
	if [ "${tmux_login}" != "1" -o -z "${src_session}" ]; then
		tmux_login=0
		return 0
	fi

	tmuxcmd=$( which tmux )

	if [ -z "${tmuxcmd}" ]; then
		tmux_login=0
		return 0
	fi

	src_session="`whoami`-nodename"
	session_name="${src_session}-${jname}"
}

[ -z "$jname" ] && jname=$1
[ -z "$jname" ] && select_jail_by_list
[ -z "$jname" ] && err 1 "${MAGENTA}Please specify jname as argument${NORMAL}"
[ -z "${remote}" ] && remote=0

validate_jname ${jname}
[ $? -ne 1 ] && err 1 "${MAGENTA}Bad jname${NORMAL}"

. ${jrcconf}
[ $? -eq 1 ] && try_remote
[ "${emulator}" = "bhyve" ] && err 1 "${MAGENTA}For bhyve jail use: ${GREEN}cbsd blogin=${jname} ${MAGENTA}instead${NORMAL}"
[ "$baserw" = "1" ] && path=$data
[ $jid -eq 0 ] && err 1 "Not running"

#rctl/limits area
. ${workdir}/rctl.subr

[ -z "${nice}" ] && nice="0"
#

if [ ${exec_fib} -eq 0 ]; then
	SETFIB=""
else
	SETFIB="setfib ${exec_fib}"
fi

if [ "${cpuset}" = "0" ]; then
	CPUSET=""
else
	CPUSET="cpuset -c -l ${cpuset}"
fi

if [ "${emulator}" != "0" -a -n "${emulator}" ]; then
	. ${workdir}/emulator.subr
	init_usermode_emul
	LOGIN_STR="${emultest} login -f root"
else
	LOGIN_STR="login -f root"
fi

jexec="/usr/bin/nice -n ${nice} ${SETFIB} ${CPUSET} /usr/sbin/jexec ${jid} ${LOGIN_STR}"

init_tmux

if [ $tmux_login -eq 1 ]; then
	${tmuxcmd} list-sessions | /usr/bin/grep -qwF "${session_name}:"
	if [ $? -eq 1 ]; then
		${tmuxcmd} new -s "${session_name}" "eval ${jexec}"
	else
		${tmuxcmd} attach-session -t "${session_name}"
	fi
else
	eval ${jexec}
fi
