#!/bin/sh
#v9.2.1
export workdir=${workdir:-"/usr/jails"}
export distdir=${distdir:-"/usr/local/cbsd"}
globalconf="${distdir}/cbsd.conf";
MYLOCK="/tmp/initenv.lock"
MYDESC="Node re-initialization"
MYARG=""
MYOPTARG=""

if [ ! -f ${globalconf} ]; then
    ${ECHO} "${MAGENTA}no such conf file${NORMAL}";
    exit
fi


. ${globalconf}
. ${distdir}/nc.subr
. ${distdir}/tools.subr
. ${distdir}/initenv.subr
. ${distdir}/ansiicolor.subr

[ "$1" = "--help" ] && err 0 "${MYDESC}"

desc_question()
{
    IP=`/sbin/ifconfig \`route -n get 0.0.0.0 | awk '/interface/{print $2}'\` |awk '/inet /{print $2}'|head -n1`
    [ -z "${IP}" ] && IP="8.8.8.8"

    case "$1" in
	"nodename")
	    DEFAULT=`hostname`
	    ${ECHO} "${MAGENTA}Hint: short form for node name, e.g. hostname:${GREEN} ${DEFAULT}${NORMAL}"
	    read answ
	    [ -z "$answ" ] && answ="${DEFAULT}"
	    return 0
	;;
	"nat_enable")
	    DEFAULT=0
	    if ! getyesno "${MAGENTA}Configure NAT for RFC1918 Network?"; then
		answ=0
		return 0
	    fi
	    configure_nat initenv
	    [ -z "$answ" ] && answ="${DEFAULT}"
	    return 0
	;;
	"nodeip")
	    DEFAULT="${IP}"
	    ${ECHO} "${MAGENTA}Hint: Persistent (when possible) managment IP address for node interconnection. e.g: ${GREEN}${DEFAULT}${NORMAL}"
	    read answ
	    [ -z "$answ" ] && answ="${DEFAULT}"
	    return 0
	;;
	"jnameserver")
	    DEFAULT="${IP},8.8.8.8"
	    ${ECHO} "${MAGENTA}Hint: Default DNS nameserver (comma separated for multiple) for jails resolv.conf, e.g.: ${GREEN}${DEFAULT}${NORMAL}"
	    read answ
	    [ -z "$answ" ] && answ="${DEFAULT}"
	    return 0
	;;
	"nodeippool")
	    DEFAULT="10.0.0.0/16 ${IP}/29"
	    ${ECHO} "${MAGENTA}Hint: Pool of IP addresses from which jail can work${NORMAL}"
	    ${ECHO} "${MAGENTA}Use space as delimer for  multiple networks, e.g.: ${GREEN}${DEFAULT}${NORMAL}"
	    read answ
	    [ -z "$answ" ] && answ="${DEFAULT}"
	    return 0
	;;
	"natip")
	    DEFAULT="${IP}"
	    ${ECHO} "${MAGENTA}Hint: Set IP address as the aliasing NAT address, e.g: ${GREEN}${DEFAULT}${NORMAL}"
	    read answ
	    [ -z "$answ" ] && answ="${DEFAULT}"
	    return 0
	;;
	"fbsdrepo")
	    if getyesno "${MAGENTA}Shall i use the official FreeBSD repository for fetching base via repo?"; then
		answ=1
	    else
		answ=0
	    fi
	    return 0
	;;
	"zfsfeat")
	    if getyesno "${MAGENTA}You running on ZFS-based system. Shall i use ZFS features?${NORMAL}"; then
		answ=1
	    else
		answ=0
	    fi
	    return 0
	;;
	"mdtmp")
	    if getyesno "${MAGENTA}Do you want to use memory disk (8 mb default) for small temporary operation? e.g: ${GREEN}1${NORMAL}"; then
		answ=1
	    else
		answ=0
	    fi
	    return 0
	;;
	"stable")
	    DEFAULT="0"
	    ${ECHO} "${MAGENTA}If you want to use STABLE_X branch instead of RELEASE_X_Y for base and kernel, choose '1', e.g: ${GREEN}${DEFAULT} ${MAGENTA}(use release)${NORMAL}"
	    read answ
	    [ -z "${answ}" ] && answ="${DEFAULT}"
	    return 0
	;;
	"parallel")
	    DEFAULT="5"
	    ${ECHO} "${MAGENTA}Do you want to stop/start jail in parallel mode? (0 - no parallel or positive value (in seconds) as timeout for next parallel sequence) e.g: ${GREEN}${DEFAULT}${NORMAL}"
	    read answ
	    [ -z "${answ}" ] && answ="${DEFAULT}"
	    return 0
	    ;;
	*)
	    return 1
	    ;;
    esac
}

# check for old install and if exist - execute scripts from upgrade directory
phase0()
{
    local myversion cbsd_enable cbsd_workdir workdir

    . ${distdir}/${localcbsdconffile}
    newver="${myversion}"

    . /etc/rc.conf

    [ -z "${cbsd_enable}" -o -z "${cbsd_workdir}" ] && return 0

    [ ! -f "${cbsd_workdir}/cbsd.conf" ] && return 0

    workdir="${cbsd_workdir}"
    . "${cbsd_workdir}/cbsd.conf"

    oldver="${myversion}"

    ${ECHO} "${MAGENTA}[Stage 0:${GREEN} Upgrading and migration data from ${oldver} to ${newver}${MAGENTA}]${NORMAL}"

    [ -d "${distdir}/upgrade" ] && find ${distdir}/upgrade/ -type f -depth 1 -name patch-\* -exec {} \;
}

phase1()
{
    . ${distdir}/${localcbsdconffile}

    ${ECHO} "${MAGENTA}[Stage 1:${GREEN} account & dir hier${MAGENTA}]${NORMAL}"
    /usr/bin/id ${cbsduser} > /dev/null 2>&1

    if [ $? -eq 1 ]; then
	/usr/sbin/pw groupadd ${cbsduser}
	/usr/sbin/pw useradd ${cbsduser} -g ${cbsduser} -d ${workdir}
	change_cbsdpw
    fi

DIRHIER="${workdir} \
${jobdir} \
${spooldir} \
${taskdir} \
${srcdir} \
${basejaildir} \
${jaildatadir} \
${jaildir} \
${jailrcconfdir} \
${jailfstabdir} \
${jailsysdir}
${tmpdir} \
${ftmpdir} \
${templatedir} \
${aticdir} \
${dbdir} \
${sharedir} \
${jailskeldir} \
${sudoexecdir} \
${bindir} \
${logdir} \
${etcdir} \
${jailctldir} \
${nodectl} \
${rcddir} \
${sbindir} \
${systemdir} \
${toolsdir} \
${miscdir} \
${sshdir} \
${rsshdir} \
${vardir} \
${rundir} \
${crondir} \
${crontabsdir} \
${libdir} \
${logdir} \
${importdir} \
${exportdir}"

    for _dir in ${DIRHIER}; do
	if [ ! -d ${_dir} ]; then
	    /bin/mkdir -p ${_dir} && ${ECHO} "${MAGENTA}new dir created: ${GREEN}${_dir}${NORMAL}"
	fi
    done
}

phase2()
{
    local _dir _ldir _rdir _file _dirhier _d

    ${ECHO} "${MAGENTA}[Stage 2: ${GREEN}build tools${MAGENTA}]${NORMAL}"

    if [ ! -f ${etcdir}/rsyncd.conf ]; then
	cat > ${etcdir}/rsyncd.conf << EOF
pid file = /var/run/cbsdrsyncd.pid
uid = root
gid = wheel
list = no
port = 1873

EOF
    fi

    /usr/bin/cc ${distdir}/bin/cbsdsftp.c -o ${bindir}/cbsdsftp -lssh2 -L/usr/local/lib -I/usr/local/include
    /usr/bin/cc ${distdir}/bin/cbsdssh.c -o ${bindir}/cbsdssh -lssh2 -L/usr/local/lib -I/usr/local/include
    /usr/bin/cc ${distdir}/bin/cbsdlogtail.c -o ${bindir}/cbsdlogtail
    /usr/bin/cc ${distdir}/bin/cfetch.c -o ${bindir}/cfetch -lfetch

    installne "-o ${cbsduser} -g ${cbsduser} -m 555" ${distdir}/bin/rexe ${bindir}/rexe

    /usr/bin/cc ${distdir}/bin/nodepinger.c -o ${bindir}/nodepinger
    /usr/bin/cc ${distdir}/sbin/netmask.c -o ${sbindir}/netmask
    /usr/bin/cc ${distdir}/sbin/ncctld.c -o ${sbindir}/ncctld
    /usr/bin/cc ${distdir}/sbin/nodeinetd.c -o ${sbindir}/nodeinetd
    /usr/bin/cc ${distdir}/sbin/cbsd.c -o ${sbindir}/cbsd
    /usr/bin/cc ${distdir}/tools/ipfw-tables.c -o ${toolsdir}/ipfw-tables
    /usr/bin/cc ${distdir}/tools/pwait.c -o ${toolsdir}/pwait

    cc ${distdir}/tools/nodesql.c ${distdir}/tools/gentools.c ${distdir}/tools/sqlhelper.c -lsqlite3 -L/usr/local/lib -I/usr/local/include -o ${toolsdir}/nodesql
    cc ${distdir}/tools/inventorysql.c ${distdir}/tools/gentools.c ${distdir}/tools/sqlhelper.c -lsqlite3 -L/usr/local/lib -I/usr/local/include -o ${toolsdir}/inventorysql

    cc ${distdir}/sbin/cbsdtaskd/cbsdtaskd.c -o ${sbindir}/cbsdtaskd
    cc ${distdir}/sbin/cbsdtaskd/cbsdtask.c -o ${sbindir}/cbsdtask

    #### CP SCRIPTS with override and executable
    _dirhier="jailctl \
	    nodectl \
	    rc.d \
	    misc \
	    system \
	    tools"

    for _d in ${_dirhier}; do
	_ldir="${workdir}/${_d}"
	_rdir="${distdir}/${_d}"
	[ -d "${_ldir}" ] || mkdir -p ${_ldir}
	    for _file in `/usr/bin/find ${_rdir} -depth 1 -maxdepth 1 -type f -exec basename {} \;`; do
		installne "-o ${cbsduser} -g ${cbsduser} -m 555" ${_rdir}/${_file} ${_ldir}/${_file}
	    done
    done

    #### CP SCRIPTS with override and readonly
    _dirhier="share/dialog"

    for _d in ${_dirhier}; do
	_ldir="${workdir}/${_d}"
	_rdir="${distdir}/${_d}"
	[ -d "${_ldir}" ] || mkdir -p ${_ldir}
	    for _file in `/usr/bin/find ${_rdir} -depth 1 -maxdepth 1 -type f -exec basename {} \;`; do
		installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${_rdir}/${_file} ${_ldir}/${_file}
	    done
    done

    /usr/bin/cc ${distdir}/misc/bin/chk_arp_byip.c -o ${miscdir}/chk_arp_byip

    #### CP SCRIPTS without override
    _dirhier="share \
	share/jail-skel \
	share/base2pkg \
	share/helpers \
	etc"

    cat > ${etcdir}/cbsd_sudoers <<EOF
Defaults     env_keep += "workdir DIALOG"
Cmnd_Alias   CBSD_CMD = ${sudoexecdir}/*,/usr/local/cbsd/sudoexec/*
${cbsduser}   ALL=(ALL) NOPASSWD: CBSD_CMD
EOF

    for _d in ${_dirhier}; do
	_ldir="${workdir}/${_d}"
	_rdir="${distdir}/${_d}"
	[ ! -d "${_ldir}" ] && mkdir -p ${_ldir}
	for _file in `/usr/bin/find ${_rdir} -depth 1 -maxdepth 1 -type f -exec basename {} \;`; do
	    [ ! -f "${_ldir}/${F}" ] && install -o ${cbsduser} -g ${cbsduser} -m 444 ${_rdir}/${_file} ${_ldir}/${_file}
	done
    done

    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${globalconf} ${workdir}/cbsd.conf
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/nc.subr ${workdir}/nc.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/zfs.subr ${workdir}/zfs.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/tools.subr ${workdir}/tools.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/mdtools.subr ${workdir}/mdtools.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/initenv.subr ${workdir}/initenv.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/ansiicolor.subr ${workdir}/ansiicolor.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/dialog.subr ${workdir}/dialog.subr

    if install -o ${cbsduser} -g ${cbsduser} -m 555 ${distdir}/bin/cbsd ${bindir}/cbsd; then
	modconf $bindir/cbsd workdir "\${workdir:-\"${workdir}\"}"
	/bin/echo "go \$@" >> ${bindir}/cbsd
    fi

    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/securecmd ${workdir}/securecmd
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/system.subr ${workdir}/system.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/jfs.subr ${workdir}/jfs.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/build.subr ${workdir}/build.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/settings-tui.subr ${workdir}/settings-tui.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/distccache.subr ${workdir}/distccache.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/base2pkg.subr ${workdir}/base2pkg.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/mailtools.subr ${workdir}/mailtools.subr

    installne "-o ${cbsduser} -g ${cbsduser} -m 555" ${distdir}/bin/sbsd ${bindir}/sbsd
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/share/jail-arg ${sharedir}/jail-arg

    [ -d /usr/local/etc/sudoers.d ] || mkdir /usr/local/etc/sudoers.d

    cp -Rp ${distdir}/etc/periodic ${etcdir}/
    cp -Rpn ${distdir}/etc/scenes ${etcdir}/
    cp -Rpn ${distdir}/etc/zonekeys ${etcdir}/

    installne "-o root -g wheel -m 440" ${etcdir}/cbsd_sudoers /usr/local/etc/sudoers.d/cbsd_sudoers

    [ -d ${sshdir} ] || mkdir -m 0700 ${sshdir}
    [ -d "${sshdir}/sockets" ] || mkdir -m 0700 "${sshdir}/sockets"
    [ -f "${sshdir}/config" ] || installne "-o ${cbsduser} -g ${cbsduser} -m 644" ${distdir}/.ssh/config ${sshdir}/config

}

phase3()
{
    local _hname _sname _namenotset

    ${ECHO} "${MAGENTA}[Stage 3: ${GREEN}local settings${MAGENTA}]${NORMAL}"
    _namenotset=1

    while [ ${_namenotset} ]; do
	_hname=`/bin/hostname`
	_sname=`/bin/hostname -s`

	if [ -z "${_hname}" ]; then
	    ${ECHO} "${MAGENTA}Hostname is empty. Please set this:${NORMAL}"
	    read p
	    if getyesno "${MAGENTA}I will use hostname: ${GREEN}$p${NORMAL}"; then
		hostname $p
		_hname=`/bin/hostname`
		_sname=`/bin/hostname -s`
	    fi
	fi

	if [ "${_hname}" = "${_sname}" ]; then
	    ${ECHO} "${GREEN}${_hname}${MAGENTA} - Wrong hostname. Full hostname must be not equal short hostname. Please set FQDN (${GREEN}${_hname}.my.domain${MAGENTA} for example):${NORMAL}"
	    read p
	    if getyesno "${MAGENTA}I will use hostname: ${GREEN}$p${NORMAL}"; then
		hostname $p
		modconf /etc/rc.conf hostname "${p}"
	    fi
		else break;
	fi
    done

    #Configure cron
    if [ -f /var/cron/tabs/root ]; then
	if [ `/usr/bin/grep -c "periodic_minutes" /var/cron/tabs/root` = 0 ]; then
	    ${ECHO} "${MAGENTA}configure ${product} periodic minutes in root crontab: ${GREEN}/var/cron/tabs/root${NORMAL}"
	    echo "* * * * * /usr/bin/lockf -s -t0 ${ftmpdir}/periodic_minutes /usr/sbin/periodic minutes > /dev/null 2>&1" >> /var/cron/tabs/root
	fi
    else
	${ECHO} "${MAGENTA}configure ${product} periodic minutes in root crontab: ${GREEN}/var/cron/tabs/root${NORMAL}"
	echo "* * * * * /usr/bin/lockf -s -t0 ${ftmpdir}/periodic_minutes /usr/sbin/periodic minutes > /dev/null 2>&1" > /var/cron/tabs/root
    fi

    if [ -f /var/cron/tabs/root ]; then
	if [ `/usr/bin/grep -c "periodic_hourly" /var/cron/tabs/root` = 0 ]; then
	    ${ECHO} "${MAGENTA}configure ${product} periodic hourly in root crontab: ${GREEN}/var/cron/tabs/root${NORMAL}"
	    echo "0 * * * * /usr/bin/lockf -s -t0 ${ftmpdir}/periodic_hourly /usr/sbin/periodic hourly > /dev/null 2>&1" >> /var/cron/tabs/root
	fi
    else
	${ECHO} "${MAGENTA}configure ${product} periodic hourly in root crontab: ${GREEN}/var/cron/tabs/root${NORMAL}"
	echo "0 * * * * /usr/bin/lockf -s -t0 ${ftmpdir}/periodic_hourly /usr/sbin/periodic hourly > /dev/null 2>&1" > /var/cron/tabs/root
    fi

    if [ -f /var/cron/tabs/root ]; then
	if [ `/usr/bin/grep -c "cbsdsar" /var/cron/tabs/root` = 0 ]; then
	    if getyesno "Do you want to activate every 5 minutes activity reporter into log (cbsdsar)?"; then
		${ECHO} "${MAGENTA}configure ${product} SAR in: ${GREEN}/var/cron/tabs/root${NORMAL}"
		echo "*/5 * * * * /usr/bin/lockf -s -t0 ${ftmpdir}/cbsdsar /usr/local/bin/cbsd cbsdsar > /dev/null 2>&1" >> /var/cron/tabs/root
	    else
		${ECHO} "${MAGENTA}configure ${product} SAR in: ${GREEN}/var/cron/tabs/root${NORMAL}"
		echo "#*/5 * * * * /usr/bin/lockf -s -t0 ${ftmpdir}/cbsdsar /usr/local/bin/cbsd cbsdsar > /dev/null 2>&1" >> /var/cron/tabs/root
	    fi
	fi
    fi
}

phase4()
{
    ${ECHO} "${MAGENTA}[Stage 4: ${GREEN}startup scripts${MAGENTA}]"

    rm -f /usr/local/etc/rc.d/cbsd
    /bin/ln -s ${workdir}/rc.d/cbsd /usr/local/etc/rc.d/cbsd

    rm -f /usr/local/bin/cbsd
    /bin/ln -s ${workdir}/bin/cbsd /usr/local/bin/cbsd

    rm -f /usr/local/bin/sbsd
    /bin/ln -s ${workdir}/bin/sbsd /usr/local/bin/sbsd

    hash -r
}


phase5()
{
    ${ECHO} "${MAGENTA}[Stage 5: ${GREEN}update skel files${MAGENTA}]${NORMAL}"

    for i in $(${ECHO} $jnameserver | tr "," " "); do
	if [ `/usr/bin/grep -c ${i} ${jailskeldir}/resolv.conf` = 0 ]; then
	    TMPR="${ftmpdir}/resolv.$$"
	    # system nserver must be always last
	    ${ECHO} "nameserver ${i}" > ${TMPR}
	    cat ${jailskeldir}/resolv.conf >> ${TMPR}
	    mv ${TMPR} ${jailskeldir}/resolv.conf
	fi
    done
}

phase6()
{
    local _uncfg _uninit _checkme _myfs _ret _val

    ${ECHO} "${MAGENTA}[Stage 6: ${GREEN}Freshing inventory${MAGENTA}]${NORMAL}"

    [ -f "${inventory}" ] && . ${inventory}
    [ -f "${nodenamefile}" ] && nodename=`cat ${nodenamefile}`

    #system information
    collect_info

    if [ -z "${nodename}" ]; then
	desc_question nodename
	nodename=${answ}
    fi

    [ -z "${nodename}" ] && err 1 "nodename must be not empty"

    [ ! -f "${nodenamefile}" ] && echo "${nodename}" > "${nodenamefile}"

    [ ! -f "${dbdir}/nodes.sqlite" ] && touch ${dbdir}/nodes.sqlite && ${toolsdir}/nodesql --dbfile=${dbdir}/nodes.sqlite --action=init
    # todo: check for sql structure and auto alter table when change

    [ ! -f "${dbdir}/inv.${nodename}.sqlite" ] && cbsd inventorysql --dbfile=${dbdir}/inv.${nodename}.sqlite --action=init && $ECHO "${MAGENTA}Empty inventory database created: ${GREEN}${dbdir}/inv.${nodename}.sqlite"
    /bin/ln -sf ${dbdir}/inv.${nodename}.sqlite ${dbdir}/local.sqlite

    _myfs="ufs"

    if kldstat -qm zfs >/dev/null 2>&1; then
	/sbin/zfs list ${workdir} > /dev/null 2>&1
	[ $? -eq 0 ] && _myfs="zfs"
    fi

    _uncfg=`cbsd inventorysql --dbfile=${dbdir}/inv.${nodename}.sqlite --sqlquery=select items from unconfigured`

    [ $? -ne 0 ] && err 1 "Error for unconfigured query"

    for _checkme in ${_uncfg}; do
	for _uninit in ${USERINI}; do
	    if [ "${_uninit}" = "${_checkme}" ]; then
		if [ "${_checkme}" = "zfsfeat" -a ${_myfs} != "zfs" ]; then
		    cbsd inventorysql --dbfile=${dbdir}/inv.${nodename}.sqlite --action=update --param=zfsfeat --value=0
		    continue
		fi
		desc_question ${_checkme}
		[ $? -ne 0 ] && continue
		# todo: input validation here
		    [ "${_checkme}" = "mdtmp" -a "$answ" = "1" ] && answ="8"
		    [ "${_checkme}" = "mdtmp" -a "$answ" = "2" ] && answ="0"
		if [ -n "${answ}" ]; then
#		    $ECHO "Apply new settings for ${_checkme} as ${answ}"
		    cbsd inventorysql --dbfile=${dbdir}/inv.${nodename}.sqlite --action=update --param=${_uninit} --value=${answ}
		fi
	    fi
	done
    done

    # harware info
    for _uninit in ${HWINI}; do
	eval answ="\$${_uninit}"
	if [ -n "${answ}" ]; then
	    cbsd inventorysql --dbfile=${dbdir}/inv.${nodename}.sqlite --action=update --param=${_uninit} --value=${answ}
	fi
    done

    # flush unconfigured marker
    cbsd inventorysql --dbfile=${dbdir}/inv.${nodename}.sqlite --sqlquery=delete from unconfigured

    if [ ! -f /usr/local/etc/pkg.conf ]; then
        ${ECHO} "${MAGENTA}You have no /usr/local/etc/pkg.conf for pkg(8) usage${NORMAL}"
        if getyesno "${MAGENTA}Would you like to use dl.bsdstore.ru for pkg repository?${NORMAL}"; then
            installne "-o root -g wheel -m 444" ${distdir}/etc/pkg.conf /usr/local/etc/pkg.conf
        fi
    fi

    # constants and static param. FIX ME
    cbsd inventorysql --dbfile=${dbdir}/inv.${nodename}.sqlite --action=update --param=repo --value=http://bsdstore.ru
    cbsd inventorysql --dbfile=${dbdir}/inv.${nodename}.sqlite --action=update --param=workdir --value=${workdir}

    _ret=`sysctl -qn net.inet.ip.fw.enable`
    if [ "${_ret}" = "1" ]; then
	cbsd inventorysql --dbfile=${dbdir}/inv.${nodename}.sqlite --action=update --param=ipfw_enable --value=1
    else
	cbsd inventorysql --dbfile=${dbdir}/inv.${nodename}.sqlite --action=update --param=ipfw_enable --value=0
    fi

    cbsd inventorysql --dbfile=${dbdir}/inv.${nodename}.sqlite --action=update --param=fs --value=${_myfs}

    cbsd inventorysql --dbfile=${dbdir}/inv.${nodename}.sqlite --action=update --param=jail_interface --value=${nics}
    cbsd inventorysql --dbfile=${dbdir}/inv.${nodename}.sqlite --action=update --param=nodedescr --value=${nodedescr}
    cbsd inventorysql --dbfile=${dbdir}/inv.${nodename}.sqlite --action=update --param=nodename --value=${nodename}
    cbsd inventorysql --dbfile=${dbdir}/inv.${nodename}.sqlite --action=update --param=hostname --value=${hostname}

    #Finnaly export new inventory from SQLite data for ASCii
    cbsd inventorysql --dbfile=${dbdir}/inv.${nodename}.sqlite --action=list > ${inventory}
}

phase7()
{
    . ${workdir}/${localcbsdconffile}
    return 0
    ${ECHO} "${MAGENTA}[Stage 7: ${GREEN}permission${MAGENTA}]${NORMAL}"

    MD5NAME=`md5 -qs ${nodename}`
    KEYFILE="${sshdir}/${MD5NAME}.id_rsa"
    PUBFILE="${sshdir}/authorized_keys"

    if [ ! -f ${KEYFILE} ]; then
        [ -d ${sshdir} ] || /bin/mkdir -p ${sshdir}
        /usr/bin/ssh-keygen -t rsa -f ${KEYFILE} -N ''
        installne "-o ${cbsduser} -g ${cbsduser} -m 0400" ${KEYFILE}.pub ${PUBFILE}
    fi

    [ -d ${rsshdir} ] || /bin/mkdir -p ${rsshdir}

    /usr/sbin/chown -R ${cbsduser}:${cbsduser} ${rsshdir} > /dev/null 2>&1
    /usr/sbin/chown -R ${cbsduser}:${cbsduser} ${sshdir} > /dev/null 2>&1
    /usr/sbin/chown ${cbsduser}:${cbsduser} ${tmpdir} > /dev/null 2>&1
    /usr/sbin/chown ${cbsduser}:${cbsduser} ${etcdir} > /dev/null 2>&1
    /usr/sbin/chown ${cbsduser}:${cbsduser} ${logdir} > /dev/null 2>&1
#    installne "-o ${cbsduser} -g ${cbsduser} -m 644"  $etcdir/devfs.rules /etc/devfs.rules
    chown ${cbsduser}:${cbsduser} ${jailrcconfdir} ${jailfstabdir} ${jaildatadir} ${jailsysdir} > /dev/null 2>&1
}

############ start locking section #############
start()
{
    if [ "${globalconf}" = "${localcbsdconf}" ]; then
	${ECHO} "${MAGENTA}Please use difference path for workdir. Not ${GREEN}${distdir}${NORMAL}"
	exit
    fi

    /usr/bin/more << EOF_HEADER
----[${product} v.${myversion}]-------
 This is install/upgrade scripts for ${product}.
 Warning: this is highly experimental version, use at your own risk. Don't forget to backup
-----------------------
EOF_HEADER

    if ! getyesno "Do you want prepare or upgrade hier environment for CBSD now?" ; then
	err 1 "exit"
    fi

    ${ECHO} "${MAGENTA}>>> Installing or upgrading${NORMAL}"
    phase0
    phase1
    phase2
    phase3
    phase4
    phase5
    phase6
    phase7

    configure_rsync
    configure_named

    modconf 0 /etc/rc.conf cbsd_enable YES
    . /etc/rc.conf
    [ "${cbsd_workdir}" != "${workdir}" ] && modconf /etc/rc.conf cbsd_workdir "${workdir}"
    modconf 0 /etc/rc.conf sshd_enable "YES"

    if [ `/usr/bin/grep -c "sshd_flags" /etc/rc.conf` = 0 ]; then
	if getyesno "${MAGENTA}Shall i change (via rc.conf) default ssh port from 22 to 22222 which is default for cbsd?${NORMAL}"; then
	    modconf 0 /etc/rc.conf sshd_flags "-oPermitRootLogin=without-password -oPasswordAuthentication=yes -oUseDNS=no -p22222"
	else
	    modconf 0 /etc/rc.conf sshd_flags "-oPermitRootLogin=without-password -oPasswordAuthentication=yes -oUseDNS=no"
	fi
    fi

    modconf 0 /etc/rc.conf rcshutdown_timeout "900"
    modconf 0 /etc/rc.conf sendmail_enable "NO"

    modconf 0 /etc/make.conf WITH_PKGNG yes

    modconf 0 /etc/periodic.conf local_periodic "/usr/local/etc/periodic ${workdir}/etc/periodic"

    # + /etc/aliases
    # + /etc/root/inetd.conf
    # + /etc/syslogd.conf

    hash -r
    ${ECHO} "${MAGENTA}>>> Done${NORMAL}"
    exit 0
}

### MAIN ###
[ $# -eq 1 ] || /usr/bin/lockf -t0 -s ${MYLOCK} $0 start

case "$1" in
start)
    start;;
esac
