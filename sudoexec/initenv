#!/bin/sh
#v9.2.0
export workdir=${workdir:-"/usr/jails"}
export distdir=${distdir:-"/usr/local/cbsd"}
globalconf="${distdir}/cbsd.conf";
MYLOCK="/tmp/initenv.lock"
MYDESC="Node re-initialization"
MYARG=""
MYOPTARG=""

if [ ! -f ${globalconf} ]; then
    ${ECHO} "${MAGENTA}no such conf file${NORMAL}";
    exit
fi

. ${globalconf}
. ${distdir}/nc.subr
. ${distdir}/tools.subr
. ${distdir}/initenv.subr
. ${distdir}/ansiicolor.subr

[ "$1" = "--help" ] && err 0 "${MYDESC}"

desc_question()
{
    IP=`/sbin/ifconfig \`route -n get 0.0.0.0 | awk '/interface/{print $2}'\` |awk '/inet /{print $2}'|head -n1`
    [ -z "${IP}" ] && IP="8.8.8.8"

    case "$1" in
    "nodename")
	DEFAULT=`hostname`
	${ECHO} "${MAGENTA}Hint: short form for node name, e.g. hostname:${GREEN} ${DEFAULT}${NORMAL}"
	read answ
	[ -z "$answ" ] && answ="${DEFAULT}"
	return 0
    ;;
    "nodeip")
	DEFAULT="${IP}"
	${ECHO} "${MAGENTA}Hint: Persistent (when possible) managment IP address for node interconnection. e.g: ${GREEN}${DEFAULT}${NORMAL}"
	read answ
	[ -z "$answ" ] && answ="${DEFAULT}"
	return 0
    ;;
    "nodeloc")
	DEFAULT="Datacenter #5"
	${ECHO} "${MAGENTA}Hint: Node location (information field), e.g: ${GREEN}${DEFAULT}${NORMAL}"
	read answ
	[ -z "$answ" ] && answ="${DEFAULT}"
	return 0
    ;;
    "jnameserver")
	DEFAULT="${IP},8.8.8.8"
	${ECHO} "${MAGENTA}Hint: Default DNS nameserver (comma separated for multiple) for jails resolv.conf, e.g.: ${GREEN}${DEFAULT}${NORMAL}"
	read answ
	[ -z "$answ" ] && answ="${DEFAULT}"
	return 0
    ;;
    "nodeippool")
	DEFAULT="10.0.0.0/16 ${IP}/29"
	${ECHO} "${MAGENTA}Hint: Pool of IP addresses from which jail can work${NORMAL}"
	${ECHO} "${MAGENTA}Use space as delimer for  multiple networks, e.g.: ${GREEN}${DEFAULT}${NORMAL}"
	read answ
	[ -z "$answ" ] && answ="${DEFAULT}"
	return 0
    ;;
    "natip")
	DEFAULT="${IP}"
	${ECHO} "${MAGENTA}Hint: Set IP address as the aliasing NAT address, e.g: ${GREEN}${DEFAULT}${NORMAL}"
	read answ
	[ -z "$answ" ] && answ="${DEFAULT}"
	return 0
    ;;
    "fbsdrepo")
	if getyesno "${MAGENTA}Shall i use the official FreeBSD repository for fetching base via repo?${NORMAL}"; then
	    answ=1
	else
	    answ=0
	fi
	return 0
    ;;
    "zfsfeat")
	if getyesno "${MAGENTA}You running on ZFS-based system. Shall i use ZFS features?${NORMAL}"; then
	    answ=1
	else
	    answ=0
	fi
	return 0
    ;;
    "mdtmp")
	if getyesno "${MAGENTA}Do you want to use memory disk (8 mb default) for small temporary operation? e.g: ${GREEN}1${NORMAL}"; then
	    answ=1
	 else
	    answ=0
	fi
	return 0
    esac
}

check_pkg()
{
    [ -d "/var/cache/pkg" ] || mkdir -p /var/cache/pkg

    # not nessesary when install from the ports
    return 0

MYSTUFF="/usr/ports/security/libssh2 \
/usr/ports/security/sudo \
/usr/ports/net/rsync \
/usr/ports/databases/sqlite3"

MYWEBSTUFF="/usr/ports/www/lighttpd \
/usr/ports/databases/sqlite3 \
/usr/ports/lang/php5 \
/usr/ports/www/php5-session \
/usr/ports/textproc/php5-ctype \
/usr/ports/textproc/php5-dom \
/usr/ports/sysutils/php5-fileinfo \
/usr/ports/security/php5-filter \
/usr/ports/devel/php5-gettext \
/usr/ports/security/php5-hash \
/usr/ports/converters/php5-iconv \
/usr/ports/devel/php5-json \
/usr/ports/security/php5-openssl \
/usr/ports/databases/php5-pdo \
/usr/ports/sysutils/php5-posix \
/usr/ports/textproc/php5-simplexml \
/usr/ports/databases/php5-sqlite3 \
/usr/ports/devel/php5-tokenizer \
/usr/ports/textproc/php5-xml \
/usr/ports/textproc/php5-xmlreader \
/usr/ports/textproc/php5-xmlwriter \
/usr/ports/databases/php5-pdo_sqlite"

#init pkg
env ASSUME_ALWAYS_YES=yes pkg > /dev/null 2>&1

NOPORTS=""
for i in ${MYSTUFF}; do
        pkg info -e `basename ${i}` > /dev/null 2>&1
        [ $? -eq 1 ] && NOPORTS="${NOPORTS} ${i}"
done

[ -z "${NOPORTS}" ] && return

P=""
for i in ${NOPORTS}; do
    P="${P} `basename ${i}`"
done

printf "\n${MAGENTA}The following packages is required:\n${GREEN}${P}${NORMAL}\n"

case "${PKG}" in
1)
    if getyesno "Install via pkg ('no' for install via ports)"; then
	env ASSUME_ALWAYS_YES=yes pkg install -y ${P}
    fi
;;
0)
    if getyesno "Install via ports?"; then
	[ ! -f "/usr/ports/Makefile" ] && {
		getyesno "No ports tree. Execute 'portsnap fetch extract' ?" && portsnap fetch extract
	    }
	[ ! -f "/usr/ports/Makefile" ] && err 1 "Error: no ports tree"
    ${ECHO} "Building. Please wait"
	for i in ${NOPORTS}; do
	    env BATCH=no make -C ${i} clean install
	done
    fi
;;
esac
}

phase1()
{
    . ${distdir}/${localcbsdconffile}

    ${ECHO} "${MAGENTA}[Stage 1:${GREEN} account & dir hier${MAGENTA}]${NORMAL}"
    /usr/bin/id ${cbsduser} > /dev/null 2>&1
    
    if [ $? -eq 1 ]; then
	/usr/sbin/pw groupadd ${cbsduser}
	/usr/sbin/pw useradd ${cbsduser} -g ${cbsduser} -d ${workdir}
	change_cbsdpw
    fi

DIRHIER="${workdir} \
${jobdir} \
${spooldir} \
${taskdir} \
${srcdir} \
${basejaildir} \
${jaildatadir} \
${jaildir} \
${jailrcconfdir} \
${jailfstabdir} \
${jailsysdir}
${tmpdir} \
${ftmpdir} \
${templatedir} \
${aticdir} \
${dbdir} \
${sharedir} \
${jailskeldir} \
${sudoexecdir} \
${bindir} \
${logdir} \
${etcdir} \
${jailctldir} \
${nodectl} \
${rcddir} \
${sbindir} \
${systemdir} \
${toolsdir} \
${miscdir} \
${upgradedir} \
${sshdir} \
${rsshdir} \
${vardir} \
${rundir} \
${crondir} \
${crontabsdir} \
${libdir} \
${logdir} \
${importdir} \
${exportdir}"

    for _dir in ${DIRHIER}; do
	if [ ! -d ${_dir} ]; then
	    /bin/mkdir -p ${_dir} && ${ECHO} "${MAGENTA}new dir created: ${GREEN}${_dir}${NORMAL}"
	fi
    done
}

phase2()
{
    ${ECHO} "${MAGENTA}[Stage 2: ${GREEN}build tools${MAGENTA}]${NORMAL}"
    PKG=1
    check_pkg
    PKG=0
    check_pkg

    if [ ! -f ${etcdir}/rsyncd.conf ]; then
	cat > ${etcdir}/rsyncd.conf << EOF
pid file = /var/run/cbsdrsyncd.pid
uid = root
gid = wheel
list = no
port = 1873

EOF
    fi

    /usr/bin/cc ${distdir}/bin/cbsdsftp.c -o ${bindir}/cbsdsftp -lssh2 -L/usr/local/lib -I/usr/local/include
    /usr/bin/cc ${distdir}/bin/cbsdssh.c -o ${bindir}/cbsdssh -lssh2 -L/usr/local/lib -I/usr/local/include
    /usr/bin/cc ${distdir}/bin/cbsdlogtail.c -o ${bindir}/cbsdlogtail
    /usr/bin/cc ${distdir}/bin/cfetch.c -o ${bindir}/cfetch -lfetch

    installne "-o ${cbsduser} -g ${cbsduser} -m 555" ${distdir}/bin/rexe ${bindir}/rexe

    /usr/bin/cc ${distdir}/bin/nodepinger.c -o ${bindir}/nodepinger
    /usr/bin/cc ${distdir}/sbin/netmask.c -o ${sbindir}/netmask
    /usr/bin/cc ${distdir}/sbin/ncctld.c -o ${sbindir}/ncctld
    /usr/bin/cc ${distdir}/sbin/nodeinetd.c -o ${sbindir}/nodeinetd
    /usr/bin/cc ${distdir}/sbin/cbsd.c -o ${sbindir}/cbsd
    /usr/bin/cc ${distdir}/tools/ipfw-tables.c -o ${toolsdir}/ipfw-tables
    /usr/bin/cc ${distdir}/tools/pwait.c -o ${toolsdir}/pwait

    cc ${distdir}/tools/nodesql.c -lsqlite3 -L/usr/local/lib -I/usr/local/include -o ${toolsdir}/nodesql
    cc ${distdir}/tools/inventorysql.c -lsqlite3 -L/usr/local/lib -I/usr/local/include -o ${toolsdir}/inventorysql

    cc ${distdir}/sbin/cbsdtaskd/cbsdtaskd.c -o ${sbindir}/cbsdtaskd
    cc ${distdir}/sbin/cbsdtaskd/cbsdtask.c -o ${sbindir}/cbsdtask

    #installne "-o root -g wheel -m 4111" ${distdir}/sbin/cbsdtaskd/cbsdtaskd ${sbindir}/cbsdtaskd
    #installne "-o root -g wheel -m 111" ${distdir}/sbin/cbsdtaskd/cbsdtask ${sbindir}/cbsdtask
    #make -C ${distdir}/sbin/cbsdtaskd clean

    #### CP SCRIPTS with override
    DIRHIER="jailctl \
nodectl \
rc.d \
misc \
system \
tools \
upgrade"

    for D in ${DIRHIER}; do
	LDIR="${workdir}/${D}"
	RDIR="${distdir}/${D}"
	[ -d "${LDIR}" ] || mkdir -p ${LDIR}
	    for F in `/usr/bin/find ${RDIR} -depth 1 -type f -exec basename {} \;`; do
		installne "-o ${cbsduser} -g ${cbsduser} -m 555" ${RDIR}/${F} ${LDIR}/${F}
	    done
    done

    #### CP SCRIPTS without override
    DIRHIER="share \
share/jail-skel \
share/base2pkg \
etc"

    cat > ${etcdir}/cbsd_sudoers <<EOF
Defaults     env_keep += "workdir DIALOG"
Cmnd_Alias   CBSD_CMD = ${sudoexecdir}/*,/usr/local/cbsd/sudoexec/*
${cbsduser}   ALL=(ALL) NOPASSWD: CBSD_CMD
EOF

    for D in ${DIRHIER}; do
	LDIR="${workdir}/${D}"
	RDIR="${distdir}/${D}"
	[ ! -d "${LDIR}" ] && mkdir -p ${LDIR}
	for F in `/usr/bin/find ${RDIR} -depth 1 -type f -exec basename {} \;`; do
	    [ ! -f "${LDIR}/${F}" ] && install -o ${cbsduser} -g ${cbsduser} -m 444 ${RDIR}/${F} ${LDIR}/${F}
	done
    done

    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${globalconf} ${workdir}/cbsd.conf
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/nc.subr ${workdir}/nc.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/zfs.subr ${workdir}/zfs.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/tools.subr ${workdir}/tools.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/mdtools.subr ${workdir}/mdtools.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/initenv.subr ${workdir}/initenv.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/ansiicolor.subr ${workdir}/ansiicolor.subr
    if install -o ${cbsduser} -g ${cbsduser} -m 555 ${distdir}/bin/cbsd ${bindir}/cbsd; then
	modconf $bindir/cbsd workdir "\${workdir:-\"${workdir}\"}"
	/bin/echo "go \$@" >> ${bindir}/cbsd
    fi
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/securecmd ${workdir}/securecmd
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/system.subr ${workdir}/system.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/jfs.subr ${workdir}/jfs.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/build.subr ${workdir}/build.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/settings-tui.subr ${workdir}/settings-tui.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/distccache.subr ${workdir}/distccache.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/base2pkg.subr ${workdir}/base2pkg.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/mailtools.subr ${workdir}/mailtools.subr

    installne "-o ${cbsduser} -g ${cbsduser} -m 555" ${distdir}/bin/sbsd ${bindir}/sbsd
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/share/jail-arg ${sharedir}/jail-arg

    [ -d /usr/local/etc/sudoers.d ] || mkdir /usr/local/etc/sudoers.d

    cp -Rp ${distdir}/etc/periodic ${etcdir}/
    cp -Rpn ${distdir}/etc/scenes ${etcdir}/
    cp -Rpn ${distdir}/etc/zonekeys ${etcdir}/

    installne "-o root -g wheel -m 440" ${etcdir}/cbsd_sudoers /usr/local/etc/sudoers.d/cbsd_sudoers

    [ -d ${sshdir} ] || mkdir -m 0700 ${sshdir}
    [ -d "${sshdir}/sockets" ] || mkdir -m 0700 "${sshdir}/sockets"
    [ -f "${sshdir}/config" ] || installne "-o ${cbsduser} -g ${cbsduser} -m 644" ${distdir}/.ssh/config ${sshdir}/config
}

phase3()
{
    ${ECHO} "${MAGENTA}[Stage 3: ${GREEN}local settings${MAGENTA}]${NORMAL}"
    namenotset=1

    while [ $namenotset ]; do
	HNAME=`/bin/hostname`
	SHNAME=`/bin/hostname -s`

	if [ -z $HNAME ]; then
	    ${ECHO} "${MAGENTA}Hostname is empty. Please set this:${NORMAL}"
	    read p
	    if getyesno "${MAGENTA}I will use hostname: ${GREEN}$p${NORMAL}"; then
		hostname $p
		HNAME=`/bin/hostname`
		SHNAME=`/bin/hostname -s`
	    fi
	fi

    if [ "${HNAME}" = "${SHNAME}"  ]; then
	${ECHO} "${GREEN}${HNAME}${MAGENTA} - Wrong hostname. Full hostname must be not equal short hostname. Please set FQDN (${GREEN}${HNAME}.my.domain${MAGENTA} for example):${NORMAL}"
	read p
	if getyesno "${MAGENTA}I will use hostname: ${GREEN}$p${NORMAL}"; then
	    hostname $p
	    modconf /etc/rc.conf hostname "${p}"
	fi
	else break;
    fi
    done

    #Configure cron
    if [ -f /var/cron/tabs/root ]; then
	if [ `/usr/bin/grep -c "periodic_minutes" /var/cron/tabs/root` = 0 ]; then
	    echo "* * * * * /usr/bin/lockf -s -t0 ${ftmpdir}/periodic_minutes /usr/sbin/periodic minutes > /dev/null 2>&1" >> /var/cron/tabs/root
	fi
    else
	echo "* * * * * /usr/bin/lockf -s -t0 ${ftmpdir}/periodic_minutes /usr/sbin/periodic minutes > /dev/null 2>&1" > /var/cron/tabs/root
    fi

    if [ -f /var/cron/tabs/root ]; then
	if [ `/usr/bin/grep -c "periodic_hourly" /var/cron/tabs/root` = 0 ]; then
	    echo "0 * * * * /usr/bin/lockf -s -t0 ${ftmpdir}/periodic_hourly /usr/sbin/periodic hourly > /dev/null 2>&1" >> /var/cron/tabs/root
	fi
    else
	echo "0 * * * * /usr/bin/lockf -s -t0 ${ftmpdir}/periodic_hourly /usr/sbin/periodic hourly > /dev/null 2>&1" > /var/cron/tabs/root
    fi

    if [ -f /var/cron/tabs/root ]; then
	if [ `/usr/bin/grep -c "cbsdsar" /var/cron/tabs/root` = 0 ]; then
	    if getyesno "Do you want to activate every 5 minutes activity reporter into log (cbsdsar)?"; then
		echo "*/5 * * * * /usr/bin/lockf -s -t0 ${ftmpdir}/cbsdsar /usr/local/bin/cbsd cbsdsar > /dev/null 2>&1" >> /var/cron/tabs/root
	    else
		echo "#*/5 * * * * /usr/bin/lockf -s -t0 ${ftmpdir}/cbsdsar /usr/local/bin/cbsd cbsdsar > /dev/null 2>&1" >> /var/cron/tabs/root
	    fi
	fi
    fi

    #IFACE=`${workdir}/tools/nics-list |xargs`

    #${ECHO} "Updating interface list..."
    #modconf ${inventory} jail_interface "${IFACE}"

    MYFS="ufs"
    /sbin/zfs list ${workdir} > /dev/null 2>&1
    [ $? -eq 0 ] && MYFS="zfs"
    modconf ${inventory} fs ${MYFS}

    [ $MYFS != "zfs" ] && modconf ${inventory} zfsfeat 0

    for checkme in ${SYSINI}; do
	if [ `/usr/bin/grep -c ${checkme} ${inventory}` = 0 ]; then
	    ${ECHO} "${MAGENTA}Please fill: ${GREEN}${checkme}${NORMAL}"
	    [ "${checkme}" = "zfsfeat" -a $MYFS != "zfs" ] && continue
	    desc_question ${checkme}
	    # todo: input validation here
	    #    read answ
	    [ "${checkme}" = "mdtmp" -a "$answ" = "1" ] && answ="8"
	    [ "${checkme}" = "mdtmp" -a "$answ" = "2" ] && answ="0"
	    modconf ${inventory} ${checkme} ${answ}
	fi
    done

    if [ ! -f /usr/local/etc/pkg.conf ]; then
	${ECHO} "${MAGENTA}You have no /usr/local/etc/pkg.conf for pkg(8) usage${NORMAL}"
	if getyesno "${MAGENTA}Would you like to use dl.bsdstore.ru for pkg repository?${NORMAL}"; then
	    installne "-o root -g wheel -m 444" ${distdir}/etc/pkg.conf /usr/local/etc/pkg.conf
	fi
    fi

    # FIXME
    modconf 0 ${inventory} repo http://bsdstore.ru
    modconf 0 ${inventory} workdir $workdir
    # FIXME

    [ ! -f "${dbdir}/nodes.db" ] && touch ${dbdir}/nodes.db && ${toolsdir}/nodesql --dbfile=${dbdir}/nodes.db --action=init
    # todo: check for sql structure and auto alter table when change
}


phase4()
{
    ${ECHO} "${MAGENTA}[Stage 4: ${GREEN}startup scripts${MAGENTA}]"

    rm -f /usr/local/etc/rc.d/cbsd
    /bin/ln -s ${workdir}/rc.d/cbsd /usr/local/etc/rc.d/cbsd

    rm -f /usr/local/bin/cbsd
    /bin/ln -s ${workdir}/bin/cbsd /usr/local/bin/cbsd

    rm -f /usr/local/bin/sbsd
    /bin/ln -s ${workdir}/bin/sbsd /usr/local/bin/sbsd

    hash -r
}



phase5()
{
    . ${workdir}/${localcbsdconffile}
    . ${inventory}

    ${ECHO} "${MAGENTA}[Stage 5: ${GREEN}permission${MAGENTA}]${NORMAL}"

    MD5NAME=`md5 -qs ${nodename}`
    KEYFILE="${sshdir}/${MD5NAME}.id_rsa"
    PUBFILE="${sshdir}/authorized_keys"

    if [ ! -f ${KEYFILE} ]; then
	[ -d ${sshdir} ] || /bin/mkdir -p ${sshdir}
	/usr/bin/ssh-keygen -t rsa -f ${KEYFILE} -N ''
	installne "-o ${cbsduser} -g ${cbsduser} -m 0400" ${KEYFILE}.pub ${PUBFILE}
    fi

    [ -d ${rsshdir} ] || /bin/mkdir -p ${rsshdir}

    /usr/sbin/chown -R ${cbsduser}:${cbsduser} ${rsshdir} > /dev/null 2>&1
    /usr/sbin/chown -R ${cbsduser}:${cbsduser} ${sshdir} > /dev/null 2>&1
    /usr/sbin/chown ${cbsduser}:${cbsduser} ${tmpdir} > /dev/null 2>&1
    /usr/sbin/chown ${cbsduser}:${cbsduser} ${etcdir} > /dev/null 2>&1
    /usr/sbin/chown ${cbsduser}:${cbsduser} ${logdir} > /dev/null 2>&1
#    installne "-o ${cbsduser} -g ${cbsduser} -m 644"  $etcdir/devfs.rules /etc/devfs.rules
    chown ${cbsduser}:${cbsduser} ${jailrcconfdir} ${jailfstabdir} ${jaildatadir} ${jailsysdir} > /dev/null 2>&1
}

phase6()
{
    ${ECHO} "${MAGENTA}[Stage 6: ${GREEN}update skel files${MAGENTA}]${NORMAL}"

    for i in $(${ECHO} $jnameserver | tr "," " "); do
	if [ `/usr/bin/grep -c ${i} ${jailskeldir}/resolv.conf` = 0 ]; then
	    TMPR="${ftmpdir}/resolv.$$"
	    # system nserver must be always last
	    ${ECHO} "nameserver ${i}" > ${TMPR}
	    cat ${jailskeldir}/resolv.conf >> ${TMPR}
	    mv ${TMPR} ${jailskeldir}/resolv.conf
	fi
    done
}


phase7()
{
    ${ECHO} "${MAGENTA}[Stage 7: ${GREEN}preparing for fw${MAGENTA}]${NORMAL}"

    if [ `grep -c ipfw_enable ${inventory}` = 0 ]; then
	FW=`sysctl -qn net.inet.ip.fw.enable`
	if [ "${FW}" = "1" ]; then
	    ${ECHO} "ipfw_enable=1" >> ${inventory}
	else
	    ${ECHO} "ipfw_enable=0" >> ${inventory}
	fi
    fi
}


phase8()
{
    ${ECHO} "${MAGENTA}[Stage 8: ${GREEN}Patches${MAGENTA}]${NORMAL}"
    [ -d "${workdir}/upgrade" ] && find ${workdir}/upgrade/ -type f -depth 1 -name patch-\* -exec cbsd {} \;
}

phase9()
{
    ${ECHO} "${MAGENTA}[Stage 9: ${GREEN}Freshing inventory${MAGENTA}]${NORMAL}"
    [ ! -f "${dbdir}/inv.${nodename}.db" ] && ${toolsdir}/inventorysql --dbfile=${dbdir}/inv.${nodename} --action=init
    cbsd mkinventory
}


############ start locking section #############
start()
{
    if [ "${globalconf}" = "${localcbsdconf}" ]; then
	${ECHO} "${MAGENTA}Please use difference path for workdir. Not ${GREEN}${distdir}${NORMAL}"
	exit
    fi

    /usr/bin/more << EOF_HEADER
----[${product} v.${myversion}]-------
 This is install/upgrade scripts for CBSD.
 Warning: this is highly experimental version, use at your own risk. Don't forget to backup
-----------------------
EOF_HEADER

    if ! getyesno "Do you want prepare or upgrade hier environment for CBSD now?" ; then
	err 1 "exit"
    fi

    ${ECHO} "${MAGENTA}>>> Installing or upgrading${NORMAL}"
    phase1
    phase2
    phase3
    phase4
    phase5
    phase6
    phase7
    phase8
    phase9

    configure_nat
    configure_rsync
    configure_named

    modconf 0 /etc/rc.conf cbsd_enable YES
    . /etc/rc.conf
    [ "${cbsd_workdir}" != "${workdir}" ] && modconf /etc/rc.conf cbsd_workdir "${workdir}"
    modconf 0 /etc/rc.conf sshd_enable "YES"

    if [ `/usr/bin/grep -c "sshd_flags" /etc/rc.conf` = 0 ]; then
	if getyesno "${MAGENTA}Shall i change (via rc.conf) default ssh port from 22 to 22222 which is default for cbsd?${NORMAL}"; then
	    modconf 0 /etc/rc.conf sshd_flags "-oPermitRootLogin=without-password -oPasswordAuthentication=yes -oUseDNS=no -p22222"
	else
	    modconf 0 /etc/rc.conf sshd_flags "-oPermitRootLogin=without-password -oPasswordAuthentication=yes -oUseDNS=no"
	fi
    fi

    modconf 0 /etc/rc.conf rcshutdown_timeout "900"
    modconf 0 /etc/rc.conf sendmail_enable "NO"

    modconf 0 /etc/make.conf WITH_PKGNG yes

    modconf 0 /etc/periodic.conf local_periodic "/usr/local/etc/periodic ${workdir}/etc/periodic"

    # + /etc/aliases
    # + /etc/root/inetd.conf
    # + /etc/syslogd.conf

    hash -r
    ${ECHO} "${MAGENTA}>>> Done${NORMAL}"
    exit 0
}

### MAIN ###
[ $# -eq 1 ] || /usr/bin/lockf -t0 -s ${MYLOCK} $0 start

case "$1" in
start)
    start;;
esac
