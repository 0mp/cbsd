#!/bin/sh
#v9.2.2
globalconf="${workdir}/cbsd.conf";
MYARG="jconf"
MYOPTARG="inter ver arch fstab"
MYDESC="Create jail from config file"
ADDHELP="inter=0 to prevent any questions and to accept answers by default\n"

[ -f ${globalconf} ] || err 1 "no such conf file";
. ${globalconf}
. ${subr}
. ${system}
. ${inventory}
. ${tools}
. ${mdtools}
. ${color}

init $*

mkfstab() {

    if [ $baserw -eq 1 ]; then
cat > ${mount_fstab} << EOF
EOF
    else
cat > ${mount_fstab} << EOF
${data}/etc /etc nullfs rw 0 0
${data}/root /root nullfs rw 0 0
${data}/tmp /tmp nullfs rw 0 0
${data}/usr/home /usr/home nullfs rw 0 0
${data}/usr/local /usr/local nullfs rw 0 0
${data}/usr/compat /usr/compat nullfs rw 0 0
${data}/var /var nullfs rw 0 0
/var/cache/pkg /var/cache/pkg nullfs rw 0 0
#
EOF
    fi

[ -n "${fstab}" -a -f "${fstab}" ] && cat ${fstab} >> ${mount_fstab}

}


mkrcconf() {
    cp $temprcconf $rcconf
    sysrc -qf ${rcconf} pkglist="" >/dev/null
}

### MAIN
[ -f "$jconf" ] || err 1 "${MAGENTA}no such jconf file${NORMAL}";
over="${ver}"
oarch="${arch}"
jconf=`realpath $jconf`

temprcconf="${ftmpdir}/jcreate_jconf.$$"

cp ${jconf} ${temprcconf}

trap "rm -f ${temprcconf}" HUP INT ABRT BUS TERM  EXIT

. ${temprcconf}
. ${buildconf}

sysrc -qf ${temprcconf} ver=${ver} > /dev/null
sysrc -qf ${temprcconf} arch=${arch} > /dev/null

. ${temprcconf}

cbsd jstatus jname=${jname} > /dev/null 2>&1
[ $? -eq 0 ] || err 1 "${MAGENTA}Jail with $jname already exist${NORMAL}"

### CURRENT
src="${basejaildir}/${basejailpref}_${arch}_${ver}"

if [ ! -d "${src}" ]; then
    [ "${ver}" = "empty" ] || {
	getyesno "${MAGENTA}No base in ${src}. Try to fetch from remote repository?${NORMAL}"
	[ $? -eq 1 -o $? -eq 3 ] && err 1 "${MAGENTA}No data at ${src}${NORMAL}"
	cbsd repo action=get sources=base arch=${arch} ver=${ver}
	[ $? -eq 1 ] && err 1 "${MAGENTA}No data at ${src}${NORMAL}"
    }
fi

if [ -n "${interface}" -a "${inteface}" != "0" ]; then
	### CHECK FOR IP ( 1 - check for interfaces) ####
	cbsd checkip ip=${ips} check=1 > /dev/null 2>&1
	case $? in
	    0) err 1 "${MAGENTA}Ip not in pool range${NORMAL}"
		;;
	    1)	;;
	    2) ${ECHO} "${MAGENTA}Warning:${GREEN} Ip already exists in LAN${NORMAL}"
		;;
	    default) exit
        	;;
	esac
	#####################
fi

${ECHO} "${MAGENTA}Please wait: ${GREEN}this will take a while...${NORMAL}"

if [ -d "${data}" ]; then
	case $zfsfeat in
	    0) chflags -R noschg ${data}
		rm -rf "${data}"
		;;
	    1)  . $zfstool
		zfsmnt ${data}
		case $? in
		    0) break 
			;;
		    [12]) ${ECHO} "${MAGENTA}Remove stale zfs${NORMAL}"
		    /sbin/zfs unmount ${ZPOOL} && zfs destroy ${ZPOOL}
			;;
		    *) err 1 "${MAGENTA}Unknown result from zfsmnt${NORMAL}"
		        ;;
		esac
		;;
	esac
fi

case $zfsfeat in
	"0") [ -d ${data} ] || mkdir -p ${data} 
	    ;;
	"1") . $zfstool
	    ZPOOL=`zfs get -Ho value name ${jaildatadir}`

	    if zfsroot $jname; then
		err 1 "$ZPOOL/$jname already in use"
	    fi

	    zfs create -o atime=off -o mountpoint=${data} ${ZPOOL}/$jname
	    ;;
esac

    [ -d "${data}" ] || err 1 "Can't create datadir"
    [ -d ${path} ] || mkdir -p ${path}
    [ -d ${jailfstabdir}  ] || mkdir -p ${jailfstabdir}
    [ -d ${jailrcconfdir}  ] || mkdir -p ${jailrcconfdir}


## MD backend place
if [ "${mdsize}" != "0" ]; then
    conv2bytes "${mdsize}" || err 1 "conv2bytes error from ${mdsize}"
    imgbytes=$convval
    blockcount=$(( imgbytes  / 1048576 ))
    [ ! -d "${jailsysdir}/${jname}" ] && mkdir -p ${jailsysdir}/${jname}
    mdimage="${jailsysdir}/${jname}/image.dat"
    touch "${mdimage}"
    dd if="/dev/zero" of="${mdimage}" bs=1m count=0 seek=${blockcount} 1> /dev/null 2>&1 || err 1 "Error: Couldn't create the image file. ${mdimage}"
    # Attach the .img file as a memory disk.
    mdimagedevice=`mdconfig -a -t vnode -f "${mdimage}"`
    [ $? -eq 0 ] || err 1 "Error: Failed to mdconfig on ${mdimage}"
    newfs -j -n -U "/dev/${mdimagedevice}" 1> /dev/null 2>&1 || mdconfig -d -u ${mdimagedevice} || err 1 "Error: Couldn't newfs the memory disk. ${mdimagedevice}"
    mdconfig -d -u ${mdimagedevice}
# mount here
    cbsd mountmd jroot=${data} mdfile=${mdimage}
fi
## MD backend

### COPY FROM BASE
if [ "${ver}" != "empty" ]; then

    if [ "$baserw" = "1" ]; then
	if ! populate_cdir ${src} ${data}; then
	    [ "${mdsize}" != "0" ] && cbsd unmountmd jroot=${data}
	    err 1 "Can't populate $data from $src"
	fi
    else
	cp -rP ${src}/etc ${data}/
	cp -rP ${src}/root ${data}/
	mtree -deU -f ${src}/etc/mtree/BSD.root.dist -p ${data} >/dev/null
	mtree -deU -f ${src}/etc/mtree/BSD.usr.dist -p ${data}/usr >/dev/null
        mtree -deU -f ${src}/etc/mtree/BSD.var.dist -p ${data}/var >/dev/null
        mtree -deU -f ${src}/etc/mtree/BIND.chroot.dist -p ${data}/var/named >/dev/null
        mtree -deU -f ${src}/etc/mtree/BSD.sendmail.dist -p ${data} >/dev/null
    fi

    touch "${data}/etc/fstab"

    [ -d ${data}/usr/home ] || mkdir ${data}/usr/home
    [ -d ${data}/usr/local ] || mkdir ${data}/usr/local
    [ -d ${data}/usr/compat ] || mkdir ${data}/usr/compat
    [ -d ${data}/usr/ports ] || mkdir ${data}/usr/ports

    if [ ${applytpl} -eq 1 ]; then
	if [ -f ${jailskeldir}/master.passwd ]; then
	    cp ${jailskeldir}/master.passwd ${data}/etc
	    /usr/sbin/pwd_mkdb -d ${data}/etc ${data}/etc/master.passwd
	fi
	[ -f ${jailskeldir}/rc.conf ] && cp ${jailskeldir}/rc.conf ${data}/etc
	[ -f ${jailskeldir}/make.conf ] && cp ${jailskeldir}/make.conf ${data}/etc
	[ -f ${jailskeldir}/crontab ] && cp ${jailskeldir}/crontab ${data}/etc
	[ -f ${jailskeldir}/resolv.conf ] && cp ${jailskeldir}/resolv.conf ${data}/etc
	[ -f /etc/localtime ] && cp /etc/localtime ${data}/etc
    fi
fi  # if ver = empty

mkfstab
mkrcconf

if [ ${applytpl} -eq 1 ]; then
    . ${sharedir}/pkgtools

    [ ! -d "${data}/usr/local/etc" ] && mkdir -p "${data}/usr/local/etc"

#    generate_pkgconf -a ${arch} -v ${ver} > ${data}/usr/local/etc/pkg.conf
    [ -f "/usr/local/etc/pkg.conf" ] && cp /usr/local/etc/pkg.conf ${data}/usr/local/etc/pkg.conf
fi

if [ "${pkglist}" != "NO" -a "${ver}" != "empty" -a -f "${pkglist}" ]; then
    ${ECHO} "${MAGENTA}Populate jail from pkglist: ${GREEN}${pkglist}${NORMAL}"
    mountbase
    cbsd mountfstab jroot=${path} fstab=${mount_fstab} > /dev/null 2>&1
    mount -t devfs devfs $path/dev

    [ ! -d "${path}/usr/local/etc" ] && mkdir ${path}/usr/local/etc

    printf "${MAGENTA}pkg: [${GREEN}boostrap... "
    chroot ${path} env ASSUME_ALWAYS_YES=yes pkg > /dev/null 2>&1
    printf "looking for new version... "
    chroot ${path} env ASSUME_ALWAYS_YES=yes pkg update -f > /dev/null 2>&1
    #lets upgrade pkg if new version available
    printf "upgrading... "
#need for pkg upgrade twice for reinstalling pkg with "needed shared library changed"
    chroot ${path} env ASSUME_ALWAYS_YES=yes pkg upgrade -f > /dev/null 2>&1
#need for pkg upgrade twice for reinstalling pkg with "needed shared library changed"
    chroot ${path} env ASSUME_ALWAYS_YES=yes pkg upgrade -f > /dev/null 2>&1
    PKGLIST=`cat ${pkglist} |tr -d \\r\\n`
    printf "install for ${PKGLIST}...${MAGENTA}]${NORMAL}\n"
    chroot ${path} env ASSUME_ALWAYS_YES=yes pkg install ${PKGLIST}
    cbsd unmountfstab jroot=${path} fstab=${mount_fstab} > /dev/null 2>&1
    umount -f ${path}/dev
    unmountbase
    rm -f ${pkglist}
fi

[ "${mdsize}" != "0" ] && cbsd unmountmd jroot=${data}

cbsd jregister jname=${jname} mode=new

${ECHO}
${ECHO} "${MAGENTA}Creating ${jname} complete: ${GREEN}Enjoy!${NORMAL}"
