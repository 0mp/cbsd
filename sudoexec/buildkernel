#!/bin/sh
#v10.0.0
globalconf="${workdir}/cbsd.conf";
CBSDMODULE="build"
MYARG=""
MYOPTARG="ver arch maxjobs clean name basename ccache notify stable"
MYDESC="Build kernel from sources"

[ -f ${globalconf} ] || err 1 "no such conf file";
. ${globalconf}
. ${subr}
. ${inventory}
init $*

. ${buildconf}
. ${distccacheconf}
. ${mailconf}
. ${etcdir}/buildworld.conf
. ${system}
. ${color}

if [ "${ccache}" = "1"  ]; then

    ccache_prefix="cbsd buildworld $ver $arch $basename"
    ccache_dir="/var/cache/ccache"
    init_ccache_dir
    export CCACHE_DIR=$ccache_realdir

    if ! ccache_check; then
        ccache=0
    fi
else 
    ccache=0
fi

if [ "${notify}" = "1"  ]; then
    notify=1
else
    notify=0
fi

SRC="${srcdir}/src_${ver}"
[ -d "${SRC}" ] || err 1 "${MAGENTA}No such version: ${GREEN}${SRC}${NORMAL}"

support_arch=0

for i in $SUPPORTED_ARCH; do
    [ "${arch}" = "${i}" ] && support_arch=1 && break
done

[ ${support_arch} -eq 0 ] && err 1 "${MAGENTA}Supported architecture only: ${GREEN}${SUPPORTED_ARCH}${NORMAL}"

if [ -z "${name}" ]; then
    export __MAKE_CONF=${etcdir}/make.conf
else
    export __MAKE_CONF=${etcdir}/make-$name.conf
fi

if [ -z "${basename}" ]; then
    export MAKEOBJDIRPREFIX=${srcdir}/obj_${arch}_${ver}
else
    export MAKEOBJDIRPREFIX=${srcdir}/obj_${basename}_${arch}_${ver}
fi

if [ -z "${basename}" ]; then
    export SRCCONF=${etcdir}/src.conf
else
    export SRCCONF=${etcdir}/src-${basename}.conf
fi

if [ -z "${basename}" ]; then
    SRCBASE="${basejaildir}/${basejailpref}_${arch}_${ver}"
else
    SRCBASE="${basejaildir}/${basejailpref}_${basename}_${arch}_${ver}"
fi

NUMJOBS=""
[ $maxjobs -eq 0 ] || NUMJOBS="-j${maxjobs}"

NOCLEANUP=""
[ ${clean} -eq 1 ] || NOCLEANUP="-DNO_CLEAN"

LOCKFILE=${ftmpdir}/`md5 -qs ${MAKEOBJDIRPREFIX}`.lock

[ -z "${name}" ] && name="GENERIC"

[ -f "${etcdir}/kernel-${name}-${arch}-${ver}" ] || err 1 "${MAGENTA}No such config kernel-${name}-${arch}-${ver} in: ${GREEN}${etcdir}${NORMAL}"

## preparing chroot
DST="${basejaildir}/tempbase.$$"
mkdir -p ${DST}

export baserw=1
populate_cdir ${SRCBASE} ${DST}
cp ${etcdir}/kernel-${name}-${arch}-${ver} ${SRC}/src/sys/${arch}/conf/${name}.CBSD

mkdir -p ${DST}${SRC}/src
mount -t nullfs -o ro ${SRC}/src ${DST}${SRC}/src
mkdir -p ${MAKEOBJDIRPREFIX} ${DST}${MAKEOBJDIRPREFIX}
mkdir -p ${DST}${etcdir}
[ -f "${__MAKE_CONF}" ] && cp ${__MAKE_CONF} ${DST}${etcdir}
[ -f "${SRCCONF}" ] && cp ${SRCCONF} ${DST}${etcdir}
mount -t nullfs ${MAKEOBJDIRPREFIX} ${DST}${MAKEOBJDIRPREFIX}
mount -t devfs devfs ${DST}/dev

[ $notify -eq 1 ] && BLDLOG="${tmpdir}/build.$$.log"
makelock $LOCKFILE "rm -f ${SRC}/src/sys/${arch}/conf/${name}.CBSD && umount -f ${DST}${MAKEOBJDIRPREFIX} && umount -f ${DST}/dev && umount -f ${DST}${SRC}/src && chflags -R noschg ${DST} && rm -rf ${DST} && rm -f ${BLDLOG}"

DT_START=`date +%s`

myarch=`uname -m`

if [ "${myarch}" != "${arch}" ]; then
    case "${arch}" in
	"i386")
	    export TARGET="i386"
	    export TARGET_ARCH="i386"
	    export EMULATOR=""
	    ;;
	"amd64")
	    export TARGET="amd64"
	    export TARGET_ARCH="amd64"
	    export EMULATOR=""
	    ;;
	"arm")
	    export TARGET="arm"
	    export TARGET_ARCH="armv6"
	    export BUILDPATH="arm-bsd-user"
	    export EMULATOR="qemu-arm"
	    ;;
	"mips")
	    export TARGET="mips"
	    export TARGET_ARCH="mips64"
	    export BUILDPATH="mips64-bsd-user"
	    export EMULATOR="qemu-mips64"
	    ;;
    esac
fi

if [ -n "${EMULATOR}" ]; then
    emultest=`which ${EMULATOR}`
    [ $? -eq 1 ] && err 1 "No such emulator: ${EMULATOR}"
fi

if [ $notify -eq 1 ]; then
    [ -z "$TAILSTRING" ] && TAILSTRING=50
    script ${BLDLOG} /usr/sbin/chroot ${DST} /usr/bin/make $NUMJOBS -C ${SRC}/src buildkernel TARGET=${arch} KERNCONF=${name}.CBSD ${NOCLEANUP}
    res=$?
else
    /usr/sbin/chroot ${DST} /usr/bin/make $NUMJOBS -C ${SRC}/src buildkernel TARGET=${arch} KERNCONF=${name}.CBSD ${NOCLEANUP}
    res=$?
fi

DT_END=`date +%s`

SVN=""

if [ -f "/usr/bin/svnlite" ]; then
    SVN="/usr/bin/svnlite"
elif [ -f "/usr/local/bin/svn" ]; then
    SVN="/usr/local/bin/svn"
fi

if [ -n "${SVN}" ]; then
    svnrev=`cd ${SRC}/src && ${SVN} info |awk '/^Revision: /{printf $2}'`
else
    svnrev=`date`
fi


if [ $res -ne 0 -a $notify -eq 1 ]; then
    send_notification -s "[CBSD ${nodename}] buildkernel ${name} $basename $ver $arch r${svnrev} failed." -b "`tail -n${TAILSTRING} ${BLDLOG}`"
    return 1
fi

if [ $res -eq 0 -a $notify -eq 1 ]; then
cat > ${BLDLOG} << EOF
Start time: `date -r ${DT_START}`
End time: `date -r ${DT_END}`
EOF
    send_notification -s "[CBSD ${nodename}] buildkernel ${name} $basename $ver $arch r${svnrev} complete." -f ${BLDLOG}
    return 0
fi
