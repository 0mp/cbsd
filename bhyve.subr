if [ ! "$_CBSD_BHYVE_SUBR" ]; then
_CBSD_BHYVE_SUBR=1
###

# generic function for bhyve
# required:
# strings.subr
#
. ${workdir}/virtual.subr

# test environment for bhyveing
init_bhyve()
{
	local _required_kmods="vmm if_tap if_bridge nmdm" _i _res

	_res=$( /usr/bin/su -m cbsd -c ${miscdir}/popcnttest > /dev/null 2>&1 )
	if [ $? -ne 0 ]; then
		# work-around for Alex (CBSD Telegram) issue: this is not clean check for EPT existance:
		# sometimes errcode = 16 but POPCNT feature present in CPU
		# So, just print warning about this. Need for deep investigation
		${ECHO} "${MAGENTA}Warning: Seems like your CPU does not appear to support ${GREEN}EPT${NORMAL}"
		${ECHO} "${MAGENTA}But im try to run bhyve anyway...${NORMAL}"
		sleep 2
	fi

	for _i in ${_required_kmods}; do
		if ! /sbin/kldstat -qm ${_i} >/dev/null 2>&1; then
			${ECHO} "${MAGENTA}No kldloaded module: ${GREEN}${_i}${NORMAL}"
			${ECHO} "${MAGENTA}Please add ${GREEN}vmm_load=\"YES\"${MAGENTA} into /boot/loader.conf and${MAGENTA}"
			${ECHO} "${MAGENTA}put ${GREEN}kld_list=\"if_bridge if_tap nmdm\"${MAGENTA} into your ${GREEN}/etc/rc.conf${MAGENTA} then reboot host.${NORMAL}"
			[ -n "${DIALOG}" ] && ${ECHO} "${MAGENTA}Press any key...${NORMAL}" && read p
			exit 0
		fi
	done

	tmuxcmd=$(which tmux)
	[ -z "${tmuxcmd}" ] && err 1 "${MAGENTA}Current version required for ${GREEN}tmux${MAGENTA}\nPlease ${GREEN}pkg install tmux ${MAGENTA} or ${GREEN}make -C /usr/ports/sysutils/tmux install${MAGENTA} it.${NORMAL}"
}


# autoincement for $bhyve_pci_index variable which symbolizes pci id bus
next_pci_id()
{
	[ -z "${bhyve_pci_index}" ] && bhyve_pci_index="0"
	bhyve_pci_index=$(( bhyve_pci_index + 1 ))
	[ ${bhyve_pci_index} -gt 31 ] && ${ECHO} "${MAGENTA}No free available bhyve_pci_index, 31 is max${NORMAL}" && return 1
	return 0
}

# autoincement for nmdm_index
next_nmdm_id()
{
	local _i
	nmdm_index=0

	for _i in $( /usr/bin/seq 0 500 ); do
		/bin/ls /dev/nmdm${_i}A* > /dev/null 2>&1
		if [ $? -ne 0 ]; then
			nmdm_index=${_i}
			return 0
		fi
	done

	[ ${_i} -eq 500 ] && return 1
	return 0
}

compile_uefi_boot_args()
{
	if ! next_pci_id; then
		# no free pci bus
		exit 0
	fi

	uefi_boot_args="-s ${bhyve_pci_index}:0,ahci-cd,/usr/local/cbsd/upgrade/patch/efiref.fd"
}


# export arguments for bhyve about dsk vms in $dsk_args variable
# $jname must be set's
# sample:
# jname="debian"
# if compile_dsk_args; then
# 	echo $dsk_args
# else
#	echo "No disks"
# fi
compile_dsk_args()
{
	local dsk_id=0
	local sqldelimer=" "
	local prefix
	local full_dsk_path

	# temporary workaroung for Alex (CBSD Telegram) issue with no disk (old SQL schema) - don't select dsk_conf
	#	eval $( cbsdsql ${jailsysdir}/${jname}/local.sqlite SELECT dsk_controller,dsk_path,dsk_slot,dsk_conf FROM bhyvedsk WHERE jname=\"${jname}\" AND dsk_type=\"vhd\" |while read dsk_controller dsk_path dsk_slot dsk_conf; do
	eval $( cbsdsql ${jailsysdir}/${jname}/local.sqlite SELECT dsk_controller,dsk_path,dsk_slot FROM bhyvedsk WHERE jname=\"${jname}\" AND dsk_type=\"vhd\" |while read dsk_controller dsk_path dsk_slot; do

		if ! next_pci_id; then
			# no free pci bus
			exit 0
		fi

		if [ ${dsk_slot} -eq 0 ]; then
			pcislot=${bhyve_pci_index}
		else
			pcislot=${dsk_slot}
		fi

		dsk_conf=$( cbsdsql ${jailsysdir}/${jname}/local.sqlite SELECT dsk_conf FROM bhyvedsk WHERE jname=\"${jname}\" AND dsk_path=\"${dsk_path}\" LIMIT 1 2>/dev/null )

		# test for full path. If path not started from '/' - append $data dir
		full_dsk_path=
		prefix=$( substr --pos=0 --len=1 --str="${dsk_path}" )

		if [ "${prefix}" != "/" ]; then
			full_dsk_path="${data}/${dsk_path}"
		else
			full_dsk_path="${dsk_path}"
		fi

		if [ -n "${dsk_conf}" ]; then
			echo "export dsk${dsk_id}=\"-s ${pcislot}:0,${dsk_controller},${full_dsk_path},${dsk_conf}\" ;"
		else
			echo "export dsk${dsk_id}=\"-s ${pcislot}:0,${dsk_controller},${full_dsk_path}\" ;"
		fi

		dsk_id=$(( dsk_id + 1 ))
	done ) || err 1 "${MAGENTA}Error while create disk map${NORMAL}"

	dsk_args=""
	for i in $( /usr/bin/seq 0 31 ); do
		eval T="\$dsk$i"
		[ -z "${T}" ] && break
		# make custom argument for bhyve and add count to bhive_pci_index cause increment in while loop we lose
		if ! next_pci_id; then
			# no free pci bus
		fi
		dsk_args="${dsk_args} ${T}"
	done

	if [ -r ${data}/cbsd.img ]; then
		if ! next_pci_id; then
			# no free pci bus
		fi
		dsk_args="${dsk_args} -s ${bhyve_pci_index}:0,virtio-blk,${data}/cbsd.img"
	fi

	[ -z "${dsk_args}" ] && return 1
	return 0
}

# print 5c:f9:dd:76:d5:c4 from 5cf9dd76d5c4
normalize_nic_hwaddr()
{
	local _hwaddr
	[ -z "${1}" ] && return 0
	
	_hwaddr=$( echo "${1}" |/usr/bin/tr -d ":"| /usr/bin/sed -e 's/\([0-9A-Fa-f]\{2\}\)/\1:/g' -e 's/\(.*\):$/\1/' )
	printf ${_hwaddr}
}


# export arguments for bhyve about nic vms in $nic_args variable
# $jname must be set's
# sample:
# jname="debian"
# if compile_nic_args; then
# 	echo $nic_args
# else
#	echo "No nic"
# fi
compile_nic_args()
{
	local _id=0 i _res taplist=
	local sqldelimer=" "
	local mybridge

	local errmsg=

	eval $( cbsdsql ${jailsysdir}/${jname}/local.sqlite SELECT id,nic_order,nic_driver,nic_slot,nic_type,nic_parent,nic_hwaddr,nic_address FROM bhyvenic WHERE jname=\"${jname}\" |while read nic_id nic_order nic_driver nic_slot nic_type nic_parent nic_hwaddr nic_address; do

		if ! next_pci_id; then
			# no free pci bus
			exit 0
		fi

		if [ ${nic_slot} -eq 0 ]; then
			pcislot=${bhyve_pci_index}
		else
			pcislot=${nic_slot}
		fi

		case ${nic_driver} in
			vale)
				valeid=$( cbsdsql local SELECT idx FROM vale WHERE name=\"${nic_parent}\"  )
				[ -z "${valeid}" ] && err 1 "errmsg=\"compile_nic_args: can't determine valen nic for: ${nic_parent}\""
				mytap="vale${valeid}:${jname}"
				;;
			*)
				# when ip=0 and interface=auto we must use default interface for upstream
				if [ "${nic_parent}" = "0" -o "${nic_parent}" = "auto" ]; then

					. ${workdir}/initenv.subr
					update_netinfo

					if [ "${node_ip6_active}" = "1" ]; then
						interface="${CBSD_UPLINK_IFACE6}"
					else
						interface="${CBSD_UPLINK_IFACE4}"
					fi

				else
					interface="${nic_parent}"
				fi

				if [ "${interface}" != "disable" ]; then
					# always up parent device
					/sbin/ifconfig ${interface} up

					if ! mybridge=$( get_my_device bridge ${interface} ); then
						err 1 "errmsg=\"Error:get_my_device_bridge_for_${interface}: ${mybridge}\""
					fi
				else
					# dont create/attach to bridge
					mybridge="disable"
				fi

				mytap=$( get_my_tap ${mybridge} )
				[ $? -eq 1 ] && err 1 "errmsg=\"Error:get_my_tap_for_${mybridge}: ${mybridge}\""

				/sbin/ifconfig ${mytap} description ${jname}-nic${_id} up
				if [ "${mybridge}" != "disable" ]; then
					_res=$( /sbin/ifconfig ${mybridge} addm ${interface} addm ${mytap} >/dev/null 2>&1 )
				fi

				if [ -n "${nic_address}" ]; then
					if [ "${nic_address}" != "0" -o "${nic_address}" != "disable" ]; then

						IFS=","
						for ip in ${nic_address}; do
							[ "${ip}" = "DHCP" ] && ip=$( dhcpd )
							IFS=" "
							ipwmask ${ip}
							iptype ${IWM}
							local _inet=$?
							case "${_inet}" in
								1)
									local proto="inet"
									;;
								2)
									local proto="inet6"
									;;
								*)
									continue
									;;
							esac
							# ipv type + mask
							/sbin/ifconfig ${mytap} ${proto} ${ip} alias
						IFS=","
					done
					IFS=" "
					fi
				fi

				;;
		esac

		if [ "${nic_hwaddr}" != "0" ]; then
			unset mymac
			mymac=$( normalize_nic_hwaddr ${nic_hwaddr} )
			echo "export nic${_id}=\"-s ${pcislot}:0,virtio-net,${mytap},mac=${mymac}\" ;"
		else
			echo "export nic${_id}=\"-s ${pcislot}:0,virtio-net,${mytap}\" ;"
		fi

		echo "export mytap${_id}=\"${mytap}\";"

		_id=$(( _id + 1 ))
	done ) || err 1 "${MAGENTA}Error while create nic map: ${errmsg}${NORMAL}"

	[ -n "${errmsg}" ] && err 1 "${MAGENTA}Error while create nic map: ${GREEN}${errmsg}${NORMAL}"

	nic_args=""

	for i in $( /usr/bin/seq 0 31 ); do
		eval T="\$nic$i"
		eval taplist="\$mytap$i"
		[ -z "${T}" ] && break
		[ -z "${taplist}" ] && break
		# make custom argument for bhyve and add count to bhive_pci_index cause increment in while loop we lose
		if ! next_pci_id; then
			# no free pci bus
		fi
		nic_args="${nic_args} ${T}"
		mytap="${taplist}"
	done

	[ -z "${nic_args}" ] && return 1

	return 0
}


# export arguments for bhyve hostbridge_args
compile_hostbridge_args()
{
	# This is usually configured at slot 0

	# what the diffrence?
	#hostbridge_args="-s 0,${vm_hostbridge}"
	hostbridge_args="-s 0:0,${vm_hostbridge}"
}

# export arguments for bhyve lpc_args
compile_lpc_args()
{
#	if ! next_pci_id; then
#		return 1
#	fi

	lpc_args="-s 31,lpc"
}

# export arguments for bhyve pci_passthru_args
compile_pci_passthru_args()
{
	local ppt

	ppt=$( cbsdsql local SELECT ppt FROM bhyveppt WHERE jname=\"${jname}\" 2>/dev/null )

	[ -z "${ppt}" ] && return 0

	if ! next_pci_id; then
		return 1
	fi

	${ECHO} "${MAGENTA}Passthru enabled: ${GREEN}${ppt}${NORMAL}"

	pci_passthru_args="-s ${bhyve_pci_index},passthru,${ppt}"
	pci_passthru_args="-s ${bhyve_pci_index},passthru,${ppt} -S"
}


# export arguments for bhyve efi_args
compile_efi_args()
{
	case "${vm_efi}" in
		uefi)
			efi_args="-l bootrom,${efi_firmware}"
#			efi_args="-s 31,lpc -l com1,/dev/nmdm0A -l com2,/dev/nmdm1A -l bootrom,${efi_firmware}"
			;;
		uefi_csm)
			efi_args="-l bootrom,${efi_firmware_csm}"
			;;
		*)
			efi_args=""
			;;
	esac

	[ -z "${efi_args}" ] && return 0

	return 0
}

# export arguments for bhyve console_args
compile_console_args()
{
	local com1=0 com2=0

	case "${vm_console}" in
		"nmdm")

			if ! next_nmdm_id ; then
				${ECHO} "${MAGENTA}No such next_nmdm_id for VMs: ${GREEN}${jname}${NORMAL}"
				return 1
			fi

			com1=${nmdm_index}
			com2=$(( nmdm_index + 1 ))

			console_args="-l com1,/dev/nmdm${com1}A -l com2,/dev/nmdm${com2}A"
			console_nmdm="/dev/nmdm${com1}B /dev/nmdm${com2}B"
			;;
		*)
			console_args="-l com1,stdio"
			;;
	esac
	return 0
}



# export arguments for bhyve virtio-rnd
compile_virtiornd_args()
{
	local baseelf

	baseelf=$( ${miscdir}/elf_tables --ver /bin/sh 2>/dev/null )

	# this is feature of FreeBSD 10.1+
	[ ${baseelf} -lt 1000730 ] && return 0

	if ! next_pci_id; then
		return 1
	fi

	virtiornd_args="-s ${bhyve_pci_index}:0,virtio-rnd"
}

# export arguments for bhyve cd_args
# $iso_img must be present
compile_cd_args()
{
	if ! next_pci_id; then
		return 1
	fi

	if [ -z "${iso_img}" ]; then
		${ECHO} "${MAGENTA}iso_img variable is not set${NORMAL}"
		return 1
	fi

	if [ ! -r "${iso_img}" ]; then
		${ECHO} "${MAGENTA}iso_img in not readable: ${GREEN}${iso_img}${NORMAL}"
		return 1
	fi

	cd_args="-s ${bhyve_pci_index}:0,ahci-cd,${iso_img}"
}

# create new disk image for bhyve VMs
# $1 full path
# $2 size (eg: 1g)
# $3 fsfeat ( 1 or 0 ) - use of skip FS features
# require: /usr/local/bin/cbsd as shell
# require: ${tools}
#
# if ! bhyve_create_dsk /tmp/olala.vhd 10g 0; then
#    echo ";=("
# fi
bhyve_create_dsk()
{
	local newdsk="${1}"; shift
	local imgsize="${1}"; shift
	local fsfeat="${1}"; shift

	local _res

	if [ "${fsfeat}" = "0" ]; then
		zfsfeat=0
		hammerfeat=0
	fi

	local lunname=$( /usr/bin/basename ${newdsk} ) # for ZFS vol
	local datadir=$( /usr/bin/dirname ${newdsk} )  # for ZFS vol

	local convval imgbytes blockcount

	if [ -f "${newdsk}" ]; then
		echo "Disk ${newdsk} already exist"
		return 1
	fi

	# test for human
	if is_number ${imgsize}; then
		conv2bytes ${imgsize} || err 1 "${MAGENTA}conv2bytes from bhyve.subr error for: ${GREEN}${imgsize}${NORMAL}"
		imgbytes="${convval}"
	else
		imgbytes=$imgsize
	fi

	if [ "${zfsfeat}" = "1" ]; then
		readconf zfs.conf
		. $zfstool
		DATA=$( /sbin/zfs get -Ho value name ${jaildatadir} )
#		ZPOOL=$( /sbin/zfs get -Ho value name ${jaildatadir} )
#		if zfsroot $jname; then
#			err 1 "$ZPOOL/$jname already in use"
#		fi
#		/sbin/zfs create ${zfs_create_flags} -o mountpoint=${JAILDIR} ${ZPOOL}/${jname}
		/sbin/zfs create -V ${imgbytes} -o volmode=dev ${DATA}/bcbsd-${jname}-${lunname}

		_res=$?
		[ ${_res} -ne 0 ] && return ${_res}

		[ ! -d "${datadir}" ] && /bin/mkdir -p ${datadir}
		/bin/ln -sf /dev/zvol/${DATA}/bcbsd-${jname}-${lunname} ${newdsk}

	elif [ "${hammerfeat}" = "1" ]; then
		err 1 "Hammer not supported yet"
	else
		blockcount=$(( imgbytes  / 1048576 ))
		[ ! -d ${datadir} ] && /bin/mkdir -p ${datadir}
		/usr/bin/touch "${newdsk}"
		/bin/dd if=/dev/zero of="${newdsk}" bs=1m count=0 seek=${blockcount} 1> /dev/null 2>&1 || return 1
	#	/bin/dd if=/dev/random of="${newdsk}" bs=1m count=${blockcount}
		_res=$?
		[ ${_res} -ne 0 ] && return ${_res}
	fi

	media mode=register name="hdd-${lunname}" path="${newdsk}" type="hdd" jname="${jname}"
	return 0
}

# detach and remove disk image from bhyve VMs
# jname must be set
# $1 dsk_path from sql table (eg: dsk1.vhd )
# require: /usr/local/bin/cbsd as shell
bhyve_remove_dsk()
{
	local dsk="${1}"; shift
	[ -z "${jname}" -o -z "${dsk}" ] && return 0

	cbsdsql ${jailsysdir}/${jname}/local.sqlite DELETE FROM bhyvedsk WHERE dsk_path=\"${dsk}\" AND jname=\"${jname}\"

	if [ "${zfsfeat}" = "1" ]; then
		readconf zfs.conf
		. $zfstool

		if is_getzvol ${data}/${dsk}; then
			/sbin/zfs destroy ${is_zvol}
		fi

	elif [ "${hammerfeat}" = "1" ]; then
		err 1 "Hammer not supported yet"
	else
		
	fi

	[ -f "${data}/${dsk}" -o -h "${data}/${dsk}" ] && /bin/rm -f "${data}/${dsk}"

	return 0
}

# detach and remove NIC from bhyve VMs
# jname must be set
# $1 is id of nic in SQL table
# require: /usr/local/bin/cbsd as shell
bhyve_remove_nic()
{
	local id="${1}"; shift
	[ -z "${jname}" -o -z "${id}" ] && return 0

	cbsdsql ${jailsysdir}/${jname}/local.sqlite DELETE FROM bhyvenic WHERE id=\"${id}\" AND jname=\"${jname}\"

	return 0
}


# export $dsk_size,dsk_realsize variable
# require: dsk_path as "dsk1.vhd"
# require . tools
populate_dsk_size()
{
	local dsk_fullpath="${jaildatadir}/${jname}-${jaildatapref}/${dsk_path}"

	dsk_size=
	dsk_realsize=

	if [ ! -f "${dsk_fullpath}" ]; then
		dsk_size="0"
		return 0
	fi

	dsk_realsize=$( /usr/bin/du -sh ${dsk_fullpath}|/usr/bin/awk '{printf $1}' 2>/dev/null)
	dsk_size=$( /usr/bin/stat -f "%z" ${dsk_fullpath} 2>/dev/null)

	if conv2human "$dsk_size"; then
		dsk_size=$convval
	fi

	if [ -z "${dsk_size}" ]; then
		dsk_size=0
		return 0
	fi

	[ -n "${dsk_realsize}" ] && dsk_size="${dsk_realsize}/${dsk_size}"
}

compile_vnc_args()
{
	local vm_port
	local vnc_bind

	local width height

	local baseelf

	baseelf=$( ${miscdir}/elf_tables --ver /bin/sh 2>/dev/null )

	vnc_args=

	if [ ${baseelf} -lt 1100120 ]; then
		${ECHO} "${MAGENTA}VNC available only on FreeBSD 11.0+. Disable VNC${MAGENTA}"
		sleep 2
		return 0
	fi

	case "${vm_vnc_port}" in
		0)
			vm_port=$( get_next_rd_port )
			;;
		1)
			return 1
			;;
		*)
			vm_port="${vm_vnc_port}"
			;;
	esac

	if ! next_pci_id; then
		return 1
	fi

	echo "${vm_port}" > ${jailsysdir}/${jname}/vnc_port

	if [ -n "${bhyve_vnc_tcp_bind}" ]; then
		vnc_bind="${bhyve_vnc_tcp_bind}"
	else
		vnc_bind="${default_vnc_tcp_bind}"
	fi

	if [ -n "${bhyve_vnc_resolution}" ]; then
		width=${bhyve_vnc_resolution%%x*}
		height=${bhyve_vnc_resolution##*x}
	else
		width="${default_vnc_width}"
		heigh="${default_vnc_height}"
	fi

	vnc_args="-s ${bhyve_pci_index},fbuf,tcp=${vnc_bind}:${vm_port},w=${width},h=${height}"

	if [ "${vm_efi}" != "none" ]; then
		${ECHO} "${MAGENTA}VRDP is enabled. VNC bind/port: ${GREEN}${vnc_bind}:${vm_port}${NORMAL}"
		${ECHO} "${MAGENTA}For attach VM console, use: ${GREEN}vncviewer -truecolour ${vnc_bind}:${vm_port}${NORMAL}"
		${ECHO} "${MAGENTA}Resolution: ${GREEN}${width}x${height}. ${MAGENTA}VNC pass: ${GREEN}cbsd${NORMAL}${NORMAL}"

		if [ "${vnc_bind}" = "0.0.0.0" ]; then
			echo
			${ECHO} "${MAGENTA}Warning!!! You are running system with open ${GREEN}VNC${MAGENTA} port to all world wich is not to safe${MAGENTA}"
			${ECHO} "${MAGENTA}Please use IP filter or balancer with password to restrict ${GREEN}VNC${MAGENTA} port access${NORMAL}"
			${ECHO} "${MAGENTA}Or change vnc_bind params to ${GREEN}127.0.0.1${MAGENTA} and reboot VM after maintenance work${NORMAL}"
			echo
		fi
	fi

	return 0
}
###
fi
