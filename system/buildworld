#!/bin/sh
#v9.2.0
globalconf="${workdir}/cbsd.conf";
MYARG=""
MYOPTARG="ver arch maxjobs clean basename stable distcc ccache notify"
MYDESC="Buildworld from sources"
ADDHELP="ver=head for current.\n\
stable=1 for RELENG_X\n\
distcc=1 - enable distcc\n\
ccache=1 - enable ccache\n"

[ -f ${globalconf} ] || err 1 "no such conf file";
. ${globalconf}
. ${subr}
. ${inventory}
init $*

. ${buildconf}
. ${distccacheconf}
. ${mailconf}
. ${etcdir}/buildworld.conf
. ${color}

if [ "${distcc}" = "1"  ]; then
    if ! distcc_check; then
	distcc=0
    fi
else
    distcc=0
fi

if [ "${notify}" = "1"  ]; then
    notify=1
else
    notify=0
fi

if [ "${ccache}" = "1"  ]; then
    ccache_prefix="cbsd buildworld $ver $arch $basename"
    ccache_dir="/var/cache/ccache"
    init_ccache_dir
    export CCACHE_DIR=$ccache_realdir

    if ! ccache_check; then
	ccache=0
    fi
else
    ccache=0
fi

SRC="${srcdir}/src_${ver}"
[ -d "${SRC}" ] || err 1 "${MAGENTA}No such version: ${GREEN}${SRC}${NORMAL}"
[ "${arch}" = "amd64" -o "${arch}" = "i386" ] || err 1 "${MAGENTA}Supported architecture only: ${GREEN}amd64 i386${NORMAL}"

truncate -s0 ${ftmpdir}/make.$$.conf

if [ -z "${basename}" ]; then
    [ -f "${etcdir}/make.conf" ] && origmakeconf="${etcdir}/make.conf"
else
    [ -f "${etcdir}/make-$basename.conf" ] && origmakeconf="${etcdir}/make-$basename.conf"
fi

export __MAKE_CONF=${ftmpdir}/make.$$.conf
[ $ccache -eq 1 -o $distcc -eq 1 ] && prepare_make_conf ${origmakeconf} ${__MAKE_CONF}
if [ -z "${basename}" ]; then
    export MAKEOBJDIRPREFIX=${srcdir}/obj_${arch}_${ver}
else
    export MAKEOBJDIRPREFIX=${srcdir}/obj_${basename}_${arch}_${ver}
fi

if [ -z "${basename}" ]; then
    export SRCCONF=${etcdir}/src.conf
else
    export SRCCONF=${etcdir}/src-${basename}.conf
fi

NUMJOBS=""
[ $maxjobs -eq 0 ] || NUMJOBS="-j${maxjobs}"

NOCLEANUP=""
[ ${clean} -eq 1 ] || NOCLEANUP="-DNO_CLEAN"

DST="${srcdir}/src_${ver}/src"
LOCKFILE=${ftmpdir}/src_`md5 -qs ${DST}`.lock
[ $notify -eq 1 ] && BLDLOG="${tmpdir}/build.$$.log"
makelock ${LOCKFILE} "rm -f ${__MAKE_CONF} ${BLDLOG}"

DT_START=`date +%s`

case "${arch}" in
"i386")
    export MACHINE="i386"
    export UNAME_p="i386"
    export UNAME_m="i386"
    export TARGET="i386"
    export TARGET_ARCH="i386"
    export MACHINE_ARCH="i386"
    export BUILD_ARCH="i386"
    ;;
"amd64")   
    export MACHINE="amd64"
    export UNAME_p="amd64"
    export UNAME_m="amd64"
    export TARGET="amd64"
    export TARGET_ARCH="amd64"
    export MACHINE_ARCH="amd64"
    export BUILD_ARCH="amd64"
    ;;
esac

if [ $notify -eq 1 ]; then
    [ -z "$TAILSTRING" ] && TAILSTRING=50
    script ${BLDLOG} /usr/bin/make $NUMJOBS -C ${SRC}/src buildworld ${NOCLEANUP}
    res=$?
else
     /usr/bin/make $NUMJOBS -C ${SRC}/src buildworld ${NOCLEANUP}
    res=$?
fi

DT_END=`date +%s`

if [ $res -ne 0 -a $notify -eq 1 ]; then
    svnrev=`cd ${DST} && svn info |awk '/^Revision: /{printf $2}'`
    send_notification -s "[CBSD ${nodename}] buildworld $basename $ver $arch r${svnrev} failed." -b "`tail -n${TAILSTRING} ${BLDLOG}`"
    return 1
fi

if [ $res -eq 0 -a $notify -eq 1 ]; then
    svnrev=`cd ${DST} && svn info |awk '/^Revision: /{printf $2}'`
cat > ${BLDLOG} << EOF
Start time: `date -r ${DT_START}`
End time: `date -r ${DT_END}`
EOF
    send_notification -s "[CBSD ${nodename}] buildworld $basename $ver $arch r${svnrev} complete." -f ${BLDLOG}
    return 0
fi
