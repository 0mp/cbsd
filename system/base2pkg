#!/bin/sh
#v9.2.0
globalconf="${workdir}/cbsd.conf";
MYARG="target repo"
MYOPTARG="ver arch basename stable kernelname svnrev"
MYDESC="Split base or kernel part into pkg peaces"
ADDHELP="ver=head for current.\n\
stable=1 for RELENG_X\n\
repo= destination path to output packages\n\
kernelname= kernel config name\n\
svnrev= ver.XXX - when svnrev=src, get svn revision from source\n\
target= kernel, rescue, world, zoneinfo\n"


[ -f ${globalconf} ] || err 1 "no such conf file";
. ${globalconf}
. ${subr}
init $*

# By default ver=current version
. ${buildconf}
. ${base2pkgconf}



umount_temp_dirs()
{
# when error before cdir, we do not have any mounts by scripts
[ -z "${cdir}" -o ! -d "${cdir}" ] && return 0

 MOUNT_LIST=`mount | awk -F" on " '{print $2}' | awk -F"(" '{print $1}'`

 for mount_point in $MOUNT_LIST; do
    case $mount_point in
	$cdir/boot/kernel | \
        $cdir/usr/ports/distfiles | \
        $cdir/usr/ports | \
        $cdir/usr/src | \
        $cdir${CCACHE_DIR} | \
        $cdir/var/db/ports | \
        $cdir/compat/linux/proc | \
        $cdir/proc | \
        $cdir/dev)
            umount -f $mount_point
            ;;
    esac
 done

}


mount_temp_dirs()
{

    local _mydir="dev proc usr/compat/linux/proc  usr/src usr/ports/distfiles var/db/ports"
    local _i

    for _i in ${_mydir}; do
        [ ! -d "${cdir}/${_i}" ] && mkdir -p ${cdir}/${_i}
    done

    mount -t devfs devfs $cdir/dev
    kldstat -qm linprocfs || kldload linprocfs

    if [ "${R_ARCH}" = "i386" -o "${R_ARCH}" = "amd64" ]; then
        mkdir -p $cdir/compat/linux/proc
        mount -t linprocfs linprocfs $cdir/compat/linux/proc
    fi

    mkdir -p $cdir/proc
    mount -t procfs procfs $cdir/proc

    mkdir -p $cdir/usr/src
    mount -o ro -t nullfs $SRC/src $cdir/usr/src
}





#MAIN
SRC="${srcdir}/src_${ver}/src"

[ -z "${svnrev}" ] && svnrev="0"
[ "${svnrev}" = "src" -a -d "${SRC}" ] && svnrev=`cd ${SRC} && svn info |awk '/^Revision: /{printf $2}'`

if [ -z "${basename}" ]; then
    DST="${basejaildir}/${basejailpref}_${arch}_${ver}"
else
    DST="${basejaildir}/${basejailpref}_${basename}_${arch}_${ver}"
fi

if [ `uname -m` = "i386" -a "${arch}" = "amd64" ]; then
    err 1 "Cannot install amd64 base on i386 hosts"
fi

[ "$target" = "kernel" -a -z "${kernelname}" ] && kernelname="GENERIC"
[ -z "${name}" ] && name="GENERIC"


if [ -z "${basename}" ]; then
    kernel_conf="${sharedir}/base2pkg/freebsd-kernel-${ver}.conf ${sharedir}/base2pkg/freebsd-kernel-symbols-${ver}.conf"
    rescue_conf="${sharedir}/base2pkg/freebsd-rescue-${ver}.conf"
    world_conf="${sharedir}/base2pkg/freebsd-base-${ver}.conf ${sharedir}/base2pkg/freebsd-lib32-${ver}.conf ${sharedir}/base2pkg/freebsd-rescue-${ver}.conf ${sharedir}/base2pkg/freebsd-zoneinfo-${ver}.conf"
    zoneinfo_conf="${sharedir}/base2pkg/freebsd-zoneinfo-${ver}.conf"
    src_conf="${sharedir}/base2pkg/freebsd-src-${ver}.conf"
    KERNDST="${basejaildir}/kernel_${name}_${arch}_${ver}"
else
    kernel_conf="${sharedir}/base2pkg/freebsd-kernel-${basename}-${ver}.conf ${sharedir}/base2pkg/freebsd-kernel-symbols-${basename}-${ver}.conf"
    rescue_conf="${sharedir}/base2pkg/freebsd-rescue-${basename}-${ver}.conf"
    world_conf="${sharedir}/base2pkg/freebsd-base-${basename}-${ver}.conf ${sharedir}/base2pkg/freebsd-lib32-${basename}-${ver}.conf ${sharedir}/base2pkg/freebsd-rescue-${basename}-${ver}.conf ${sharedir}/base2pkg/freebsd-zoneinfo-${basename}-${ver}.conf"
    zoneinfo_conf="${sharedir}/base2pkg/freebsd-zoneinfo-${basename}-${ver}.conf"
    src_conf="${sharedir}/base2pkg/freebsd-src-${basename}-${ver}.conf"
    KERNDST="${basejaildir}/kernel_${basename}_${name}_${arch}_${ver}"
fi

echo "base: $DST"
echo "kernel: $KERNDST"
echo "ver: $ver.$svnrev"
echo "target: $target"
echo "repo: $repo"

[ ! -d "$repo" -o ! -d "$repo/All" ] && mkdir -p ${repo}/All && echo "${repo}/All created"

#set -eux
trap "umount_temp_dirs" EXIT

case "$target" in
kernel)
	: ${conf:=$kernel_conf}

	cdir="/tmp/base2pkg.$$"
	mkdir $cdir
	mount_nullfs ${DST} ${cdir}
	mount_nullfs ${KERNDST}/boot/kernel ${cdir}/boot/kernel
	DST=$cdir
	mk_kernel
	umount ${cdir}
	umount_temp_dirs
	rmdir ${cdir}
	;;
rescue)
	: ${conf:=$rescue_conf}
	mk_rescue
	;;
world)
	: ${conf:=$world_conf}
	mk_world
	;;
zoneinfo)
	: ${conf:=$zoneinfo_conf}
	mk_zoneinfo
	;;
src)
	: ${conf:=$src_conf}
	cdir="/tmp/base2pkg.$$"
        mkdir $cdir
        mount_nullfs ${DST} ${cdir}
	mount_nullfs ${SRC} ${cdir}/usr/src
        DST=$cdir
        mk_src
	umount_temp_dirs
	umount ${cdir}
	rmdir ${cdir}
	;;
*)
	usage
	;;
esac

cd $repo

pkg repo .

