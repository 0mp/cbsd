#!/bin/sh
#v10.1.2
globalconf="${workdir}/cbsd.conf";
MYARG=""
MYOPTARG="ver stable rev scmbase dst patch"
MYDESC="Update FreeBSD source tree in $srcdir"
ADDHELP="ver=head for current.\n\
stable=1 for STABLE_X\n\
rev=XXX where XXX - svn revision\n\
scmbase - alternative svn base URL\n\
dst - alternative dst dir\n\
patchset=apply patchet\n"

set -e
. ${globalconf}
set +e

. ${subr}
. ${inventory}
readconf srcup.conf
init $*

over="${ver}"
oarch="${arch}"

patch_kmem11()
{
	set +e
	[ -f "${distdir}/upgrade/patch/kmem-11/patch-11x-sys-kern-kern_jail.c" ] && cd ${dst}/sys/kern/ && patch --check -N < ${distdir}/upgrade/patch/kmem-11/patch-11x-sys-kern-kern_jail.c > /dev/null 2>&1
	[ $? -eq 0 ] && $ECHO "${MAGENTA}apply patch-11x-sys-kern-kern_jail.c patch for: ${GREEN}allow_kmem${NORMAL}" && patch < ${distdir}/upgrade/patch/kmem-11/patch-11x-sys-kern-kern_jail.c

	[ -f "${distdir}/upgrade/patch/kmem-11/patch-11x-sys-dev-drm-drmP.h" ] && cd ${dst}/sys/dev/drm/ && patch --check -N < ${distdir}/upgrade/patch/kmem-11/patch-11x-sys-dev-drm-drmP.h > /dev/null 2>&1
	[ $? -eq 0 ] && $ECHO "${MAGENTA}apply patch-11x-sys-dev-drm-drmP.h patch for: ${GREEN}allow_kmem${NORMAL}" && patch < ${distdir}/upgrade/patch/kmem-11/patch-11x-sys-dev-drm-drmP.h

	[ -f "${distdir}/upgrade/patch/kmem-11/patch-11x-sys-dev-drm2-drmP.h" ] && cd ${dst}/sys/dev/drm2/ && patch --check -N < ${distdir}/upgrade/patch/kmem-11/patch-11x-sys-dev-drm2-drmP.h > /dev/null 2>&1
	[ $? -eq 0 ] && $ECHO "${MAGENTA}apply patch-11x-sys-dev-drm2-drmP.h patch for: ${GREEN}allow_kmem${NORMAL}" && patch < ${distdir}/upgrade/patch/kmem-11/patch-11x-sys-dev-drm2-drmP.h

	[ -f "${distdir}/upgrade/patch/kmem-11/patch-11x-sys-sys-jail.h" ] && cd ${dst}/sys/sys/ && patch --check -N < ${distdir}/upgrade/patch/kmem-11/patch-11x-sys-sys-jail.h >/dev/null 2>&1
	[ $? -eq 0 ] && $ECHO "${MAGENTA}apply patch-11x-sys-sys-jail.h patch for: ${GREEN}allow_kmem${NORMAL}" && patch < ${distdir}/upgrade/patch/kmem-11/patch-11x-sys-sys-jail.h

	[ -f "${distdir}/upgrade/patch/kmem-11/patch-11x-sys-sys-priv.h" ] && cd ${dst}/sys/sys/ && patch --check -N < ${distdir}/upgrade/patch/kmem-11/patch-11x-sys-sys-priv.h >/dev/null 2>&1
	[ $? -eq 0 ] && $ECHO "${MAGENTA}apply patch-11x-sys-sys-priv.h patch for: ${GREEN}allow_kmem${NORMAL}" && patch < ${distdir}/upgrade/patch/kmem-11/patch-11x-sys-sys-priv.h
	set -e
}

patch_kmem10()
{
	set +e
	[ -f "${distdir}/upgrade/patch/kmem-11/patch-11x-sys-kern-kern_jail.c" ] && cd ${dst}/sys/kern/ && patch --check -N < ${distdir}/upgrade/patch/kmem-11/patch-11x-sys-kern-kern_jail.c > /dev/null 2>&1
	[ $? -eq 0 ] && $ECHO "${MAGENTA}apply patch-11x-sys-kern-kern_jail.c patch for: ${GREEN}allow_kmem${NORMAL}" && patch < ${distdir}/upgrade/patch/kmem-11/patch-11x-sys-kern-kern_jail.c

	[ -f "${distdir}/upgrade/patch/kmem-11/patch-11x-sys-dev-drm-drmP.h" ] && cd ${dst}/sys/dev/drm/ && patch --check -N < ${distdir}/upgrade/patch/kmem-11/patch-11x-sys-dev-drm-drmP.h > /dev/null 2>&1
	[ $? -eq 0 ] && $ECHO "${MAGENTA}apply patch-11x-sys-dev-drm-drmP.h patch for: ${GREEN}allow_kmem${NORMAL}" && patch < ${distdir}/upgrade/patch/kmem-11/patch-11x-sys-dev-drm-drmP.h

	[ -f "${distdir}/upgrade/patch/kmem-11/patch-11x-sys-dev-drm2-drmP.h" ] && cd ${dst}/sys/dev/drm2/ && patch --check -N < ${distdir}/upgrade/patch/kmem-11/patch-11x-sys-dev-drm2-drmP.h > /dev/null 2>&1
	[ $? -eq 0 ] && $ECHO "${MAGENTA}apply patch-11x-sys-dev-drm2-drmP.h patch for: ${GREEN}allow_kmem${NORMAL}" && patch < ${distdir}/upgrade/patch/kmem-11/patch-11x-sys-dev-drm2-drmP.h

	[ -f "${distdir}/upgrade/patch/kmem-11/patch-11x-sys-sys-jail.h" ] && cd ${dst}/sys/sys/ && patch --check -N < ${distdir}/upgrade/patch/kmem-11/patch-11x-sys-sys-jail.h >/dev/null 2>&1
	[ $? -eq 0 ] && $ECHO "${MAGENTA}apply patch-11x-sys-sys-jail.h patch for: ${GREEN}allow_kmem${NORMAL}" && patch < ${distdir}/upgrade/patch/kmem-11/patch-11x-sys-sys-jail.h

	[ -f "${distdir}/upgrade/patch/kmem-11/patch-11x-sys-sys-priv.h" ] && cd ${dst}/sys/sys/ && patch --check -N < ${distdir}/upgrade/patch/kmem-11/patch-11x-sys-sys-priv.h >/dev/null 2>&1
	[ $? -eq 0 ] && $ECHO "${MAGENTA}apply patch-11x-sys-sys-priv.h patch for: ${GREEN}allow_kmem${NORMAL}" && patch < ${distdir}/upgrade/patch/kmem-11/patch-11x-sys-sys-priv.h
	set -e
}


patch_bfs11()
{
	set +e
	[ -f "${distdir}/upgrade/patch/bfs-11/patch-sys-conf-files" ] && cd ${dst}/sys/conf/ && patch --check -N < ${distdir}/upgrade/patch/bfs-11/patch-sys-conf-files > /dev/null 2>&1
	[ $? -eq 0 ] && $ECHO "${MAGENTA}apply patch-sys-conf-files patch for: ${GREEN}bfs${NORMAL}" && patch < ${distdir}/upgrade/patch/bfs-11/patch-sys-conf-files

	[ -f "${distdir}/upgrade/patch/bfs-11/patch-sys-conf-options" ] && cd ${dst}/sys/conf/ && patch --check -N < ${distdir}/upgrade/patch/bfs-11/patch-sys-conf-options > /dev/null 2>&1
	[ $? -eq 0 ] && $ECHO "${MAGENTA}apply patch-sys-conf-options patch for: ${GREEN}bfs${NORMAL}" && patch < ${distdir}/upgrade/patch/bfs-11/patch-sys-conf-options

	[ -f "${distdir}/upgrade/patch/bfs-11/patch-sys-kern-kern_switch.c" ] && cd ${dst}/sys/kern/ && patch --check -N < ${distdir}/upgrade/patch/bfs-11/patch-sys-kern-kern_switch.c > /dev/null 2>&1
	[ $? -eq 0 ] && $ECHO "${MAGENTA}apply patch-sys-kern-kern_switch.c patch for: ${GREEN}bfs${NORMAL}" && patch < ${distdir}/upgrade/patch/bfs-11/patch-sys-kern-kern_switch.c

	[ -f "${distdir}/upgrade/patch/bfs-11/patch-sys-kern-sched_fbfs.c" ] && cd ${dst}/sys/kern/ && patch --check -N < ${distdir}/upgrade/patch/bfs-11/patch-sys-kern-sched_fbfs.c > /dev/null 2>&1
	[ $? -eq 0 -a ! -f "${dst}/sys/kern/sched_fbfs.c" ] && $ECHO "${MAGENTA}apply patch-sys-kern-sched_fbfs.c patch for: ${GREEN}bfs${NORMAL}" && patch < ${distdir}/upgrade/patch/bfs-11/patch-sys-kern-sched_fbfs.c

	[ -f "${distdir}/upgrade/patch/bfs-11/patch-sys-sys-runq.h" ] && cd ${dst}/sys/sys/ && patch --check -N < ${distdir}/upgrade/patch/bfs-11/patch-sys-sys-runq.h > /dev/null 2>&1
	[ $? -eq 0 ] && $ECHO "${MAGENTA}apply patch-sys-sys-runq.h patch for: ${GREEN}bfs${NORMAL}" && patch < ${distdir}/upgrade/patch/bfs-11/patch-sys-sys-runq.h
	set -e
}

patch_bfs10()
{
	set +e
	[ -f "${distdir}/upgrade/patch/bfs-11/patch-sys-conf-files" ] && cd ${dst}/sys/conf/ && patch --check -N < ${distdir}/upgrade/patch/bfs-11/patch-sys-conf-files > /dev/null 2>&1
	[ $? -eq 0 ] && $ECHO "${MAGENTA}apply patch-sys-conf-files patch for: ${GREEN}bfs${NORMAL}" && patch < ${distdir}/upgrade/patch/bfs-11/patch-sys-conf-files

	[ -f "${distdir}/upgrade/patch/bfs-11/patch-sys-conf-options" ] && cd ${dst}/sys/conf/ && patch --check -N < ${distdir}/upgrade/patch/bfs-11/patch-sys-conf-options > /dev/null 2>&1
	[ $? -eq 0 ] && $ECHO "${MAGENTA}apply patch-sys-conf-options patch for: ${GREEN}bfs${NORMAL}" && patch < ${distdir}/upgrade/patch/bfs-11/patch-sys-conf-options

	[ -f "${distdir}/upgrade/patch/bfs-11/patch-sys-kern-kern_switch.c" ] && cd ${dst}/sys/kern/ && patch --check -N < ${distdir}/upgrade/patch/bfs-11/patch-sys-kern-kern_switch.c > /dev/null 2>&1
	[ $? -eq 0 ] && $ECHO "${MAGENTA}apply patch-sys-kern-kern_switch.c patch for: ${GREEN}bfs${NORMAL}" && patch < ${distdir}/upgrade/patch/bfs-11/patch-sys-kern-kern_switch.c

	[ -f "${distdir}/upgrade/patch/bfs-11/patch-sys-kern-sched_fbfs.c" ] && cd ${dst}/sys/kern/ && patch --check -N < ${distdir}/upgrade/patch/bfs-11/patch-sys-kern-sched_fbfs.c > /dev/null 2>&1
	[ $? -eq 0 -a ! -f "${dst}/sys/kern/sched_fbfs.c" ] && $ECHO "${MAGENTA}apply patch-sys-kern-sched_fbfs.c patch for: ${GREEN}bfs${NORMAL}" && patch < ${distdir}/upgrade/patch/bfs-11/patch-sys-kern-sched_fbfs.c

	[ -f "${distdir}/upgrade/patch/bfs-11/patch-sys-sys-runq.h" ] && cd ${dst}/sys/sys/ && patch --check -N < ${distdir}/upgrade/patch/bfs-11/patch-sys-sys-runq.h > /dev/null 2>&1
	[ $? -eq 0 ] && $ECHO "${MAGENTA}apply patch-sys-sys-runq.h patch for: ${GREEN}bfs${NORMAL}" && patch < ${distdir}/upgrade/patch/bfs-11/patch-sys-sys-runq.h
	set -e
}

patch_path_max11()
{
	set +e
	[ -f "${distdir}/upgrade/patch/path_max/patch-10x-sys-sys-syslimits.h" ] && cd ${dst}/sys/sys/ && patch --check -N < ${distdir}/upgrade/patch/path_max/patch-10x-sys-sys-syslimits.h > /dev/null 2>&1
	[ $? -eq 0 ] && $ECHO "${MAGENTA}apply patch-sys-sys-syslimits.h patch for: ${GREEN}PATH_MAX${NORMAL}" && patch < ${distdir}/upgrade/patch/path_max/patch-10x-sys-sys-syslimits.h
	set -e
}

apply_cbsd_patchset()
{
	case "${ver}" in
		10*)
			if [ "${ver}" != "10.0" ]; then # not for 10.0-R
				patch_kmem10
				patch_bfs10
			fi
			;;
		11*)
			patch_kmem11
			patch_bfs11
			;;
	esac

	return 0
}

init_svn()
{
	SCM=""

	if [ -f "/usr/bin/svnlite" ]; then
		SCM="/usr/bin/svnlite"
	elif [ -f "/usr/local/bin/svn" ]; then
		SCM="/usr/local/bin/svn"
	else
		err 1 "${MAGENTA}No svn in the base. Please install devel/subversion${NORMAL}"
	fi

	[ -z "${scmbase}" ] && scmbase="${SVNBASE}"

	if [ "${stable}" = "1" ]; then
		SCM_URL="${scmbase}/stable/${ver}"
	else
		SCM_URL="${scmbase}/releng/${ver}"
	fi

	[ "$ver" = "11.0" -o "${ver}" = "11" ] && SCM_URL="${scmbase}/head"

	return 0
}


init_git()
{
	SCM=""

	if [ -f "/usr/local/bin/git" ]; then
		SCM="/usr/local/bin/git"
	else
		err 1 "${MAGENTA}No git in the base. Please install devel/git${NORMAL}"
	fi

	[ -z "${scmbase}" ] && scmbase="${GITBASE}"

	if [ "${stable}" = "1" ]; then
		SCM_URL="${scmbase}/stable/${ver}"
	else
		SCM_URL="${scmbase}/releng/${ver}"
	fi

	[ "$ver" = "11.0" -o "${ver}" = "11" ] && SCM_URL="${scmbase}/head"

	return 0
}


svn_checkout()
{
	# repair and upgrade
	if [ -d "${dst}/.svn" ]; then
		cd ${dst}
		${SCM} cleanup
		${SCM} upgrade
		${SCM} cleanup
	fi

	${SCM} checkout -r ${rev} ${SCM_URL} ${dst}
}

git_checkout()
{
	local _depth

	[ "${depth}" != "0" ] && _depth="${depth}"

	if [ -d "${dst}/.git" ]; then
		cd ${dst} && ${SCM} checkout DragonFly_RELEASE_3_8
		cd ${dst} && ${SCM} pull ${_depth}
	else
		${SCM} clone -b ${rev} ${git_flags} ${SCM_URL} ${dst}
	fi
}


### MAIN ###
. ${buildconf}
readconf buildworld.conf
. ${workdir}/universe.subr

init_distcc
init_notify
init_target_arch
init_srcdir
init_supported_arch
init_make_flags

set +e
. ${buildconf}
set -e

if [ -n "${dst}" ]; then
	dst="${srcdir}/src_${ver}/src"
else
	dst="${SRC_DIR}"
fi

LOCKFILE=${ftmpdir}/src_$( md5 -qs ${dst} ).lock
makelock ${LOCKFILE}

[ ! -d "${dst}" ] && /bin/mkdir -p ${dst}

case "${checkout_method}" in
	svn*)
		init_svn
		svn_checkout
		;;
	git*)
		init_git
		git_checkout
		;;
	*)
		err 1 "${ECHO}Unknown checkout method. Please specify it via: ${GREEN}srcup.conf${NORMAL}"
esac

[ "${apply_cbsd_patch}" = "1" ] && apply_cbsd_patchset

if [ ! -f "${dst}/Makefile" ]; then
	/bin/rm -rf ${dst}
	err 1 "No source code for ${ver}"
fi
