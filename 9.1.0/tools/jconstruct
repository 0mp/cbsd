#!/bin/sh
#v9.1.0
MYDESC="console dialog for jail creation"
globalconf="${workdir}/cbsd.conf";
MYARG=""
MYOPTARG=""

[ -f ${globalconf} ] || err 1 "no such conf file";
. ${globalconf}
. ${subr}
. ${inventory}
init $*

# $jname
get_jname()
{
answ=
while [ x$answ = x ]; do
echo "Please enter jail short name (one word) [e.g.: jail1]: "
read answ
done
export jname=$answ
}

# $fqdn
get_jail_fqdn()
{
answ=
while [ x$answ = x ]; do
echo "Please enter jail FQDN (one word) [e.g.: jail1.my.domain]: "
read answ
done
export fqdn=$answ
}



# $ips
get_jail_ips()
{
answ=
while [ x$answ = x ]; do
echo "Please enter jail ip [e.g.: from your NC poor ${nodeippool}]: "
read answ
done
export ip4_addr=$answ
}

# $oninterface
get_jail_oninterface()
{
st=

while [ x$st = x ]; do
echo "Auto assign and remove ip when jail start/stop? [y/n]: "
read reply leftover
    case $reply in
         y* | Y*)
            st=1
                        ;;
                n* | n*)
	    st=0
                        ;;
        esac
done

export oninterface=$st
}


# $vnet
get_jail_vnet()
{
st=

while [ x$st = x ]; do
echo "Jail with VIMAGE feature[y/n]: "
read reply leftover
    case $reply in
         y* | Y*)
            st=1
                        ;;
                n* | n*)
	    st=0
                        ;;
        esac
done

export vnet=$st
}

# $base
get_jail_base()
{
answ=

while [ x$answ = x ]; do
echo "Please choose jail base source [e.g.: `uname -r|cut -d "-" -f1`]: "
read answ
done

export ver=$answ
}

# $base
get_jail_arch()
{
answ=

while [ x$answ = x ]; do
echo "Please set arch [e.g.: `uname -m`]: "
read answ
done

export arch=$answ
}


# $baserw
get_jail_baserw()
{
st=

while [ x$st = x ]; do
echo "Can't modify base system (no nullfs mount) [y/n]: "

read reply leftover
    case $reply in
         y* | Y*)
            st=1
                        ;;
                n* | n*)
	    st=0
                        ;;
        esac
done

export baserw=$st
}

# $srcmount
get_jail_srcmount()
{
st=

while [ x$st = x ]; do
echo "Jail with /usr/src via nullfs[y/n]: "

read reply leftover
    case $reply in
         y* | Y*)
            st=1
                        ;;
                n* | n*)
	    st=0
                        ;;
        esac
done

export srcmount=$st
}

# $objmount
get_jail_objmount()
{
st=

while [ x$st = x ]; do
echo "Jail with /usr/obj via nullfs [y/n]: "

read reply leftover
    case $reply in
         y* | Y*)
            st=1
                        ;;
                n* | n*)
	    st=0
                        ;;
        esac
done

export objmount=$st
}

# $portsmount
get_jail_portsmount()
{
st=

while [ x$st = x ]; do
echo "Jail with /usr/ports via nullfs [y/n]: "

read reply leftover
    case $reply in
         y* | Y*)
            st=1
                        ;;
                n* | n*)
	    st=0
                        ;;
        esac
done

export portsmount=$st
}


# $applytpl
get_jail_applytpl()
{
st=

while [ x$st = x ]; do
echo "Apply standart NC skel template whe jail create [y/n]: "

read reply leftover
    case $reply in
         y* | Y*)
            st=1
                        ;;
                n* | n*)
	    st=0
                        ;;
        esac
done

export applytpl=$st
}






# $astart
get_jail_astart()
{
st=

while [ x$st = x ]; do
echo "Jail auto startup with system [y/n]: "

read reply leftover
    case $reply in
         y* | Y*)
            st=1
                        ;;
                n* | n*)
	    st=0
                        ;;
        esac
done

export astart=$st
}



gen_newjail_conf()
{
DT=`date "+%Y%m%d_%H_%M"`
TMPFILE="${ftmpdir}/${DT}-${jname}.jconf"

#JNAME=$2
#JHOSTNAME=$3
#IPS=$4
#VER=${1}

data="${jaildatadir}/${jname}-${jaildatapref}"
rootdir="${jaildir}/${jname}"
fstab="${jailfstabdir}/${jailfstabpref}${jname}"
rcconf="${jailrcconfdir}/rc.conf_${jname}"

cat > ${TMPFILE} << EOF
jname="${jname}";
path="${rootdir}";
host_hostname="${fqdn}";
ip4_addr="${ip4_addr}";
mount_devfs;
allow_mount="1";
allow_devfs="-";
allow_nullfs="0";
mount_fstab="${fstab}";
arch="${arch}";
mkhostsfile="1";
devfs_ruleset="4";
EOF

if [ $oninterface -eq 1 ]; then
cat >> ${TMPFILE} << EOF
interface="${jail_interface}";
EOF
fi

cat >> ${TMPFILE} << EOF
ver="${ver}";
baserw="$baserw";
basename="";
srcmount="$srcmount";
objmount="$objmount";
portsmount="$portsmount";
astart="$astart";
data="${data}";
vnet_interface="$vnet";
applytpl="${applytpl}";
rcconf="${jailrcconfdir}/rc.conf_${jname}";
floatresolv="${floatresolv}";
exec_start="/bin/sh /etc/rc";
exec_stop="/bin/sh /etc/rc.shutdown";

exec_poststart="";
exec_poststop="";
exec_prestart="";
exec_prestop="";

exec_master_poststart="";
exec_master_poststop="";
exec_master_prestart="";
exec_master_prestop="";

EOF
err 0 "You can make now: cbsd jcreate jconf=${TMPFILE}"
}

more << EOF_HEADER
---------[NodeCenter v.${ncversion}]---------
Welcome to jail constructor script. 

For DIALOG-based menu please use jconstruct-tui utility
For X11 based menu please use jconstruct-x11 utility
For WEB based forms please use http:// page.

This is config constructor for using by <make_jail> scripts

-----------------------
EOF_HEADER

agreed=
while [ x$agreed = x ]; do
        echo "Proceed to construct? [yes or no]"
        read reply leftover
        case $reply in
                y* | Y*)
                        agreed=1
                        ;;
                n* | n*)
                        echo
                        exit 1
                        ;;
        esac
done

get_jname
get_jail_fqdn
get_jail_ips
get_jail_base
get_jail_arch
get_jail_baserw
get_jail_srcmount
get_jail_objmount
get_jail_portsmount
get_jail_astart
get_jail_oninterface
get_jail_vnet
get_jail_applytpl
gen_newjail_conf

