#!/bin/sh
#v9.1.1
globalconf="${workdir}/cbsd.conf";
MYARG="jconf"
MYOPTARG="inter"
MYDESC="Create jail from config file"
ADDHELP="inter=0 to prevent any questions and to accept answers by default\n"

[ -f ${globalconf} ] || err 1 "no such conf file";
. ${globalconf}
. ${subr}
. ${system}
. ${inventory}
init $*

mkfstab() {
    if [ $baserw -eq 1 ]; then
cat > ${mount_fstab} << EOF
EOF
    else
cat > ${mount_fstab} << EOF
${data}/etc /etc nullfs rw 0 0
${data}/root /root nullfs rw 0 0
${data}/tmp /tmp nullfs rw 0 0
${data}/usr/home /usr/home nullfs rw 0 0
${data}/usr/local /usr/local nullfs rw 0 0
${data}/var /var nullfs rw 0 0
/var/cache/pkg /var/cache/pkg nullfs rw 0 0
#
EOF
    fi

    if [ $srcmount -eq 1 ]; then
	SOURCE="$srcdir/src_${ver}"
cat >> ${mount_fstab} << EOF
${SOURCE}/src /usr/src nullfs rw 0 0
EOF

    fi

    if [ $portsmount -eq 1 ]; then
	cat >> ${mount_fstab} << EOF
/usr/ports /usr/ports nullfs rw 0 0
EOF
    fi
}


mkrcconf() {
    cp $jconf $rcconf
}

### MAIN
[ -f "$jconf" ] || err 1 "no such jconf file";
. ${jconf}

cbsd jstatus jname=${jname} > /dev/null 2>&1
[ $? -eq 0 ] || err 1 "Jail with $jname already exist"
[ -z "${arch}" -o "${arch}" = "native" ] && arch=`uname -m`
[ -z "${ver}" -o "${ver}" = "native" ] && ver=`sysctl -n kern.osrelease|cut -d - -f 1`

### CURRENT
src="${basejaildir}/${basejailpref}_${arch}_${ver}"

CPEXE="/bin/cp -Rp "

JAILNODATA=".cshrc \
bin \
media \
rescue \
sys \
.profile \
boot \
lib \
mnt \
COPYRIGHT \
libexec \
proc \
sbin \
usr/bin \
usr/games \
usr/include \
usr/lib \
usr/lib32 \
usr/libdata \
usr/libexec \
usr/local \
usr/sbin \
usr/share"

if [ ! -d "${src}" ]; then
    [ "${ver}" = "empty" ] || {
	#    echo "No data at ${src}"
	getyesno "No base in ${src}. Try to fetch from remote repository?"
	[ $? -eq 1 -o $? -eq 3 ] && err 1 "No data at ${src}"
	cbsd repo action=get sources=base arch=${arch} ver=${ver}
	[ $? -eq 1 ] && err 1 "No data at ${src}"
    }
fi


if [ -n "${interface}" -a "${inteface}" != "0" ]; then
	### CHECK FOR IP ( 1 - check for interfaces) ####
	cbsd checkip ip=${ips} check=1 > /dev/null 2>&1
	case $? in
	    0) err 1 "Ip not in pool range"
		;;
	    1)	;;
	    2) echo "Warning: Ip already exists in LAN"
		;;
	    default) exit
        	;;
	esac
	#####################
fi

echo "Please wait: it will take some time..."

[ -d "${data}" ] && {
	case $zfsfeat in
	    0) chflags -R noschg ${data}
		rm -rf "${data}"
		;;
	    1)  . $zfstool
		zfsmnt ${data}
		case $? in
		    0) break 
			;;
		    [12]) echo "Remove stale zfs"
		    /sbin/zfs unmount ${ZPOOL} && zfs destroy ${ZPOOL}
			;;
		    *) err 1 "Unknown result from zfsmnt" 
		        ;;
		esac
		;;
	esac
}

case $zfsfeat in
	"0") [ -d ${data} ] || mkdir -p ${data} 
	    ;;
	"1") . $zfstool
	    ZPOOL=`zfs get -Ho value name ${jaildatadir}`

	    if zfsroot $jname; then
		err 1 "$ZPOOL/$jname already in use"
	    fi

	    zfs create -o atime=off -o mountpoint=${data} ${ZPOOL}/$jname 
	    ;;
esac

    [ -d "${data}" ] || err 1 "Can't create datadir"
    [ -d ${path} ] || mkdir -p ${path}
    [ -d ${jailfstabdir}  ] || mkdir -p ${jailfstabdir}
    [ -d ${jailrcconfdir}  ] || mkdir -p ${jailrcconfdir}

### COPY FROM BASE
if [ "${ver}" != "empty" ]; then

    $CPEXE $src/ $data/

    if [ $baserw -ne 1 ]; then
	for _RES in ${JAILNODATA}; do
	res="$data/${_RES}"
	    if [ -f ${res} -a -L ${res} ]; then
		chflags noschg ${res}
		rm -f ${res}
	    else
	    if [ -d ${res} ]; then
		chflags -R noschg ${res}
		rm -rf ${res}
	    fi
	fi
	done
fi

touch "${data}/etc/fstab"

[ -d ${data}/var ] || mkdir ${data}/var
[ -d ${data}/usr/local ] || mkdir ${data}/usr/local
[ -d ${data}/usr/compat ] || mkdir ${data}/usr/compat
[ -d ${data}/usr/ports ] || mkdir ${data}/usr/ports

if [ ${applytpl} -eq 1 ]; then

[ -f ${jailskeldir}/master.passwd ] && {
    cp ${jailskeldir}/master.passwd ${data}/etc
    /usr/sbin/pwd_mkdb -d ${data}/etc ${data}/etc/master.passwd
}
[ -f ${jailskeldir}/rc.conf ] && cp ${jailskeldir}/rc.conf ${data}/etc
[ -f ${jailskeldir}/make.conf ] && cp ${jailskeldir}/make.conf ${data}/etc
[ -f ${jailskeldir}/crontab ] && cp ${jailskeldir}/crontab ${data}/etc
[ -f ${jailskeldir}/resolv.conf ] && cp ${jailskeldir}/resolv.conf ${data}/etc
[ -f /etc/localtime ] && cp /etc/localtime ${data}/etc
fi


fi  # if ver = empty

mkfstab
mkrcconf

if [ "${pkglist}" != "NO" -a "${ver}" != "empty" -a -f "${pkglist}" ]; then
    echo "Populate jail data by pkg from repository via pkglist..."
    mountbase
    cbsd mountfstab jroot=${path} fstab=${mount_fstab} > /dev/null 2>&1
    mount -t devfs devfs $path/dev
    #
    [ ! -d "${path}/usr/local/etc" ] && mkdir ${path}/usr/local/etc
    cp /usr/local/etc/pkg.conf ${path}/usr/local/etc/
    printf "pkg: [boostrap... "
    chroot ${path} env ASSUME_ALWAYS_YES=yes pkg > /dev/null 2>&1
    printf "looking for new version... "
    chroot ${path} env ASSUME_ALWAYS_YES=yes pkg update -f > /dev/null 2>&1
    #lets upgrade pkg if new version available
    printf "upgrading... "
    chroot ${path} env ASSUME_ALWAYS_YES=yes pkg upgrade > /dev/null 2>&1
    PKGLIST=`cat ${pkglist} |xargs`
    printf "install for ${PKGLIST}...]\n"
    chroot ${path} env ASSUME_ALWAYS_YES=yes pkg install ${PKGLIST}
    cbsd unmountfstab jroot=${path} fstab=${mount_fstab} > /dev/null 2>&1
    umount -f ${path}/dev
    unmountbase
    rm -f ${pkglist}
fi

echo
echo "Creating ${jname} complete: Enjoy!"
