# change passwd for cbsd user via prompt
change_cbsdpw() {
    local oldmodes=`stty -g`
    local pw="1"
    local npw=""

    echo "Changing local password for cbsd user."

    while [ "$pw" != "${npw}" ]; do
	printf "New Password: "
	stty -echo
	read pw
	printf "\nRetype New Password: "
	read npw
	[ "$pw" = "${npw}" ] || echo "Mismatch; try again, EOF to quit."
    done

    stty $oldmodes
    echo
    echo ${npw} |/usr/sbin/pw mod user ${cbsduser} -h 0 -
}

# usage: modconf [0] /etc/rc.conf ifconfig_lo0 "127.0.0.1/8"
# add or modify value for "^param="
# [0] - do not modify if param already exist
modconf() {
    local FORCE=1

    [ "${1}" != "0" ] || {
	FORCE=0
	shift
    }

    local FILE="${1}"
    local PARAM="${2}"
    local VAL="${3}"
    local ESCAPE=1

    # no escape value if not spaces
    A=`echo "${VAL}" |grep " "`

    [ $? -eq 1 ] && ESCAPE=0

    if [ -z "${FILE}" -o -z "${PARAM}" ]; then
	echo "Empty value in modconf"
	return
    fi

    [ -f "${FILE}" ] || touch ${FILE}

    local TMP="${FILE}.$$"
    cp ${FILE} ${TMP}
    trap "rm -f ${TMP}" 0

    if [ `grep -c ^${PARAM}\= ${FILE}` = 0 ]; then
	# just add
	cp ${FILE} $TMP
	if [ $ESCAPE -eq 1 ]; then
	    echo "${PARAM}=\"${VAL}\"" >> ${FILE}
	else
	    echo "${PARAM}=${VAL}" >> ${FILE}
	fi

	sh -n ${FILE}

	if [ $? -ne 0 ]; then
	    echo "Bad syntax, back to original"
	    mv ${TMP} ${FILE}
	    sync
	    return
	fi

	rm -f ${TMP}
	sync
	return
    fi

    # modify if not force
    [ $FORCE -eq 1 ] || {
	rm -f ${TMP}
	sync
	return
    }

    grep -v "^${PARAM}\=" ${TMP} > ${FILE}
    echo "${PARAM}=\"${VAL}\"" >> ${FILE}

    sh -n ${FILE}

    if [ $? -ne 0 ]; then
	echo "Bad syntax, back to original"
	mv ${TMP} ${FILE}
    fi
    rm -f ${TMP}
    sync
}

#return 0 errcode for undefined type
#return 1 errcode for ipv4
#return 2 errcode for ipv6
iptype() {

    [ -z "${1}" ] && return 0

    # Identify type {inet,inet6}.
    case "${1}" in
*\.*\.*\.*)     return 1 ;;
*:*)            return 2 ;;
*)              return 0 ;;
    esac
}


resolvhost()
{
    HST=`host -4 -t a $1 | awk '/has address /{print $4"\n"}' |head -n1 |egrep '^([[:digit:]]{1,3}\.){3}[[:digit:]]{1,3}$'`
}
