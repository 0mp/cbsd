SYSINI="nodename nodeip nodedescr jnameserver nodeippool natip fbsdrepo zfsfeat mdtmp parallel"

# install file from $2 to $3 if not equal
# $1 addit.  arg for install
installne()
{
if ! cmp -s $2 $3; then
    install $1 $2 $3
    return 1
fi
return 0
}


# if arg then force configure
configure_nat()
{
RFC1918="10.0.0.0/8 172.16.0.0/12 192.168.0.0/16"
EXT_IFACE=`route -n get 0.0.0.0 |awk '/interface/{print $2}'`

[ `grep -c ^nat_enable ${inventory}` = "1" -a -z "$1" ] && return

# this question not neccessary when forcing config
if [ -z "$1" ]; then
    if ! getyesno "Configure NAT for RFC1918 Network?"; then
	modconf ${inventory} nat_enable NO
	cbsd inventorysql --dbfile=${dbdir}/inv.${nodename} --action=update --param=nat_enable --value=0
        return
    fi
fi

DEFAULT="pf"
answ=
while [ "$answ" != "ok" ]; do
printf "Which one NAT framework should be use: [$DEFAULT]\n"
echo "(type FW name, eg pf,ipfw or \"exit\" for break)"
read answ leftover
[ -z "$answ" ] && answ="${DEFAULT}"
[ "${answ}" != "exit" ] || return

case "${answ}" in
"pf")
	modconf ${inventory} nat_enable ${answ}
	cbsd inventorysql --dbfile=${dbdir}/inv.${nodename} --action=update --param=nat_enable --value=${answ}
        modconf /boot/loader.conf pf_load YES

truncate -s0 ${etcdir}/pfnat.conf
for NET in ${RFC1918}; do
    NM=`echo ${NET} |tr "/" " "`
    ${workdir}/sbin/netmask ${NM} ${natip}
    if [ $? -ne 1 ]; then
cat >> ${etcdir}/pfnat.conf <<EOF
nat on ${EXT_IFACE} from ${NET} to ! ${NET} -> ${natip}
EOF
    fi
done
#cat >> ${etcdir}/pfnat.conf << EOF
#pass quick all
#EOF
answ="ok"
;;
"ipfw")
        modconf ${inventory} nat_enable ipfw
        modconf /boot/loader.conf ipfw_nat_load YES
        modconf /boot/loader.conf libalias_load YES
        modconf /boot/loader.conf pf_load NO
	modconf /boot/loader.conf ipl_load NO
	modconf /boot/loader.conf ipfilter NO
	truncate -s0 ${etcdir}/ipfw.conf
    NM=`echo ${RFC1918} |tr " " ","`
#    ${workdir}/sbin/netmask ${NM} ${natip}
#    if [ $? -ne 1 ]; then

    EXTIFACE=`route -n get default | awk '/interface:/{print $2}'`
    ifconfig ${EXTIFACE} >/dev/null 2>&1

    if [ $? -eq 0 ]; then
	cat >> ${etcdir}/ipfw.conf << EOF
/sbin/ipfw -q add 65000 nat 123 all from ${NM} to not ${NM} any via ${EXTIFACE}
/sbin/ipfw -q nat 123 config ip ${natip}
/sbin/ipfw -q add 65000 nat 123 ip from any to ${natip} via ${EXTIFACE}
EOF
    fi
    answ="ok"
;;
esac
done
}

# if arg then force configure
configure_named()
{
FILE="/var/named/etc/namedb/named.conf"
STRING="listen-on"

}

rsyncd_enable()
{
    [ ! -f "${inventory} " ] || . ${inventory}
    modconf /etc/rc.conf cbsdrsyncd_enable "YES"
#    [ -z "$nodeip" ] || modconf 0 /etc/rc.conf rsyncd_flags "--address=${nodeip} --config=${etcdir}/rsyncd.conf"
    [ -z "$nodeip" ] || modconf 0 /etc/rc.conf cbsdrsyncd_flags "--config=${etcdir}/rsyncd.conf"
    [ -f "/usr/local/etc/rc.d/cbsdrsyncd" ] && modconf /usr/local/etc/rc.d/cbsdrsyncd required_files "${etcdir}/cbsdrsyncd.conf"
    service cbsdrsyncd start
}

named_enable()
{
    modconf /etc/rc.conf named_enable "YES"
    cp ${etcdir}/cbsdnamed.conf /etc/namedb
    modconf /etc/rc.conf named_conf "/etc/namedb/cbsdnamed.conf"
    service named start
}


rsyncd_disable()
{
    service cbsdrsyncd stop > /dev/null 2>&1
    modconf /etc/rc.conf cbsdrsyncd_enable "NO"
}

named_disable()
{
    service named stop > /dev/null 2>&1
    modconf /etc/rc.conf named_enable "NO"
}

configure_rsync()
{
if [ ! -f "/usr/local/etc/rc.d/cbsdrsyncd" ]; then
    [ ! -d "/usr/local/etc/rc.d/" ] && mkdir /usr/local/etc/rc.d
    cp ${distdir}/rc.d/cbsdrsyncd /usr/local/etc/rc.d/
fi

if [ `grep -c cbsdrsyncd_enable /etc/rc.conf` = "1" ]; then
    return
fi

if ! getyesno "Configure RSYNC services for jail migration?"; then
    rsyncd_disable
else
    rsyncd_enable
fi
}

configure_named()
{
[ -f "${etcdir}/cbsdnamed.conf" ] || return 0

if [ `grep -c named_enable /etc/rc.conf` = "1" ]; then
    return 0
fi

if ! getyesno "Enable NAMED service for resolving?"; then
    named_disable
else
    named_enable
fi
}

