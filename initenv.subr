#user settings
USERINI="\
hostname \
nodeip \
nodedescr \
jnameserver \
nodeippool \
nat_enable \
natip \
fbsdrepo \
mdtmp \
repo \
workdir \
ipfw_enable \
zfsfeat \
jail_interface \
parallel \
stable"

#system settins
HWINI="fs ncpu physmem memtype disks cpumodel cpufreq kernhz sched eventtimer nics"

# install file from $2 to $3 if not equal
# $1 addit.  arg for install
installne()
{
if ! cmp -s $2 $3; then
    install $1 $2 $3
    return 1
fi
return 0
}


make_nat()
{
    case "${ok}" in
	"pf")
	    modconf /boot/loader.conf pf_load YES
	    truncate -s0 ${etcdir}/pfnat.conf

	    for _net in ${rfc1918}; do
		_nm=`echo ${_net} |tr "/" " "`
		${workdir}/sbin/netmask ${_nm} ${natip}
		if [ $? -ne 1 ]; then
		    cat >> ${etcdir}/pfnat.conf <<EOF
nat on ${ext_iface} from ${_net} to ! ${_net} -> ${natip}
EOF
		fi
	    done

	    answ="${ok}"
	    ok="ok"
	    cbsd inventorysql --dbfile=${dbdir}/local.sqlite --action=update --param=nat_enable --value=${answ}
	    return 0
            ;;
	"ipfw")
	    modconf /boot/loader.conf ipfw_nat_load YES
	    modconf /boot/loader.conf libalias_load YES
	    modconf /boot/loader.conf pf_load NO
	    modconf /boot/loader.conf ipl_load NO
	    modconf /boot/loader.conf ipfilter NO
	    truncate -s0 ${etcdir}/ipfw.conf
	    _nm=`echo ${rfc1918} |tr " " ","`
	    #    ${workdir}/sbin/netmask ${_nm} ${natip}
	    #    if [ $? -ne 1 ]; then
	    _extiface=`route -n get default | awk '/interface:/{print $2}'`
	    ifconfig ${_extiface} >/dev/null 2>&1

	    if [ $? -eq 0 ]; then
	    cat >> ${etcdir}/ipfw.conf << EOF
/sbin/ipfw -q add 65000 nat 123 all from ${_nm} to not ${_nm} any via ${_extiface}
/sbin/ipfw -q nat 123 config ip ${natip}
/sbin/ipfw -q add 65000 nat 123 ip from any to ${natip} via ${_extiface}
EOF
	    fi

	    answ="${ok}"
	    ok="ok"
	    cbsd inventorysql --dbfile=${dbdir}/local.sqlite --action=update --param=nat_enable --value=${answ}
	    return 0
	    ;;
    esac
return 1
}


# if arg then force configure
configure_nat()
{
    rfc1918="10.0.0.0/8 172.16.0.0/12 192.168.0.0/16"
    ext_iface=`route -n get 0.0.0.0 |awk '/interface/{print $2}'`

    local _default
    local _net _nm

    . ${tools}

    if [ "${inter}" = "0" ]; then
	cbsd inventorysql --dbfile=${dbdir}/local.sqlite --action=update --param=natip --value=${natip} 2>/dev/null
	ok="${nat_enable}"
	make_nat
	return 0
    fi

    _default=`cbsd inventorysql --dbfile=${dbdir}/local.sqlite --action=get --value=natip 2>/dev/null`

    iptype ${_default} >/dev/null 2>&1

    if [ $? -ne 1 ]; then
	_default=`cbsd inventorysql --dbfile=${dbdir}/local.sqlite --action=get --value=nodeip 2>/dev/null`
    fi

   ${ECHO} "${BOLD}Set IP address as the aliasing NAT address, e.g: ${GREEN}${_default}${NORMAL}"
   read natip
   [ -z "${natip}" ] && natip="${_default}"

    if [ -z "${natip}" ]; then
	$ECHO "${MAGENTA}Error: empty natip value${NORMAL}"
	return 1
    fi

    cbsd inventorysql --dbfile=${dbdir}/local.sqlite --action=update --param=natip --value=${natip} 2>/dev/null

    _default="pf"
    answ=0
    ok=
    while [ "$ok" != "ok" ]; do
	${ECHO} "${BOLD}Which one NAT framework should be use: [${GREEN}${_default}${NORMAL}${BOLD}]${NORMAL}"
	${ECHO} "${MAGENTA}(type FW name, eg pf,ipfw or \"exit\" for break)${NORMAL}"
	read ok leftover
	[ -z "$ok" ] && ok="${_default}"
	make_nat && return
	[ "${ok}" != "exit" ] || return
    done
}

# if arg then force configure
configure_named()
{
    FILE="/var/named/etc/namedb/named.conf"
    STRING="listen-on"
}

rsyncd_enable()
{
    [ ! -f "${inventory} " ] || . ${inventory}
    modconf /etc/rc.conf cbsdrsyncd_enable "YES"
#    [ -z "$nodeip" ] || modconf 0 /etc/rc.conf rsyncd_flags "--address=${nodeip} --config=${etcdir}/rsyncd.conf"
    [ -z "$nodeip" ] || modconf 0 /etc/rc.conf cbsdrsyncd_flags "--config=${etcdir}/rsyncd.conf"
    [ -f "/usr/local/etc/rc.d/cbsdrsyncd" ] && modconf /usr/local/etc/rc.d/cbsdrsyncd required_files "${etcdir}/cbsdrsyncd.conf"
    service cbsdrsyncd start
}

named_enable()
{
    modconf /etc/rc.conf named_enable "YES"
    cp ${etcdir}/cbsdnamed.conf /etc/namedb
    modconf /etc/rc.conf named_conf "/etc/namedb/cbsdnamed.conf"
    service named start
}


rsyncd_disable()
{
    service cbsdrsyncd stop > /dev/null 2>&1
    modconf /etc/rc.conf cbsdrsyncd_enable "NO"
}

named_disable()
{
    service named stop > /dev/null 2>&1
    modconf /etc/rc.conf named_enable "NO"
}

configure_rsync()
{
if [ ! -f "/usr/local/etc/rc.d/cbsdrsyncd" ]; then
    [ ! -d "/usr/local/etc/rc.d/" ] && mkdir /usr/local/etc/rc.d
    cp ${distdir}/rc.d/cbsdrsyncd /usr/local/etc/rc.d/
fi

if [ `grep -c cbsdrsyncd_enable /etc/rc.conf` = "1" ]; then
    return
fi

if ! getyesno "${MAGENTA}Configure RSYNC services for jail migration?${NORMAL}"; then
    rsyncd_disable
else
    rsyncd_enable
fi
}

configure_named()
{
[ -f "${etcdir}/cbsdnamed.conf" ] || return 0

if [ `grep -c named_enable /etc/rc.conf` = "1" ]; then
    return 0
fi

if ! getyesno "${MAGENTA}Configure NAMED service for resolving?${NORMAL}"; then
    named_disable
else
    named_enable
fi
}


collect_info()
{
    local _dmidecode _meminfo

    physmem=$((`/sbin/sysctl -n hw.realmem 2>/dev/null` / 1048576))

    _dmidecode=`which dmidecode`

    if [ -n "${_dmidecode}" ]; then
        memtype=`${_dmidecode} -t memory|grep -A20 "Memory Device" | grep -B20 "^Handle" | egrep "Type:|Speed:" |cut -d : -f 2 |xargs`
    else
        memtype=""
    fi

    hostname=`sysctl -n kern.hostname 2>/dev/null`
    osrelease=`sysctl -n kern.osrelease 2>/dev/null`
    cpumodel=`sysctl -n hw.model 2>/dev/null`
    ncpu=`sysctl -n hw.ncpu 2>/dev/null`

    cpufreq=`sysctl -n dev.cpu.0.freq 2>/dev/null`
    kernhz=`sysctl -n kern.hz 2>/dev/null`
    sched=`sysctl -n kern.sched.name 2>/dev/null`
    eventtimer=`sysctl -n kern.eventtimer.choice 2>/dev/null`
    disks=`sysctl -n kern.disks 2>/dev/null`

    cbsdver=${myversion}

    nics=""
    for i in $(/sbin/ifconfig -l); do
        case "${i%%[0-9]*}" in
		ipfw|ppp|sl|lp|faith|fwe|fwip|plip|pfsync|pflog|tun|vboxnet|lo)
                continue
                ;;
        esac
        nics="${nics} ${i}"
    done

    [ -n "${nics}" ] && nics=`echo ${nics}|tr " " ","`
}

