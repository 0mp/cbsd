# functions used by various rc scripts

# hostname and/or rootdir must be set
get_jid() {
local _res

	[ -z "$jname" -a -z "${path}" ] && return 0

	_res=$(/usr/sbin/jls -h jid name host.hostname path |tail +2| while read _jid _name _hostname _path; do
		[ "${_hostname}" = "$host_hostname" -o "${_path}" = "$path" ] && echo ${_jid}
	done)

	[ -z "${_res}" ] && return 0

    return ${_res}
}

# fatal error. Print message then quit with exitval
err() {
        exitval=$1
        shift
        echo -e "$*"
        # 1>&2
        exit $exitval
}

usage() {
    err 1 "usage: $0 ${MYARG}"
}

init() {
    MYNUMTEST=`echo $MYARG $MYOPTARG|wc -w|awk {'printf $1'}`
    DEBLOG="${tmpdir}/`basename $0`-log.$$"
    trap "rm -f ${DEBLOG}" 0 1 2

    if [ "$1" = "--help" ]; then
	echo "$MYDESC"
	echo "require: ${MYARG}"
	echo "opt: ${MYOPTARG}"
    [ -n "${ADDHELP}" ] && printf "$ADDHELP"
	exit
    fi

    if [ "$1" = "--args" ]; then
	echo "${greeting} ${MYNUMTEST}"
	for argword in ${MYARG} ${MYOPTARG}; do
	    echo "${argword}"
	done
	err 0 ""
    fi

    [ -f "${localcbsdconf}" ] || err 1 "no such local conf file"
    . ${localcbsdconf}

    # example
    #MYARG="src mk"
    #MYOPTARG="arch"
    while [ -n "$1" -a $MYNUMTEST -gt 0 ]; do
	ARG="${1%%=*}" #todo: value with "world1 world2"
	VAL="${1##*=}"
	    for arg in ${MYARG} ${MYOPTARG}; do
	    case "$arg" in
		"${ARG}") eval "${ARG}=${VAL}"; MYNUMTEST=$((MYNUMTEST - 1)); break ;;
	    esac
	    done
	shift
    done

    for i in $MYARG; do
	eval T=\$$i
	[ -n "${T}" ] || err 1 "Please set $i="
    done
}

# getyesno var
# Show $1 strings and get answer in infinity loop
# return 0 when YES/1 and 1 when not
# return 3 if not interactive ($inter=0)
getyesno()
{
[ "${inter}" = "0" ] && return 3

echo -e "${1}"
answ=
while [ x$answ = x ]; do
    echo -e "[${GREEN}yes(1) or no(0)${NORMAL}]"
    read reply leftover
        case $reply in
                #       "yes", "true", "on", or "1"
        Y*|y*|1)
                return 0
                ;;
                #       "no", "false", "off", or "0"
        N*|n*|0)
                return 1
                ;;
        esac
done
}

# value="YES" or "NO"
checkyesno()
{
        eval _value=\$${1}
        case $_value in

                #       "yes", "true", "on", or "1"
        [Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][Nn]|1)
                return 0
                ;;

                #       "no", "false", "off", or "0"
        [Nn][Oo]|[Ff][Aa][Ll][Ss][Ee]|[Oo][Ff][Ff]|0)
                return 1
                ;;
        *)
#                echo "\$${1} is not set properly - see ${rcvar_manpage}."
                return 1
                ;;
        esac
}


ipwmask()
{
export IWM=`echo $1 |cut -d "/" -f 1`
}

geniplist()
{
[ -f "${distdir}/tools.subr" ] || err 1 "No such tools.subr"
. ${distdir}/tools.subr

multiips=$@

I=`echo ${multiips} |tr "," " "`
IPS=""
ST=0

for a in ${I}; do
    # Identify type {inet,inet6}.

    if iptype $a; then
	echo "IP ${a} not identified"
    else
    # this is ip
	ST=$((ST + 1))
	if [ ${ST} -eq 1 ]; then
    	    IPS="${a}"
	else
	    IPS="${IPS} ${a}"
	fi
    fi
done
export IPS="${IPS}"
}


dot()
{
[ $? -eq 0 ] || {
echo "Error in $1"
if [ -f ${DEBLOG} ]; then
    echo "Guru meditaion: "
    cat ${DEBLOG}
fi
exit 1
}
[ "$1" = "0" ] || printf "."
}


# check&make lockfile $1
# $2 - additional action for trap
# $3 - safe, for force
makelock()
{

[ -f "${LOCKFILE}" -a "${3}" = "safe" ] && rm -f ${LOCKFILE}

[ -f "${LOCKFILE}"  ] && err 1 "Locked: ${LOCKFILE}. Try later"
TRAPS="rm -f ${LOCKFILE}; exit"

if [ -n "$2" ]; then
    TRAPS="$2; ${TRAPS}"
fi

trap "${TRAPS}" 0 1 2 3
[ "$3" = "safe" ] || touch $LOCKFILE
}
